<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<svg height="1015" version="1.2" width="1850" xmlns="http://www.w3.org/2000/svg" xmlns:atv="http://webmi.atvise.com/2007/svgext" xmlns:xlink="http://www.w3.org/1999/xlink">
 <defs/>
 <metadata>
  <atv:parameter behavior="optional" defaultvalue="" name="chartTitle" valuetype="string"/>
  <atv:parameter behavior="optional" name="factAddress" valuetype="address"/>
  <atv:parameter behavior="optional" name="planAddress" valuetype="address"/>
  <atv:gridconfig enabled="true" gridstyle="lines" height="20" width="20"/>
  <atv:snapconfig enabled="false" height="10" width="10"/>
 </metadata>
 <g atv:insensitive="true" atv:refpx="0" atv:refpy="0" id="id_0">
  <rect atv:refpx="925" atv:refpy="507.5" fill="#1f1f1f" height="1015.00" id="id_1" width="1850.00" x="0" y="0"/>
 </g>
 <svg atv:refpx="447.771" atv:refpy="234" height="450" id="id_11" width="750" x="72.771" xlink:href="AGENT.DISPLAYS.NewView.Halliburton.Chart" y="9">
  <atv:argument name="base" value="pressure"/>
  <atv:argument name="chartTitle" value="Перепад"/>
 </svg>
 <svg atv:refpx="1299.903" atv:refpy="234" height="450" id="id_12" width="750" x="924.903" xlink:href="AGENT.DISPLAYS.NewView.Halliburton.Chart" y="9">
  <atv:argument name="base" value="load"/>
  <atv:argument name="chartTitle" value="Нагрузка"/>
 </svg>
 <svg atv:refpx="443.076" atv:refpy="729.703" height="450" id="id_13" width="750" x="68.076" xlink:href="AGENT.DISPLAYS.NewView.Halliburton.Chart" y="494.703">
  <atv:argument name="base" value="torque"/>
  <atv:argument name="chartTitle" value="Момент"/>
 </svg>
 <script atv:desc="" atv:name="" type="text/ecmascript"><![CDATA[var paths = [
	"AGENT.OBJECTS.Halliburton.API.HookLoad",
	"AGENT.OBJECTS.Halliburton.API.ECDVersusRunDepth",
	"AGENT.OBJECTS.Halliburton.API.CirculatingPressureVersusRunDepth",
	"AGENT.OBJECTS.Halliburton.API.PorePressureDepth",
	"AGENT.OBJECTS.Halliburton.API.FracGradientDepth"
];

var namesMap = {
	"г/см3": "load",
	"атм": "pressure",
	"кгс*м": "torque",
	"м": "depth"
};

var valueMap = {
	"м": [],
	"г/см3": [],
	"атм": [],
	"кгс*м": []
};

var payload = {
	pressure: {},
	load: {},
	//density: {},
	torque: {},
	//depth: {}
	transcription: {}
};

function elemDepth(e) {

	return e.run_depth || e.MD || e.Annulus_depth || e.PoreDepth || e.FracDepth || 0
}

function getHalliburtonData() {
	return new Promise(function(resolve, reject) {
		webMI.data.read(paths, function(res) {
			var calcedRes
			
			res = res.map(function(item) {
				var result = JSON.parse(item.value);
				
				Object.entries(result.units).map(function(item) {
					valueMap[item[1]].push(item[0]);
					
				})
				
				return result
			})
			var valuesArray = Object.keys(valueMap);
			res.map(function(item) {
				Object.assign(payload.transcription, item.transcription)
				item.drag_chart_results.map(function(elem) {
					Object.keys(elem).map(function(value) {
						valuesArray.map(function(name, index) {
							//console.log(valueMap[valuesArray[index]]);
							if (valueMap[valuesArray[index]].includes(value) && valuesArray[index] != "м") {
								if (!payload[namesMap[name]][value]) payload[namesMap[name]][value] = [];
								//console.log(11, elem, value);
								payload[namesMap[name]][value].push({ y: elemDepth(elem), x: elem[value], name: payload.transcription[value] });
							}
						})
					}) 
				})
			})
			console.log(res, payload)
			webMI.trigger.fire("setHallData", payload);
		})
	}) 
}

getHalliburtonData();]]></script>
</svg>
