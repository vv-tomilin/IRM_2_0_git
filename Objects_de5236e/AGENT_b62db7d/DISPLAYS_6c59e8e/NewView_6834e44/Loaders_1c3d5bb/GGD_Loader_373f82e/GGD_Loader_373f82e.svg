<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<svg height="1015" version="1.2" width="1850" xmlns="http://www.w3.org/2000/svg" xmlns:atv="http://webmi.atvise.com/2007/svgext" xmlns:xlink="http://www.w3.org/1999/xlink">
 <defs/>
 <metadata>
  <atv:gridconfig enabled="false" gridstyle="lines" height="20" width="20"/>
  <atv:snapconfig enabled="false" height="10" width="10"/>
 </metadata>
 <rect atv:refpx="925.01" atv:refpy="507.507" fill="#1f1f1f" height="1015" id="id_2" stroke="#0000ff" stroke-width="0" width="1850" x="0" y="0"/>
 <foreignObject height="284.042" id="id_0" width="262" x="41.983" y="18.34">
  <div style="width:100%;height:100%;" xmlns="http://www.w3.org/1999/xhtml">
   <script src="../../Loader_scripts/xlsx.full.min.js"/>
   <script src="../../Loader_scripts/jszip.js"/>
   <style>
	.upload_file{
		width:0px;
		height:0px;
		background-color: #177ddc;
	}
	.upload_file_button{
		border-radius:12px;
		height:67px;
		width:100%;
		color:white;
		background-color:#177ddc;
		border:none;
		font-size:1.7rem;
		border:1px solid #177ddc;
		transition: 0.2s ease;
	}
	.upload_file_button:hover{
		background-color:gray
	}
	.download_text{
		color:black;
		margin:0;
		margin-bottom:5px;
	}
	.pad{
		margin-top:18px;
	}
	.inactive{
		background-color:rgb(10,34,46);
	}
	.inactive:hover{
		background-color:rgb(10,34,46);
	}
</style>
   <button class="upload_file_button" id="uploadButton">Загрузить файл</button>
   <input class="upload_file" id="fileUpload" type="file"/>
   <input class="upload_file_button inactive" id="upload" type="button" value="Просмотр"/>
   <button class="upload_file_button pad inactive" id="writeToBase">OK</button>
  </div>
 </foreignObject>
 <foreignObject height="922" id="id_1" width="1160" x="650.246" y="42.255">
  <div style="width:100%;height:100%; overflow:auto; background-color:#2a2c2b" xmlns="http://www.w3.org/1999/xhtml">
   <style>
td{
	border:1px solid rgb(128,128,128);
	max-width:600px;
	min-width:200px;
	height:50px;
}
table{
	border-spacing:0px;
	border:1px solid rgb(128,128,128);
	color:white;
	text-align:center;
}
</style>
   <table id="preview"/>
  </div>
 </foreignObject>
 <foreignObject height="922" id="id_4" width="246.483" x="370.898" y="42">
  <div id="textContainer" style="width:100%;height:100%; background-color:#e3e8e6;" xmlns="http://www.w3.org/1999/xhtml">
   <div style="width:100%;height:10px;background-color:#cfd4d2;"/>
  </div>
  <style>
	.final-modal-container {
		width: 100vw;
		height: 100vh;
		position: absolute;
		background: rgba(150, 150, 150, 0.3);	
	}
	
	.hide {
		display: none;	
	}  
  </style>
 </foreignObject>
 <text atv:refpx="445.645" atv:refpy="29" fill="#e4e8e7" font-family="Arial" font-size="26" id="id_3" x="415.145" y="33.5">Состояние:</text>
 <text atv:refpx="868.616" atv:refpy="29" fill="#e4e8e7" font-family="Arial" font-size="26" id="id_5" x="844.866" y="33.5">Таблица:</text>
 <svg atv:refpx="176.071" atv:refpy="371.534" height="67" id="id_6" width="262" x="45.071" xlink:href="SYSTEM.LIBRARY.PROJECT.OBJECTDISPLAYS.loadFromAss.loadGGDbutton" y="338.034"/>
 <script atv:desc="" atv:name="" type="text/ecmascript"><![CDATA[function addText(text) {
    var str = '<p class="download_text" id="Dres">' + text + '</p>'
    document.getElementById("textContainer").insertAdjacentHTML("beforeend", str)
}

addText("Выберите, пожалуйста, файл")
document.getElementById("upload").addEventListener('click', function (e) {
    if (!document.getElementById("upload").classList.contains('inactive')) {
        Upload()
        document.getElementById("writeToBase").classList.remove('inactive')
    }
})
document.getElementById("uploadButton").addEventListener('click', function (e) {
    document.getElementById("fileUpload").click()
    document.getElementById("writeToBase").classList.add('inactive')
})
document.getElementById("fileUpload").addEventListener('change', function (e) {
    console.log(e.target.value)
    addText("Выбранный файл:")
    addText(e.target.value.split('\\')[e.target.value.split('\\').length - 1])
    addText("Вы можете выбрать другой файл или просмотреть этот.")
    document.getElementById("upload").classList.remove('inactive')
})
function Upload() {
    //Reference the FileUpload element.
    var fileUpload = document.getElementById("fileUpload");


    if (typeof (FileReader) != "undefined") {
        var reader = new FileReader();

        //For Browsers other than IE.
        if (reader.readAsBinaryString) {
            reader.onload = function (e) {
                ProcessExcel(e.target.result);
            };
            reader.readAsBinaryString(fileUpload.files[0]);
        } else {
            //For IE Browser.
            reader.onload = function (e) {
                var data = "";
                var bytes = new Uint8Array(e.target.result);
                for (var i = 0; i < bytes.byteLength; i++) {
                    data += String.fromCharCode(bytes[i]);
                }
                ProcessExcel(data);
            };
            reader.readAsArrayBuffer(fileUpload.files[0]);
        }
    } else {
        alert("This browser does not support HTML5.");
    }
};
function ProcessExcel(data) {
    var workbook = XLSX.read(data, {
        type: 'binary'
    });

    var firstSheet = workbook.SheetNames[0];
    var excelRows = XLSX.utils.sheet_to_csv(workbook.Sheets[firstSheet], { FS: ';', RS: "|||" });
    var raw_csv = excelRows.split('|||')
    var needToContain = ['Описание', 'Забой', 'Время']
    needToContainPositions = [0, 0, 0]
    var needRow = 0
    for (var i = 0; i < raw_csv.length; i++) {
        var ok = true;
        needToContain.forEach(function (e) {
            if (raw_csv[i].indexOf(e) == -1) {
                ok = false
            }

        })
        if (ok) {
            needRow = i;
            var temp = raw_csv[needRow].split(';')
            for (var j = 0; j < needToContainPositions.length; j++) {
                for (var t = 0; t < temp.length; t++) {
                    if (needToContain[j] == temp[t]) {
                        needToContainPositions[j] = t
                        break;
                    }
                }
            }
            break;
        }
    }
    var timeText = 'Начало бурения:'
    var timestart = 0;
    for (var i = 0; i < raw_csv.length; i++) {
        var stop = false
        var buf = raw_csv[i].split(';')
        console.log(buf)
        for (var j = 0; j < buf.length; j++) {
            if (buf[j] == timeText) {
                timestart = buf[j + 3]
                stop = true;
                break;
            }
        }
        if (stop) { break; }
    }
    
    console.log(timestart)
    while (timestart.indexOf('/') != -1) {
        timestart = timestart.replace('/', '.')
    }
    while (timestart.indexOf(' ') != -1) {
        timestart = timestart.replace(' ', '.')
    }
    while (timestart.indexOf(':') != -1) {
        timestart = timestart.replace(':', '.')
    }
    var timestampNumbers = timestart.split('.')
    var timestartTimestamp = new Date(parseInt(timestampNumbers[2]) + 2000, parseInt(timestampNumbers[1]) - 1, parseInt(timestampNumbers[0]), parseInt(timestampNumbers[3]), parseInt(timestampNumbers[4]), 0, 0)
    console.log(+timestartTimestamp) //дата начала
    console.log(needRow)
    console.log(needToContainPositions)
    console.log(raw_csv[needRow])
    var res = [{ time: +timestartTimestamp, vD: 0, opr: "", opt: 0 }]
    for (var i = needRow + 2; i < raw_csv.length - 2; i++) {
        var buf = raw_csv[i].split(';')


        var opt = parseFloat(buf[needToContainPositions[2]])
        var opr = buf[needToContainPositions[0]]
        var vD = parseInt(buf[needToContainPositions[1]])
        var time = res[res.length - 1].time + (opt * 3600 * 1000)
        var obj = {}
        obj.time = time
        obj.vD = vD
        obj.opr = opr
        obj.opt = opt
        if (opr == "Итого, сут.:") {
            break;
        }
        if (opt != 0) {

            console.log(buf)
            console.log(obj)
            res.push(obj)
        }


    }
    console.log(res)
    //document.getElementById('drillstart').innerHTML=new Date(timestartTimestamp).toLocaleString()
    //document.getElementById('drillend').innerHTML=new Date(res[res.length-1].time).toLocaleString()
    addText("Время начала бурения:")
    addText(new Date(timestartTimestamp).toLocaleString())
    addText("Время окончания бурения:")
    addText(new Date(res[res.length - 1].time).toLocaleString())
    addText("Если всё в порядке, нажмите кнопку 'ОК'. Также, вы можете загрузить другой файл вместо данного")
    document.getElementById('preview').innerHTML = ""
    document.getElementById('writeToBase').style.display = 'block'

    document.getElementById("writeToBase").addEventListener('click', function (e) {

        if (!document.getElementById("writeToBase").classList.contains('inactive')) {
            webMI.data.write("AGENT.OBJECTS.Depth_day_data.start_date", +timestartTimestamp);
            webMI.data.write("AGENT.OBJECTS.Depth_day_data.end_date", res[res.length - 1].time);
            webMI.data.write("AGENT.OBJECTS.Depth_day_data.plan_data", JSON.stringify(res));

            webMI.data.read("AGENT.OBJECTS.SideBoreholes.fieldNameInState", function (e) {
                webMI.data.write(["AGENT.OBJECTS.Rig.General.FieldName"], [e.value]);
            });

            webMI.data.read("AGENT.OBJECTS.SideBoreholes.bushNameInState", function (e) {
                webMI.data.write(["AGENT.OBJECTS.Rig.General.BushName"], [e.value]);
            });

            webMI.data.read("AGENT.OBJECTS.SideBoreholes.wellNameInState", function (e) {
                webMI.data.write(["AGENT.OBJECTS.Rig.General.WellName"], [e.value]);
            });

            webMI.data.read("AGENT.OBJECTS.SideBoreholes.sideBarrelsData", function (e) {
                webMI.data.write(["AGENT.OBJECTS.Rig.General.SideBoreholesData"], [e.value]);
            });

            webMI.data.write(["AGENT.OBJECTS.Rig.General.isCreateNewWell"], [true]);

            webMI.display.openDisplay('AGENT.DISPLAYS.NewView.CreateWell.FinalModalForm', webMI.query, "main_frame");

        }
    })

    document.getElementById('preview').insertAdjacentHTML('beforeend', '<tr><td>Операция</td><td>Забой</td><td>Время выполнения</td><td>Время окончания</td></tr>')
    res.forEach(function (e, cnt) {
        if (cnt != 0) {
            var str = "<tr><td>"
            str = str + e.opr + "</td><td>"
            str = str + e.vD + "</td><td>"
            str = str + e.opt + "</td><td>"
            str = str + new Date(e.time).toLocaleString() + "</td></tr>"
            document.getElementById("preview").insertAdjacentHTML('beforeend', str)
        }
    })
};]]></script>
</svg>
