<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<svg xmlns:atv="http://webmi.atvise.com/2007/svgext" height="400" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.2" width="200">
 <defs/>
 <metadata>
  <atv:parameter name="targetFrame" desc="target frame" defaultvalue="" behavior="optional" valuetype="string"/>
  <atv:parameter name="filterTrigger" desc="filter trigger" defaultvalue="com.atvise.filterNavigationTree" behavior="optional" valuetype="string"/>
  <atv:parameter name="isObjectNavigator" desc="object navigator" defaultvalue="false" behavior="optional" valuetype="bool"/>
  <atv:parameter name="displayConfig" desc="display config (insert object type node id's, seperated with a semicolon)" defaultvalue="" behavior="optional" valuetype="string"/>
  <atv:parameter name="displayStartAddress" desc="Start address in display mode" defaultvalue="AGENT.DISPLAYS" behavior="optional" valuetype="display"/>
  <atv:parameter name="objectDisplayStartAddress" desc="Start address in object mode" defaultvalue="AGENT.OBJECTS" behavior="optional" valuetype="address"/>
  <atv:parameter name="fontSize" desc="Font size" defaultvalue="SYSTEM.GLOBALS.atvFontSize" behavior="optional" valuetype="global"/>
  <atv:parameter name="fontColor" desc="Font color" defaultvalue="SYSTEM.GLOBALS.atvFontColor" behavior="optional" valuetype="global"/>
  <atv:parameter name="bgColor" desc="Background color" defaultvalue="SYSTEM.GLOBALS.atvFillColor" behavior="optional" valuetype="global"/>
  <atv:parameter name="iconFolder" desc="Folder icon" defaultvalue="/treeView/icons_navigator/folder.svg" behavior="optional" valuetype="string"/>
  <atv:parameter name="iconDisplay" desc="Display icon" defaultvalue="/treeView/icons_navigator/display.svg" behavior="optional" valuetype="string"/>
  <atv:parameter name="iconCollapsed" desc="Icon for collapsed elements" defaultvalue="/treeView/icons_navigator/leafCollapsed.svg" behavior="optional" valuetype="string"/>
  <atv:parameter name="iconExpanded" desc="Icon for expanded elements" defaultvalue="/treeView/icons_navigator/leafExpanded.svg" behavior="optional" valuetype="address"/>
  <atv:gridconfig gridstyle="lines" height="20" width="20" enabled="false"/>
  <atv:snapconfig height="10" width="10" enabled="false"/>
 </metadata>
 <foreignObject y="0" height="400" width="200" x="0" id="fo_display_navigator">
  <div xmlns="http://www.w3.org/1999/xhtml" style="width:100%;height:100%" id="display_navigator"/>
 </foreignObject>
 <rect y="-0.746" atv:bindbr="1,1" height="401.492" atv:bindtl="0,0" stroke-width="5" width="199.492" atv:refpx="100.254" fill="#ffffff" stroke="#9d44a0" atv:refpy="200" x="0.508" id="border"/>
 <text y="207.5" atv:bindbr="0.5,0.5" atv:bindtl="0.5,0.5" text-anchor="middle" font-size="20" atv:refpx="99.5" fill="#575757" font-family="Arial" atv:refpy="199.999" x="100" id="label">Display navigator</text>
 <script type="text/ecmascript"><![CDATA[webMI.addOnload (function () {
	var treeView;
	var queryParams = webMI.query;
	var displayNavigator = document.getElementById("display_navigator");
	var parameters = {};
	var targetFrame = queryParams.targetFrame || "";
	var filterTrigger = queryParams.filterTrigger;
	var isObjectNavigator = queryParams.isObjectNavigator
	var displayConfig = queryParams.displayConfig;

	var navigator = document.getElementById("display_navigator");

	var iconFolder = queryParams.iconFolder;
	var iconDisplay = queryParams.iconDisplay;
	var iconCollapsed = queryParams.iconCollapsed;
	var iconExpanded = queryParams.iconExpanded;

	var bgColor = queryParams.bgColor;
	var fontColor = queryParams.fontColor;
	var treeFontSize = queryParams.fontSize;

	var displayStartAddress = queryParams.displayStartAddress;
	var objectDisplayStartAddress = queryParams.objectDisplayStartAddress;
	var navigationDepth = queryParams.navigationDepth;

	function createNavigator() {
		webMI.gfx.setVisible("border", false);
		webMI.gfx.setVisible("label", false);
	
		//Initiate treeview for address selection
		treeView = webMI.callExtension("SYSTEM.LIBRARY.PROJECT.QUICKDYNAMICS.TreeView", parameters);
	
		treeView.on("ready", function(e){
			webMI.trigger.connect(filterTrigger, function (triggerObj) {
				var searchString = triggerObj.value;
				treeView.filter(searchString);
			}, "");
	
			treeView.on("select", function(triggerObj) {
				var address = triggerObj.data.address;
				var parent = triggerObj.data.parent;
				var parameters = webMI.query;

				if (parent) {
					parameters = {base: parent};
				}


				if (address) {
					webMI.display.openDisplay(address, parameters, targetFrame);
				} else {
					console.error("display_navigator#treeView on select: Address is missing");
				}
			});
		});
	}

	navigator.style.backgroundColor = bgColor;

	parameters.busyIndicatorTolerance = 100;
	parameters.expandOffset = 3;
	parameters.fontSize = treeFontSize;

	parameters.fontColor = fontColor;
	parameters.id = "fo_display_navigator";
	parameters.imagePaths = "{\"baseVariableImage\":\"/treeView/icons/baseVariable.svg\",\"folderImage\":\"" + iconFolder + "\",\"displayImage\":\"" + iconDisplay + "\",\"aggregateFunctionImage\":\"/treeView/icons/aggregateFunction.svg\",\"collapsedLeafImage\":\"" + iconCollapsed + "\",\"expandedLeafImage\":\"" + iconExpanded + "\"}";
	parameters.leafIndentation = 5; //15
	parameters.leafPadding = 5; //2
	parameters.renderTo = displayNavigator.id;
	parameters.selectableTypes = "[\"baseVariable\", \"aggregateFunction\"]";
	parameters.startAddress = displayStartAddress;
	parameters.filter = ["AGENT.DISPLAYS.Default"];
	parameters.navigationDepth = navigationDepth;

	if(isObjectNavigator === "true") {
		parameters.startAddress = objectDisplayStartAddress;
		parameters.displayConfig = displayConfig.split(";");

		if (parameters.displayConfig.length > 0) {
			createNavigator();
		} else {
			console.warn("Display navigator#init: display config types are missing!");
		}
	} else {
		createNavigator();
	}
});

]]></script>
</svg>
