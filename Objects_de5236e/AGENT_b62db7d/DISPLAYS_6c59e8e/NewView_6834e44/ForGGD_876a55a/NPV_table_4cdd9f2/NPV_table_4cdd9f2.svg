<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<svg height="1015" version="1.2" width="1850" xmlns="http://www.w3.org/2000/svg" xmlns:atv="http://webmi.atvise.com/2007/svgext" xmlns:xlink="http://www.w3.org/1999/xlink">
 <defs/>
 <metadata>
  <atv:gridconfig enabled="false" gridstyle="lines" height="20" width="20"/>
  <atv:snapconfig enabled="false" height="10" width="10"/>
 </metadata>
 <foreignObject height="1015" id="id_0" width="1093" x="0" y="0">
  <div style="width:100%;height:100%; overflow:auto;" xmlns="http://www.w3.org/1999/xhtml">
   <style>
body {
	--green: rgb(55, 222, 57);
	--orange: rgb(236, 156, 97);
	--light-grey: rgb(128, 128, 128);
	--bright-black: rgba(20, 20, 20, 19);
	--black: rgb(0, 0, 0);
	--white: rgb(230, 230, 230);
	--bright-white: rgb(255, 255, 241);
	--grey: rgb(77, 77, 77);
	--dark-grey: rgb(31, 31, 31);
	font-family: Arial;
}

.table-wrapper * {
	box-sizing: border-box;
	margin: 0;
	padding: 0;
}
.table__wrapper {
	box-sizing: border-box;
	margin: 0;
	padding: 0;
	border: 1rem solid var(--grey);
	background: var(--white);
}
.table {
    background: inherit;
    border-collapse: collapse;
    text-align: center;
    margin: .7rem;
    width:98%;
    color:white
}
.table__caption {
	background: #000000;
	display: table-caption;
}
.table__caption-container {
	display: flex;
	align-items: center;
	justify-content: start;
}
.table__header {
    border: 1px solid #000000;
}
.table__header-domain {
    background: inherit;
    border: 3px solid var(--light-grey);
    padding: .2rem;
}
.table__row {
    background: inherit;
}
.table__row-domain {
    background: inherit;
    border: 3px solid var(--light-grey);
    padding: .5rem;
}
.table__row-domain:hover {
	background: var(--bright-white);
}
.table__button {
	padding: .5rem 1rem;
	border: transparent;
	background: inherit;
}
.table__input {
	text-align: center;
	box-sizing: border-box;
}
.file-input {
	visibility: hidden;
}


.button__label-dark {
	z-index: 99;
	font-size: 1rem;
	background-color: var(--bright-black);
	color: var(--green);
	padding: .75rem 1.5rem;
	text-align: center;
	border: 3px solid var(--black);
	cursor: pointer;
}

.button__label-dark:hover {
	background-color: var(--black);
}
.button__label-dark:active {
	transform: translateY(2px);
}

.add-button {
	border: transparent;
	padding: 0.5rem;
	background: transparent;
	color: var(--green);
	display: flex;
	justify-content: space-between;
	align-items: center;
	cursor: pointer;
}
.add-button:hover {
	border-bottom: 1px solid var(--grey);
}

.add-button:active {
	transform: translateY(-1px);
}

.orange-square {
	position: relative;
	display: block;
	min-width: 25px;
	min-height: 25px;
	background: var(--orange);
}
.orange-round {
	position: relative;
	display: flex;
	justify-content: center;
	align-items: center;
	min-width: 25px;
	min-height: 25px;
	background: var(--orange);
	border-radius: 50%;
	pointer-events: none;
	
}

.reversed-cross {
	width: 100%;
	height: 100%;
	
}
.reversed-cross__first-line {
	position: absolute;
	left: 20%;
	top: 40%;
	width: 15px;
	height: 4px;
	background: var(--white);
	transform: rotate(45deg);
}
.reversed-cross__second-line {
	position: absolute;
	left: 20%;
	top: 40%;
	width: 15px;
	height: 4px;
	background: var(--white);	
	transform: rotate(-45deg);
}

.cross {
	width: 100%;
	height: 100%;
	display: flex;
	justify-content: center;
	
}
.cross__first-line {
	position: absolute;
	left: 5px;
	top: 11px;
	width: 1rem;
	height: .2rem;
	background: var(--white);
}
.cross__second-line {
	left: 45%;
	top: 17.5%;
	position: absolute;
	width: .2rem;
	height: 1rem;
	background: var(--white);	
}

.green-text {
	margin: .7rem;
	font-size: 1rem;
	color: var(--green);
}

.choice-menu {
	display: flex;
	flex-direction: column;
	justify-content: space-between;
	align-items: center;
	background: var(--grey);
	margin: 0;
	box-sizing: border-box;
	padding: .5rem 1rem;
}

.choice-menu__body {
	width: 100%
	height: 100%;
	display: flex;
	justify-content: space-between;
	align-items: center;
}
.choice-menu__button {
	width: 150px;
	margin: .3rem;
	text-align: center;
}
	
.align-center {
	display: flex;
	justify-content: center;
	align-items: center;
}
.table__form {
	display: flex;
	box-sizing: border-box;
	margin: 0;
	padding: 0;
}
</style>
   <table class="table" id="tbl"/>
   <button id="buttonAddRow" style="display:none">+</button>
  </div>
 </foreignObject>
 <foreignObject height="108.922" id="id_1" width="221.6" x="1094.85" y="0">
  <div style="width:100%;height:100%" xmlns="http://www.w3.org/1999/xhtml">
   <style>
	.redBut{
		background-color: #333333;
		border-style:none;
		color:white
	}
	.redBut:hover{
		background-color:#000;
	}
</style>
   <button class="redBut" id="saveNPV" style="width:100%;height:100%">Сохранить</button>
  </div>
 </foreignObject>
 <foreignObject height="108.922" id="id_2" width="221.6" x="1318" y="0">
  <div style="width:100%;height:100%" xmlns="http://www.w3.org/1999/xhtml">
   <button class="redBut" id="closeNPV" style="width:100%;height:100%">Закрыть</button>
  </div>
 </foreignObject>
 <script atv:desc="" atv:name="" type="text/ecmascript"><![CDATA[var evt = new CustomEvent("submit", { "bubbles":true, "cancelable": true });
  
  function Table(id, columns, type) {
	this.table = document.getElementById(id);
	this.data = {
		columns: [],
		rows: []
	};
	if (columns) this.data.columns = columns
	//this.currentData = deepClone(this.data);
	this.name = null;
	this.input = null;
	this.form = null;
	this.classes = {
		header: "table__header",
		headerDomain: "table__header-domain",
		row: "table__row",
		rowDomain: "table__row-domain"
	};
	

	var matchReg = /.*_.*-.*/;
	var that = this;
	var currentlyEditing = {};
	var button = null;
	var form = null;
	var inputValue;
	var rowsDiv = "<tbody id=table__rows data-table=body name=tbody></tbody>";
	var headingDiv = "<tbody id=table__heading data-table=heading name=theading></tbody>";
	//console.log(this);
	
	this.table.innerHTML = "";

	this.table.onclick = function(e) {
		if (e.target.id.includes("delete")) {
			deleteRow(e); 
			return
		}
		editing(e.target);
		
		//getValueObjectFromId(e.target.id, that);
	}
	this.table.insertAdjacentHTML("beforeend", headingDiv);
	this.table.insertAdjacentHTML("beforeend", rowsDiv);
	//this.table.ondblclick = function(e) {
		//editing(e.target);
	//}
	
	function deleteRow(e) {
		var rowNumber = e.target.id.replace(/[^\d]/g, "");
		var row = document.getElementById("tr_" + rowNumber);

		row.remove();
		that.data.rows.splice(rowNumber, 1);
		submit();
		that.render(that.data.rows);
	}

	function submit() {
	// *** on input submit ***
		if (Object.keys(currentlyEditing).length < 1) return
		
		//webMI.data.write(inputVar, currentlyEditing.path.row[currentlyEditing.path.domain])
		
		//webMI.data.read(inputVar, function(e) {		
			//inputValue = e.value;
			
			currentlyEditing.path.row[currentlyEditing.path.domain] = that.input.value;
			//currentlyEditing.path.row[currentlyEditing.path.domain] = inputValue;
			currentlyEditing.element.innerHTML = "";
			currentlyEditing.element.insertAdjacentHTML("beforeend", that.input.value);
			//currentlyEditing.element.insertAdjacentHTML("beforeend", inputValue);
			currentlyEditing = {};
			that.input.style.visibility = "hidden";
			//temp
			//that.data.timestamp = new Date();
			//tableToSend = that.data;
			//console.log(that.data)
			
		//})
	}

	function replaceInputPosition(e) {
		var rect = e.getBoundingClientRect();
		
		that.input.style.top = rect.top + "px";
		that.input.style.left = rect.left + "px";
		that.input.style.width = rect.width + "px";
		that.input.style.height = rect.height + "px";
	}	
	
	function editing(element) {
	/*
		if (!button) {
			button = document.getElementById("button");
			button.onclick = function() {
				submit();
			}
		}
	*/
		function addSubmitEvent(form) {
			form.addEventListener("submit", function(e) {
				e.preventDefault();
				//console.log("submit");
				submit();			
			})			
		}
		if (!that.form) {
			that.form = document.getElementById("table__input-form");
			addSubmitEvent(that.form);
			
		} 
		if (!element.id.match(matchReg)) return
		//if (Object.keys(currentlyEditing).length > 0) return

		// var vObj = getValueObjectFromId(element.id);
		submit();
		currentlyEditing.element = element;
		currentlyEditing.path = getValueObjectFromId(element.id);
		replaceInputPosition(element);
		//should put pub-sub or observer pattern here
		that.input.style.visibility = "visible";
		that.input.value = element.innerHTML;
		
		//webMI.data.write(inputVar, currentlyEditing.path.row[currentlyEditing.path.domain])
	}

	function getValueObjectFromId(id) {
		if (!id.match(matchReg)) return

		var data = id.replace(/.*_/, "");
		var domainId = data.replace(/.*-/, "");
		var rowId = data.replace(/-.*/, "");
		// get reference from event.target.id 
		// row_domain -> row-index_object.keys()-index
		var value = that.data.rows[rowId][Object.keys(that.data.rows[rowId])[domainId]];
		var row = that.data.rows[rowId];
		var domain = [Object.keys(that.data.rows[rowId])[domainId]]

		return { row: row, domain: domain }
	}
}

Table.prototype.addRow = function(rowValues, rowObj) {
	// *** ADD ROW TO DATA ***
	//var currentRow = Object.keys(that.data.rows[i]);
	var rowElement = "";
	var rowData = {};
	var that = this;	
	
	for (var j = 0; j < that.data.columns.length; j++) {
		//rowElement += "<td id=td_" + that.data.rows.length + "-" + j + ">" + "0" + "</td>";
		rowData[that.data.columns[j].field] = "";
	}
	
	that.data.rows.push(rowData);
	that.render(that.data.rows);
}

Table.prototype.render = function (rowsData) {
	var rows = "";
	var that = this;
	//var tableElement = document.querySelector("[data-table='body']");
	var tableElement = document.getElementById("table__rows");
	
	this.data.rows = rowsData;
	
	function deleteButton(id) {
		var reversedCross = "<span class=reversed-cross> <span class=reversed-cross__first-line></span> <span class=reversed-cross__second-line></span> </span>"
		var orangeRound = "<span class=orange-round>" + reversedCross +  "</span>"
		var button = "<button id=button_" + id + "_delete" + " class='table__delete-button table__button'>" + orangeRound + "</button>"
	
		return "<td id=id_" + id + "_delete class=table__row-domain >" + button + "</td>"
	}

	function addRow(rowObj, index) {
		// *** RETURN ROW ***
		var rowValues = Object.keys(rowObj);
		var row = "";
		for (var j = 0; j < rowValues.length; j++) {
			row += "<td id=td_" + index + "-" + j + " class=" + that.classes.rowDomain + ">" + rowObj[rowValues[j]] + "</td>";
		}
	
		return row
	}
	
	for (var i = 0; i < this.data.rows.length; i++) {
		rows += "<tr id=tr_" + i + " class=" + this.classes.row + ">" + addRow(that.data.rows[i], i) + deleteButton(i) + "</tr>";
	}
	
	tableElement.innerHTML = ""
	tableElement.insertAdjacentHTML("beforeend",  rows);
	
	//temp
	//that.data.timestamp = new Date();
	tableToSend = that.data;
}

Table.prototype.init = function() {
	// *** RENDER THE TABLE ***
	var columns = "";
	//var rows = "";
	var that = this;
	//var tableElement = document.querySelector("[data-table='heading']");
	var tableElement = document.getElementById("table__heading");
	var form = (function() {
		//var buttonAddRow = 	"<button id=buttonAddRow class='table__add-button table__button'>Add row</button>";
		var inputForm = "<form id=table__input-form><input id=table__input class=table__input /></form>";
		//var buttonSubmit = "<button id=button class='table__submit-button table__button'>Submit</button>";
	
		return inputForm
	})();
	
	for (var i = 0; i < this.data.columns.length; i++) {
		columns += "<th id=th_" + i + " class=" + this.classes.headerDomain + ">" + this.data.columns[i].name + "</th>";
	}
	
	columns += "<th id=th_" + i + " class=" + this.classes.headerDomain + ">" + "Удалить строку" + "</th>"	
	
	// temporary decision
	//if (this.form) this.form = null;
	tableElement.insertAdjacentHTML("beforeend",  "<caption class=table__caption><div class=table__caption-container>" + form + "</div></caption>");
	tableElement.insertAdjacentHTML("beforeend", "<tr class=" + this.classes.header + ">" + columns + "</tr>");
	
	var buttonAddRow = document.getElementById("buttonAddRow");
	
	buttonAddRow.onclick = function() {
		that.addRow();
	}
	
	this.input = document.getElementById("table__input");
	this.input.style.visibility = "hidden";
	this.input.style.position = "fixed";
	this.input.style.zIndex = 99;
	this.input.addEventListener('keydown', function(f) {
	if (f.srcElement.getAttribute('readonly') != 'true') {
		if (f.key == 'Backspace') {
			f.srcElement.value = f.srcElement.value.slice(0,-1);
			//console.log("backspace")
		}
		if (f.key == 'Enter') {
			
			!document.getElementById("table__input-form").dispatchEvent(evt);
			console.log(that.data)
			//console.log("212");
			//!f.srcElement.dispatchEvent(evt);
		}
	}
		/*	
		} else if (!isNaN(f.key)) {
		}
		else {
			f.srcElement.value=f.srcElement.value.slice(0,-1)
		}}
		else{}
		*/
		
	})
}

var t = new Table('tbl',[{field:'td1',name:'ДАТА',id:'hui1'},{field:'td2',name:'НПВ (ч)',id:'hui2'}])
t.init()

/*for(var i =0;i<31;i++){
	var buf={td1:i+'.07.2021',td2:i}
	rows.push(buf)
}*/

webMI.data.read('AGENT.OBJECTS.Depth_day_data.start_date',function(e){
	var rows=[]
	var from=parseInt(e.value)
	var to =Date.now()+(24*3600*1000)
	console.log(from,to)
	for(var i=from;i<to;i+=(24*3600*1000)){
		var buf={}
		var dt = new Date(i)
		var d=dt.getDate()
		if(d<10){d='0'+d}
		console.log(dt)
		var str=d+'.'
		d=dt.getMonth()+1
		if(d<10){d='0'+d}
		str=str+d+'.'+dt.getFullYear()
		console.log(str)
		buf={td1:str,td2:0}
		rows.push(buf)
	}
	webMI.data.read('AGENT.OBJECTS.Depth_day_data.NPV',function(f){
		var raw = JSON.parse(f.value)
		//console.log(raw)
		raw.forEach(function(m){
			for(var i =0;i<rows.length;i++){
				if(rows[i].td1==m.td1){
					rows[i].td2=m.td2
					break;
				}
			}
			t.render(rows)
		})
	})
	
})
document.getElementById('saveNPV').addEventListener('click',function(e){
	//console.log(t.data.rows)
	webMI.data.write('AGENT.OBJECTS.Depth_day_data.NPV',JSON.stringify(t.data.rows))
})
document.getElementById('closeNPV').addEventListener('click',function(e){
	webMI.display.openDisplay('AGENT.DISPLAYS.NewView.GGD_page',webMI.query,'main_frame');
})


]]></script>
</svg>
