<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<svg xmlns:atv="http://webmi.atvise.com/2007/svgext" width="160" version="1.2" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://www.w3.org/2000/svg" height="30">
 <defs/>
 <desc>Optional start / end time buttons for the chart.</desc>
 <title>Start / end time buttons</title>
 <metadata>
  <atv:parameter valuetype="string" name="chartname" behavior="mandatory" desc="chart name" defaultvalue="dpt"/>
  <atv:parameter valuetype="string" name="xAxisIndex" behavior="optional" desc="x-axis index" defaultvalue="0"/>
  <atv:parameter substitute="$FONTCOLOR$" valuetype="global" name="fontColor" behavior="optional" desc="font color" defaultvalue="SYSTEM.GLOBALS.atvFontColor"/>
  <atv:gridconfig gridstyle="lines" width="20" enabled="false" height="20"/>
  <atv:snapconfig width="10" enabled="false" height="10"/>
 </metadata>
 <!--<svg width="160" atv:refpy="1161.926" atv:refpx="242.971" x="0" xlink:href="SYSTEM.LIBRARY.ATVISE.OBJECTDISPLAYS.Advanced.picker_date" id="dp_start" height="30" y="0">-->
 <svg atv:refpx="80" width="160" y="0" id="dp_start" atv:refpy="15" xlink:href="SYSTEM.LIBRARY.PROJECT.OBJECTDISPLAYS.GtiCharts.NewView.tool.picker_date_my" x="0" height="30">
  <atv:argument value="dpt" name="name"/>
 </svg>
 <script type="text/ecmascript"><![CDATA[//var chartname = webMI.query["chartname"];
var activeAxis = webMI.query["xAxisIndex"];
//var chart;
var updatedUserMin, updatedUserMax, updatedMin, updatedMax;

function checkChart() {
//	chart = webMI.trendFactory.getTrendByName(chartname);
//	if (!chart) {
//		setTimeout(function() {checkChart()}, 100);
//		return;
//	}

	var allcharts = webMI.trendFactory.getAllTrends();
	if(allcharts.length == 0){
		setTimeout(function() {checkChart()}, 500);
	}	
	
	allcharts.forEach(function(chart, i, arr) {
		var chartname = "dpt";//chart.name;
		var extremes = chart.chart.xAxis[activeAxis].getExtremes();
		if (isNaN(extremes.min)) {
			setTimeout(function() {checkChart()}, 100);
			return;
		}
	
		updatedMin = true;
		updatedMax = true;
		var extremes = chart.chart.xAxis[activeAxis].getExtremes();
		webMI.trigger.fire("com.atvise.datepicker_" + chartname, extremes.min);
//		webMI.trigger.fire("com.atvise.datepicker_starttime" + chartname, extremes.min);
//		webMI.trigger.fire("com.rigin.datepicker", extremes.min);
		//webMI.trigger.fire("com.atvise.datepicker_endtime" + chartname, extremes.max);
	
		var chartUpdate = chart.control.registerOnUpdatedCallback(updateDatePicker);
	
		var lockUpdateDatePicker = false;
		function updateDatePicker() {
			console.log("function updateDatePicker");
			var extremes = chart.chart.xAxis[activeAxis].getExtremes();
			if (isNaN(extremes.min) && !lockUpdateDatePicker) {
				lockUpdateDatePicker = true;
				updatePickerID = setTimeout(function() {
						updateDatePicker();
						lockUpdateDatePicker = false;
					}, 100);
				return;
			} else if(!lockUpdateDatePicker)  {
				if (updatedUserMin) {
					updatedUserMin = false;
					return;
				} else {
					updatedMin = true;
					webMI.trigger.fire("com.atvise.datepicker_" + chartname, extremes.min);
//					webMI.trigger.fire("com.atvise.datepicker_starttime" + chartname, extremes.min);
//					webMI.trigger.fire("com.rigin.datepicker", extremes.min);
				}
/*	
				if (updatedUserMax) {
					updatedUserMax = false;
					return;
				} else {
					updatedMax = true;
					webMI.trigger.fire("com.atvise.datepicker_endtime" + chartname, extremes.max);
				}
*/				
			}
		}
		webMI.addOnunload(function() {
			if (chart && chart.control) chart.control.unregisterOnUpdatedCallback(chartUpdate);
		});
		
	});
}

webMI.addOnload(function() {
	checkChart();
});

webMI.trigger.connect("datapicker_clicked", function(e) {
//	if (!chart || e.value < 1)
	if (e.value < 1)
		return;

	console.log("datapicker_clicked");
	webMI.trigger.fire("stopCharts",'');
/*	
	var allcharts = webMI.trendFactory.getAllTrends();
	allcharts.forEach(function(chart, i, arr) {
//		if (item.control.isLiveModeRunning()) item.control.stopLiveMode();
		chart.control.stopLiveMode();
		//var oldMode = item.chart.options.atviseOptions.mode;
		chart.control.setMode("history");
//			chart.control.updated(function() {
//			chart.control.setMode(oldMode);
//		});
		chart.control.updated(function(){
			console.log("dp_start updated");
		});
	});
*/		
}, "dp_start");


webMI.trigger.connect("valuechanged", function(e) {
//	console.log("dp_start: valuechanged");
//	if (!chart || e.value < 1)
	if (e.value < 1)
		return;
		
	
	if (updatedMin) {
		updatedMin = false;
		return;
	}

	updatedUserMin = true;

	starttime = e.value;
	
	var allcharts = webMI.trendFactory.getAllTrends();
	allcharts.forEach(function(chart, i, arr) {
		var extremes = chart.chart.xAxis[activeAxis].getExtremes();
	
		var diff = 	extremes.max - extremes.min;
		
		chart.chart.xAxis[activeAxis].setExtremes(e.value, e.value+diff);
		chart.chart.xAxis[activeAxis].options.min = e.value;
		chart.chart.xAxis[activeAxis].options.max = e.value+diff;
	
	
		chart.control.updated();
	});
	
/*	if (chart.control.isLiveModeRunning()) chart.control.stopLiveMode();
	var oldMode = chart.chart.options.atviseOptions.mode;
	chart.control.setMode("history");
	chart.control.updated(function() {
		chart.control.setMode(oldMode);
	});
*/	
}, "dp_start");

/*
webMI.trigger.connect("valuechanged", function(e) {
	if (!chart || e.value < 1)
		return;

	if (updatedMax) {
		updatedMax = false;
		return;
	}

	updatedUserMax = true;

	endtime = e.value;
	var extremes = chart.chart.xAxis[activeAxis].getExtremes();
	chart.chart.xAxis[activeAxis].setExtremes(extremes.min, e.value);
	chart.chart.xAxis[activeAxis].options.min = extremes.min; 
	chart.chart.xAxis[activeAxis].options.max = e.value;

	if (chart.control.isLiveModeRunning()) chart.control.stopLiveMode();
	var oldMode = chart.chart.options.atviseOptions.mode;
	chart.control.setMode("history");
	chart.control.updated(function() {
		chart.control.setMode(oldMode);
	});
}, "dp_end");
*/
]]></script>
</svg>
