<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<svg xmlns:atv="http://webmi.atvise.com/2007/svgext" width="320" version="1.2" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://www.w3.org/2000/svg" height="30">
 <defs/>
 <desc>Optional start / end time buttons for the chart.</desc>
 <title>Start / end time buttons</title>
 <metadata>
  <atv:parameter valuetype="string" behavior="mandatory" name="chartname" desc="chart name" defaultvalue="trend1"/>
  <atv:parameter valuetype="string" behavior="optional" name="xAxisIndex" desc="x-axis index" defaultvalue="0"/>
  <atv:parameter substitute="$FONTCOLOR$" valuetype="global" behavior="optional" name="fontColor" desc="font color" defaultvalue="SYSTEM.GLOBALS.atvFontColor"/>
  <atv:gridconfig gridstyle="lines" width="20" enabled="false" height="20"/>
  <atv:snapconfig width="10" enabled="false" height="10"/>
 </metadata>
 <svg atv:refpx="242.971" width="160" y="0" id="dp_start" atv:refpy="1161.926" xlink:href="SYSTEM.LIBRARY.ATVISE.OBJECTDISPLAYS.Advanced.picker_date" x="0" height="30">
  <atv:argument name="base"/>
  <atv:argument value="starttime" name="name" postfix="chartname"/>
 </svg>
 <svg atv:refpx="631.971" width="160" y="0" id="dp_end" atv:refpy="1161.926" xlink:href="SYSTEM.LIBRARY.ATVISE.OBJECTDISPLAYS.Advanced.picker_date" x="160" height="30">
  <atv:argument name="base"/>
  <atv:argument value="endtime" name="name" postfix="chartname"/>
 </svg>
 <script type="text/ecmascript"><![CDATA[var chartname = webMI.query["chartname"];
var activeAxis = webMI.query["xAxisIndex"];
var chart, updatedUserMin, updatedUserMax, updatedMin, updatedMax;

function checkChart() {
	chart = webMI.trendFactory.getTrendByName(chartname);
	if (!chart) {
		setTimeout(function() {checkChart()}, 100);
		return;
	}

	var extremes = chart.chart.xAxis[activeAxis].getExtremes();
	if (isNaN(extremes.min)) {
		setTimeout(function() {checkChart()}, 100);
		return;
	}

	updatedMin = true;
	updatedMax = true;
	var extremes = chart.chart.xAxis[activeAxis].getExtremes();
	webMI.trigger.fire("com.atvise.datepicker_starttime" + chartname, extremes.min);
	webMI.trigger.fire("com.atvise.datepicker_endtime" + chartname, extremes.max);

	var chartUpdate = chart.control.registerOnUpdatedCallback(updateDatePicker);

	var lockUpdateDatePicker = false;
	function updateDatePicker() {
		var extremes = chart.chart.xAxis[activeAxis].getExtremes();
		if (isNaN(extremes.min) && !lockUpdateDatePicker) {
			lockUpdateDatePicker = true;
			updatePickerID = setTimeout(function() {
					updateDatePicker();
					lockUpdateDatePicker = false;
				}, 100);
			return;
		} else if(!lockUpdateDatePicker)  {
			if (updatedUserMin) {
				updatedUserMin = false;
				return;
			} else {
				updatedMin = true;
				webMI.trigger.fire("com.atvise.datepicker_starttime" + chartname, extremes.min);
			}

			if (updatedUserMax) {
				updatedUserMax = false;
				return;
			} else {
				updatedMax = true;
				webMI.trigger.fire("com.atvise.datepicker_endtime" + chartname, extremes.max);
			}
		}
	}

	webMI.addOnunload(function() {
		if (chart && chart.control) chart.control.unregisterOnUpdatedCallback(chartUpdate);
	});
}

webMI.addOnload(function() {
	checkChart();
});

webMI.trigger.connect("valuechanged", function(e) {
	if (!chart || e.value < 1)
		return;

	if (updatedMin) {
		updatedMin = false;
		return;
	}

	updatedUserMin = true;

	starttime = e.value;
	var extremes = chart.chart.xAxis[activeAxis].getExtremes();
	chart.chart.xAxis[activeAxis].setExtremes(e.value, extremes.max);
	chart.chart.xAxis[activeAxis].options.min = e.value;
	chart.chart.xAxis[activeAxis].options.max = extremes.max;

	if (chart.control.isLiveModeRunning()) chart.control.stopLiveMode();
	var oldMode = chart.chart.options.atviseOptions.mode;
	chart.control.setMode("history");
	chart.control.updated(function() {
		chart.control.setMode(oldMode);
	});
}, "dp_start");

webMI.trigger.connect("valuechanged", function(e) {
	if (!chart || e.value < 1)
		return;

	if (updatedMax) {
		updatedMax = false;
		return;
	}

	updatedUserMax = true;

	endtime = e.value;
	var extremes = chart.chart.xAxis[activeAxis].getExtremes();
	chart.chart.xAxis[activeAxis].setExtremes(extremes.min, e.value);
	chart.chart.xAxis[activeAxis].options.min = extremes.min; 
	chart.chart.xAxis[activeAxis].options.max = e.value;

	if (chart.control.isLiveModeRunning()) chart.control.stopLiveMode();
	var oldMode = chart.chart.options.atviseOptions.mode;
	chart.control.setMode("history");
	chart.control.updated(function() {
		chart.control.setMode(oldMode);
	});
}, "dp_end");]]></script>
</svg>
