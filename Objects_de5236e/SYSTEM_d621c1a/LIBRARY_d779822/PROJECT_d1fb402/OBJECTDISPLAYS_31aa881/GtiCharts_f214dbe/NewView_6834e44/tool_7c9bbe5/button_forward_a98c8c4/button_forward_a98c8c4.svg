<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<svg width="80" version="1.2" xmlns:atv="http://webmi.atvise.com/2007/svgext" xmlns="http://www.w3.org/2000/svg" height="30" xmlns:xlink="http://www.w3.org/1999/xlink">
 <defs/>
 <desc>Steps forward on the x-axis</desc>
 <title>Button forward</title>
 <metadata>
  <atv:parameter name="chartname" behavior="mandatory" desc="chart name" defaultvalue="trend1" valuetype="string"/>
  <atv:parameter name="xAxisIndex" behavior="optional" desc="x-axis index" defaultvalue="0" valuetype="string"/>
  <atv:parameter name="stepPercent" behavior="optional" desc="step in percent" defaultvalue="100" valuetype="string"/>
  <atv:gridconfig width="20" enabled="false" gridstyle="lines" height="20"/>
  <atv:snapconfig width="10" enabled="false" height="10"/>
 </metadata>
 <svg y="0" id="btn_forward" visibility="$BUTTONSVISIBLE$" width="80" atv:bindtl="1,1" atv:refpy="15" atv:refpx="40" height="30" x="0" atv:bindbr="1,1" xlink:href="SYSTEM.LIBRARY.ATVISE.OBJECTDISPLAYS.Advanced.button">
  <atv:argument name="label" value=""/>
  <atv:argument name="visibilityLabel" value="hidden"/>
  <atv:argument name="visibilitySymbol" value="inherit"/>
  <atv:argument name="symbol" value="SYSTEM.LIBRARY.ATVISE.OBJECTDISPLAYS.Symbols.20x20.forward"/>
 </svg>
 <script type="text/ecmascript"><![CDATA[//var chartname = webMI.query.chartname;
//var chart;
var activeAxis = webMI.query["xAxisIndex"];

webMI.trigger.connect("clicked", function(e) {

//	var chart = webMI.trendFactory.getTrendByName(chartname);
//	if (!chart)
//		return;

	webMI.trigger.fire("stopCharts",'');
/*	
	var allcharts = webMI.trendFactory.getAllTrends();
	allcharts.forEach(function(chart, i, arr) {
//		if (item.control.isLiveModeRunning()) item.control.stopLiveMode();
		chart.control.stopLiveMode();
		//var oldMode = item.chart.options.atviseOptions.mode;
		chart.control.setMode("history");
//			chart.control.updated(function() {
//			chart.control.setMode(oldMode);
//		});

	});
*/	
	setTimeout(function() {
		var allcharts = webMI.trendFactory.getAllTrends();
		allcharts.forEach(function(chart, i, arr) {
			var extremes = chart.chart.xAxis[activeAxis].getExtremes();
			var difference = (extremes.max - extremes.min);// * webMI.query["stepPercent"] / 100;
			chart.chart.xAxis[activeAxis].setExtremes(extremes.min + difference, extremes.max + difference);
			chart.chart.xAxis[activeAxis].options.min = extremes.min + difference;
			chart.chart.xAxis[activeAxis].options.max = extremes.max + difference;
			chart.control.updated();
	
		});	
	} ,100);
/*	
	var extremes = chart.chart.xAxis[activeAxis].getExtremes();
	var difference = (extremes.max - extremes.min);// * webMI.query["stepPercent"] / 100;
	chart.chart.xAxis[activeAxis].setExtremes(extremes.min + difference, extremes.max + difference);
	chart.chart.xAxis[activeAxis].options.min = extremes.min + difference;
	chart.chart.xAxis[activeAxis].options.max = extremes.max + difference;
*/
	//chart.control.stopLiveMode();
	
//	chart.control.updated();
/*	
	if (chart.control.isLiveModeRunning()) chart.control.stopLiveMode();
	var oldMode = chart.chart.options.atviseOptions.mode;
	chart.control.setMode("history");
	chart.control.updated(function() {
		chart.control.setMode(oldMode);
	});
*/
//	chart.control.updated(function(){
//		console.log("btn_forward updated")
//	});
}, "btn_forward");

/*
var chartname = webMI.query.chartname;
var chart;
var activeAxis = webMI.query["xAxisIndex"];

webMI.trigger.connect("clicked", function(e) {

	var chart = webMI.trendFactory.getTrendByName(chartname);
	if (!chart)
		return;

	var extremes = chart.chart.xAxis[activeAxis].getExtremes();
	var difference = (extremes.max - extremes.min) * webMI.query["stepPercent"] / 100;
	chart.chart.xAxis[activeAxis].setExtremes(extremes.min + difference, extremes.max + difference);
	chart.chart.xAxis[activeAxis].options.min = extremes.min + difference;
	chart.chart.xAxis[activeAxis].options.max = extremes.max + difference;

	if (chart.control.isLiveModeRunning()) chart.control.stopLiveMode();
	var oldMode = chart.chart.options.atviseOptions.mode;
	chart.control.setMode("history");
	chart.control.updated(function() {
		chart.control.setMode(oldMode);
	});
}, "btn_forward");
*/
]]></script>
</svg>
