<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<svg height="1000" version="1.2" width="1000" xmlns="http://www.w3.org/2000/svg" xmlns:atv="http://webmi.atvise.com/2007/svgext" xmlns:xlink="http://www.w3.org/1999/xlink">
 <defs/>
 <metadata>
  <atv:parameter behavior="mandatory" defaultvalue="" group="Scale" name="width" valuetype="number"/>
  <atv:parameter behavior="mandatory" defaultvalue="" group="Scale" name="height" valuetype="number"/>
  <atv:parameter behavior="optional" defaultvalue="" group="Fact" name="FactChartData" valuetype="address"/>
  <atv:parameter behavior="optional" defaultvalue="" group="Plan" name="PlanChartData" valuetype="address"/>
  <atv:parameter behavior="optional" defaultvalue="" group="Complications" name="comp_delta" valuetype="address"/>
  <atv:parameter behavior="optional" defaultvalue="" group="Complications" name="comp_depth" valuetype="address"/>
  <atv:parameter behavior="optional" defaultvalue="" group="Complications" name="comp_east" valuetype="address"/>
  <atv:parameter behavior="optional" defaultvalue="" group="Complications" name="comp_north" valuetype="address"/>
  <atv:parameter behavior="optional" defaultvalue="" group="Complications" name="comp_timestamp" valuetype="address"/>
  <atv:parameter behavior="optional" defaultvalue="" group="Complications" name="comp_well_depth" valuetype="address"/>
  <atv:gridconfig enabled="false" gridstyle="lines" height="20" width="20"/>
  <atv:snapconfig enabled="false" height="10" width="10"/>
 </metadata>
 <foreignObject atv:refpx="0" atv:refpy="0" height="1000" id="WELL_CHART" width="1000" x="0" y="0"/>
 <script atv:desc="" atv:name="" type="text/ecmascript"><![CDATA[var CHART;
var topWindow;
var metaData = [];

var BG_COLOR = "#222";
var MAIN_TEXT_COLOR = "#fff";
var AXIES_TITLE_COLOR = "#fff";
var AXIES_TICK_COLOR = "grey";

var traces = {
  complications: {
    x: [],
    y: [],
    z: [],
    well_depth: [],
    delta: [2.8, 4.5],
    timestamp: [],
    weight: [],
    colors:[]
  },
};

webMI.addOnload(function (e) {
  var need_array = [webMI.query["comp_delta"],webMI.query["comp_depth"],webMI.query["comp_east"],webMI.query["comp_north"],webMI.query["comp_timestamp"],webMI.query["comp_well_depth"]]
  webMI.data.read(need_array,function(e){
  //console.log(JSON.parse(e[3].value))
  traces.complications.x = [462.82,451.77];
  traces.complications.y = [520.77,526.33];
  traces.complications.z = [2481,2482];
  traces.complications.well_depth =[3292,3303];
  traces.complications.timestamp = ['20.07.2021 / 14:37','20.07.2021 / 22:37'];
  traces.complications.delta = ['15','22'];
  for(var i=0;i<traces.complications.x.length;i++){
	traces.complications.colors.push("orange")	  
  }
  console.log(traces.complications)
  	  
  
  var params = webMI.query;
  return (function () {
    topWindow = parent;
    if (topWindow.Plotly == undefined) {
      webMI.data.loadScript("/Plotly/plotly-latest.min.js", function (url, alreadyLoaded) {
        initChart();
      });
    } else {
      initChart();
    }

    function initChart() {
      webMI.gfx.setScaledEvents("WELL_CHART", true);
      CHART = document.getElementById("WELL_CHART");
      setTimeout(function () {
        for (var i = 0; i < traces.complications.well_depth.length; ++i) {
          metaData.push([
            traces.complications.well_depth[i],
            ((traces.complications.well_depth[i] * 35) / 1000).toFixed(1),
            traces.complications.delta[i],
            traces.complications.timestamp[i],
          ]);
        }
        var LAYOUT = {
          // CHART_LAYOUT
          hoverlabel: { font: { color: "#FFF" } },
          legend: {
            x: 1,
            xanchor: "right",
            y: 1,
            bgcolor: BG_COLOR,
            font: {
              color: MAIN_TEXT_COLOR,
            },
          },
          showlegend:true,
          scene: {
            camera: {
              center: {
                x: 0,
                y: 0,
                z: 0,
              },
              eye: {
                x: 2,
                y: 2,
                z: 1,
              },
              up: {
                x: 0,
                y: 0,
                z: 1,
              },
            },
            bgcolor: BG_COLOR,
            xaxis: {
              title: {
                text: "Север, м",
                font: {
                  color: AXIES_TITLE_COLOR,
                },
              },

              tickfont: {
                color: AXIES_TICK_COLOR,
                size: 11,
              },
            },

            yaxis: {
              title: {
                text: "Восток, м",
                font: {
                  color: AXIES_TITLE_COLOR,
                },
              },
              tickfont: {
                color: AXIES_TICK_COLOR,
                size: 11,
              },
            },
            zaxis: {
              title: {
                text: "Глубина по вертикали, м",
                font: {
                  color: AXIES_TITLE_COLOR,
                },
              },
              tickfont: {
                color: AXIES_TICK_COLOR,
              },
              autorange: "reversed",
            },
          },
          autosize: false,
          width: +params["width"],
          height: +params["height"],
          margin: {
            l: 0,
            r: 0,
            b: 0,
            t: 0,
          },
        };
        topWindow.Plotly.react(
          CHART,
          [
            {
              type: "scatter3d",
              mode: "lines",
              name: "preload",
              showlegend: true,
              x: [0],
              y: [0],
              z: [0],
            },
            {
              // TEXT_TRACE
              type: "scatter3d",
              mode: "markers+text",
              name: "Осложнение",
              showlegend: false,
              meta: metaData,
              texttemplate: "Затяжка",
              hovertemplate:
                "ОСЛОЖНЕНИЕ<br>Тип: Затяжка<br>Глубина скважины: %{meta[0]} м<br>Вес: %{meta[1]} т<br>Дельта: %{meta[2]} т<br>Дата и время: %{meta[3]}<extra></extra>",
              textfont: {
                color: MAIN_TEXT_COLOR,
                size: 12,
              },
              marker: {
                color: traces.complications.colors,
                symbol: "circle",
                size: 6,
                opacity: 1,
              },
              x: traces.complications.x,
              y: traces.complications.y,
              z: traces.complications.z,
            },
          ],
          LAYOUT,
          {
            // CONFIG
            displaylogo: false,
            displayModeBar: false,
          }
        ).then(function () {
          var factTrace = {
            type: "scatter3d",
            mode: "lines",
            name: "ФАКТ",
            hovertemplate:
              "Глубина по вертикали:%{z} м<br>Север:%{x} м<br>Восток:%{y} м<extra></extra>",
            line: {
              color: "#FF0000",
              width: 6,
              opacity: 1,
            },
          };

          var planTrace = {
            type: "scatter3d",
            mode: "lines",
            name: "ПЛАН",
            hovertemplate:
              "Глубина по вертикали:%{z} м<br>Север:%{x} м<br>Восток:%{y} м<extra></extra>",
            line: {
              color: "#1f77b4",
              width: 6,
              opacity: 1,
            },
          };

          function addTraceFromPaths(pathToData, traceObj) {
            var values_x, values_y, values_z;
            webMI.data.read(pathToData,function(e){
            try{
             var raw_data=JSON.parse(e.value)
             values_x=raw_data.north;
             values_y=raw_data.east;
             values_z=raw_data.depth;
            
                  var trace = Object.assign(
                    {
                      x: values_x,
                      y: values_y,
                      z: values_z,
                    },
                    traceObj
                  );

                  topWindow.Plotly.addTraces(CHART, trace);
               }
               catch(err) { console.log("no data",err)}
           })
          }
          
          
          
          
		  //function changeTraces	          
          
          console.log(params["FactChartData"])
            addTraceFromPaths(
              params["FactChartData"],
              factTrace
            );
            addTraceFromPaths(
              params["PlanChartData"],
              planTrace
            );
        });
      }, 200);
    }
CHART.on('plotly_click',function(data)
          {
			if(data.points[0].curveNumber==1)
				console.log(document.getElementById("WELL_CHART"))
				var pn=data.points[0].pointNumber
				var tn=1
				var colors=traces.complications.colors;
				colors[pn]="yellow"
				setTimeout(function(){var update = {'marker':{color: colors, size:16}};},1000)
				topWindow.Plotly.restyle(CHART, update,[tn]);
			//topWindow.Plotly.restyle(CHART,update)
			webMI.trigger.fire("giveDataToTable", data)
          })
  })();
})});


]]></script>
</svg>
