<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<svg xmlns="http://www.w3.org/2000/svg" height="31" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.2" xmlns:atv="http://webmi.atvise.com/2007/svgext" width="100">
 <defs>
  <linearGradient x1="1" gradientUnits="objectBoundingBox" y2="1" x2="1" y1="-0.0183441" id="linear_21">
   <stop stop-color="#494949" offset="0"/>
   <stop stop-color="#000000" offset="1"/>
  </linearGradient>
  <linearGradient x1="0.223168" gradientUnits="objectBoundingBox" y2="0.149253" x2="0.223168" y1="1" id="linear_6">
   <stop stop-color="#494949" offset="0"/>
   <stop stop-color="#000000" offset="1"/>
  </linearGradient>
  <linearGradient x1="1" gradientUnits="objectBoundingBox" y2="1" x2="1" y1="-0.0183441" id="linear_11">
   <stop stop-color="#494949" offset="0"/>
   <stop stop-color="#000000" offset="1"/>
  </linearGradient>
  <linearGradient x1="0" gradientUnits="objectBoundingBox" y2="1" x2="1" y1="0" id="linear_0">
   <stop stop-color="#d0d0d0" offset="0"/>
   <stop stop-opacity="0" stop-color="#d0d0d0" offset="1"/>
  </linearGradient>
  <linearGradient x1="1" gradientUnits="objectBoundingBox" y2="1" x2="1" y1="-0.0183441" id="linear_14">
   <stop stop-opacity="0.2745098039215687" stop-color="#ffffff" offset="0"/>
   <stop stop-opacity="0" stop-color="#ffffff" offset="0.5515695067264574"/>
  </linearGradient>
 </defs>
 <desc>Selects items from a dropdown listbox.</desc>
 <title>Combobox</title>
 <metadata>
  <atv:parameter name="base" desc="base" valuetype="address" behavior="mandatory"/>
  <atv:parameter config="Text;Boolean;Enum List;Script" name="mode" defaultvalue="Text" desc="mode" valuetype="enum" behavior="optional"/>
  <atv:parameter name="outputNode" desc="alternative output address" valuetype="address" behavior="optional"/>
  <atv:parameter group="Text Mode" name="text1" desc="text element 1" valuetype="trstring" behavior="optional"/>
  <atv:parameter group="Text Mode" name="text1value" desc="value element 1" valuetype="string" behavior="optional"/>
  <atv:parameter group="Text Mode" name="text2" desc="text element 2" valuetype="trstring" behavior="optional"/>
  <atv:parameter group="Text Mode" name="text2value" desc="value element 2" valuetype="string" behavior="optional"/>
  <atv:parameter group="Text Mode" name="text3" desc="text element 3" valuetype="trstring" behavior="optional"/>
  <atv:parameter group="Text Mode" name="text3value" desc="value element 3" valuetype="string" behavior="optional"/>
  <atv:parameter group="Text Mode" name="text4" desc="text element 4" valuetype="trstring" behavior="optional"/>
  <atv:parameter group="Text Mode" name="text4value" desc="value element 4" valuetype="string" behavior="optional"/>
  <atv:parameter group="Text Mode" name="text5" desc="text element 5" valuetype="trstring" behavior="optional"/>
  <atv:parameter group="Text Mode" name="text5value" desc="value element 5" valuetype="string" behavior="optional"/>
  <atv:parameter group="Enum List Mode" name="enumList" desc="enum list" valuetype="global" behavior="optional"/>
  <atv:parameter config="Times New Roman=Times New Roman,Bodoni,Garamond,Minion Web,ITC Stone Serif,MS Georgia,Bitstream Cyberbit,serif;Arial=MS Trebuchet,ITC Avant Garde Gothic,MS Arial,MS Verdana,Univers,Futura,ITC Stone Sans,Gill Sans,Akzidenz Grotesk,Helvetica,sans-serif;Courier=Courier,MS Courier New,Prestige,Everson Mono,monospace;Zapf-Chancery=Caflisch Script,Adobe Poetica,Sanvito,Ex Ponto,Snell Roundhand,Zapf-Chancery,cursive;Alpha Geometrique=Alpha Geometrique,Critter,Cottonwood,FB Reactor,Studz,fantasy" substitute="$FONTFAMILY$" group="Font" name="fontFamily" defaultvalue="Arial" desc="family" valuetype="enum" behavior="optional"/>
  <atv:parameter config="6;7;8;9;10;11;12;14;16;18;20;22;24;26;28;36;48;72" substitute="$FONTSIZE$" group="Font" name="fontSize" defaultvalue="16" desc="size" valuetype="enum" behavior="optional"/>
  <atv:parameter substitute="$FONTCOLOR$" group="Font" name="fontColor" defaultvalue="#ffffff" desc="color" valuetype="color" behavior="optional"/>
  <atv:parameter substitute="$FILL$" group="Appearance" name="fill" defaultvalue="#3f434a" desc="fill color" valuetype="color" behavior="optional"/>
  <atv:parameter group="Appearance" name="fillColorInactive" defaultvalue="#8c8c8c" desc="fill color when inactive" valuetype="color" behavior="optional"/>
  <atv:parameter substitute="$SYMBOLCOLOR$" group="Appearance" name="symbolColor" defaultvalue="#E3D700" desc="symbol fill" valuetype="color" behavior="optional"/>
  <atv:parameter group="Appearance" name="focusStrokeColor" defaultvalue="#FFFFFF" desc="focus stroke color" valuetype="color" behavior="optional"/>
  <atv:parameter config="SYSTEM.SECURITY.RIGHTS" group="Security" name="right" desc="necessary right" valuetype="address" behavior="optional"/>
  <atv:parameter group="Security" name="activeNode" desc="activation address" valuetype="address" behavior="optional"/>
  <atv:parameter group="Security" name="activeValue" desc="activation value" valuetype="string" behavior="optional"/>
  <atv:parameter group="Options" name="itemsCount" defaultvalue="0" desc="maximum displayed items (0 = all)" valuetype="number" behavior="optional"/>
  <atv:parameter group="Options" name="consistencyGroup" desc="consistency group" valuetype="string" behavior="optional"/>
  <atv:parameter group="Options" name="tabIndex" desc="tab index" valuetype="number" behavior="optional"/>
  <atv:parameter group="Options" name="tooltip" desc="tooltip" valuetype="trstring" behavior="optional"/>
  <atv:gridconfig height="20" gridstyle="lines" width="20" enabled="true"/>
  <atv:snapconfig height="10" width="10" enabled="false"/>
 </metadata>
 <rect rx="4" y="0" atv:refpy="16.551" height="31" fill="$FILL$" atv:bindtl="0,0" stroke="#646464" x="0" stroke-width="0" width="100" id="combobox_stroke" atv:refpx="50.314" ry="4" atv:bindbr="1,1"/>
 <text text-anchor="start" y="21.5" atv:refpy="0.5" fill="$FONTCOLOR$" atv:bindtl="0,1" x="9" font-family="$FONTFAMILY$" id="combobox_label" atv:refpx="5" font-size="$FONTSIZE$" atv:bindbr="0,1">T{Combobox}</text>
 <polyline atv:refpy="17.525" fill="$SYMBOLCOLOR$" atv:bindtl="1,1" stroke="none" stroke-width="0" points="92.5,14 78.5,14 85.5,21 92.5,14" id="id_0" atv:refpx="92.475" atv:bindbr="1,1"/>
 <svg y="0" atv:refpy="15.5" height="31" xlink:href="SYSTEM.LIBRARY.PROJECT.OBJECTDISPLAYS.FlatComponents.Clickarea" atv:bindtl="0,0" x="0" width="100" id="combobox_clickarea" atv:refpx="50" atv:bindbr="1,1">
  <atv:argument name="tabIndex" prefix="tabIndex"/>
 </svg>
 <script type="text/ecmascript"><![CDATA[var base = (webMI.query["base"] == undefined) ? "" : webMI.query["base"];
var outputNode = (webMI.query["outputNode"] == undefined) ? "" : webMI.query["outputNode"];
outputNode = (outputNode == "") ? base : outputNode;
webMI.gfx.setText("combobox_label", "");
var fontSize = parseFloat(webMI.query["fontSize"]);
var fontFamily = webMI.query["fontFamily"];
var fontColor = webMI.query["fontColor"];
var fill = webMI.query["fill"];
var fillColorInactive = webMI.query["fillColorInactive"];
var buttonFill = webMI.query["buttonFill"];
var focusStrokeColor = webMI.query["focusStrokeColor"];
var itemsCount = webMI.query["itemsCount"];
var consistencyGroup = webMI.query["consistencyGroup"];
var tabHandler = webMI.callExtension("SYSTEM.LIBRARY.ATVISE.QUICKDYNAMICS.Tab Handler");
var tabIndex = (webMI.query["tabIndex"] == undefined) ? "" : webMI.query["tabIndex"];
var tooltip = (webMI.query["tooltip"] == undefined) ? "" : webMI.query["tooltip"];

if (consistencyGroup)
    var consistencyHandler = webMI.callExtension("SYSTEM.LIBRARY.ATVISE.QUICKDYNAMICS.Consistency Handler");

var text1 = webMI.query["text1"];
var text1value = webMI.query["text1value"] == undefined ? "" : webMI.query["text1value"];
var text2 = webMI.query["text2"];
var text2value = webMI.query["text2value"] == undefined ? "" : webMI.query["text2value"];
var text3 = webMI.query["text3"];
var text3value = webMI.query["text3value"] == undefined ? "" : webMI.query["text3value"];
var text4 = webMI.query["text4"];
var text4value = webMI.query["text4value"] == undefined ? "" : webMI.query["text4value"];
var text5 = webMI.query["text5"];
var text5value = webMI.query["text5value"] == undefined ? "" : webMI.query["text5value"];
var enumList = (webMI.query["enumList"] == undefined) ? "" : webMI.query["enumList"];
var right = (webMI.query["right"] == undefined) ? "" : webMI.query["right"];
if (right.search(/SYSTEM\.SECURITY\.RIGHTS\./) != -1) {
    right = right.substring(23, right.length); //remove "prefix" SYSTEM.SECURITY.RIGHTS.
}

var active = false;
var hasRight = false;
var currentValue = null;

if (right != "") {
    webMI.addEvent(webMI.data, "clientvariableschange", function(e) {
        hasRight = false;
        if (("username" in e) && (e.username != "")) {
            hasRight = webMI.hasRight(right);
        }
        deActivate();
    });
}

var activeValue = (webMI.query["activeValue"] == undefined) ? "" : webMI.query["activeValue"];
var activeNode = (webMI.query["activeNode"] == undefined) ? "" : webMI.query["activeNode"];
var nodeIsActive = false;

if ((activeNode != "") && (String(activeValue) != "")) {
    webMI.data.subscribe(activeNode, function(e) {
        var nodeActiveValue = e.value;
        if (typeof nodeActiveValue == "boolean") {
            nodeIsActive = (String(nodeActiveValue) == activeValue);
        } else if (typeof nodeActiveValue == "number") {
            try {
                var temp = parseFloat(activeValue);
                nodeIsActive = (nodeActiveValue == temp);
            } catch (e) {
                nodeIsActive = false;
            }
        } else {
            nodeIsActive = (nodeActiveValue == activeValue);
        }
        deActivate();
    });
} else {
    deActivate();
}

function deActivate(force) {
    if (force) active = false;
    else if (right != "") {
        if ((String(activeValue) != "") && (activeNode != "")) {
            active = (nodeIsActive && hasRight);
        } else {
            active = hasRight;
        }
    } else {
        if ((String(activeValue) != "") && (activeNode != "")) {
            active = nodeIsActive;
        } else {
            active = true;
        }
    }
    if (active) {
        webMI.gfx.setFill("combobox_stroke", fill);
    } else {
        webMI.gfx.setFill("combobox_stroke", fillColorInactive);
    }
}

var mode = webMI.query["mode"];

function update(item) {
    if (item == "") {
        getFn("", "", null)(true);
        return;
    }
    for (var i in menuObj) {
        if (item == menuObj[i]["text"]) {
            menuObj[i]["value"](1);
            break;
        }
    }
}

if (base != "") {
    if (consistencyGroup) {
        consistencyHandler.register(consistencyGroup, base, update);
    } else {
        webMI.data.subscribe(base, function(e) {
            currentValue = e.value;

            if (mode == "Text") {
                var texts = [text1, text2, text3, text4, text5];
                var textvals = [text1value, text2value, text3value, text4value, text5value];
                webMI.gfx.setText("combobox_label", "");
                for (var i = 0; i < 5; i++) {
                    if (texts[i] != undefined && textvals[i] != undefined && currentValue == textvals[i]) {
                        webMI.gfx.setText("combobox_label", texts[i]);
                    }
                }
            } else if (mode == "Boolean") {
                if (currentValue == 0) {
                    webMI.gfx.setText("combobox_label", "false");
                } else {
                    webMI.gfx.setText("combobox_label", "true");
                }
            } else if (mode == "Enum List" && enumList != "") {
                webMI.gfx.setText("combobox_label", "");
                for (var i in enumList) {
                    if (enumList[i].text != undefined && enumList[i].value != undefined && currentValue == enumList[i].value) {
                        webMI.gfx.setText("combobox_label", enumList[i].text);
                    }
                }
            } else if (mode == "Script") {
                webMI.gfx.setText("combobox_label", "");
                for (var i in menuObj) {
                    if (currentValue == menuObj[i]["originalValue"]) {
                        return webMI.gfx.setText("combobox_label", menuObj[i]["text"]);
                    }
                }
            }
        });
    }
}

var menuObj = {};

if (mode == "Text") {
    var texts = [text1, text2, text3, text4, text5];
    var textvals = [text1value, text2value, text3value, text4value, text5value];
    for (var i = 0; i < 5; i++) {
        if (texts[i] != undefined && textvals[i] != undefined) {
            menuObj[i] = {
                text: texts[i],
                value: getFn(texts[i], textvals[i], (i))
            };
        }
    }
} else if (mode == "Boolean") {
    menuObj = {
        1: {
            text: "true",
            value: getFn("true", true, 0)
        },
        2: {
            text: "false",
            value: getFn("false", false, 1)
        }
    };
} else if (mode == "Enum List" && enumList != "") {
    var cnt = 0;
    for (var i in enumList) {
        if (enumList[i].text != undefined && enumList[i].value != undefined) {
            menuObj[cnt] = {
                text: enumList[i].text,
                value: getFn(enumList[i].text, enumList[i].value, cnt)
            };
            cnt++;
        }
    }
}

var selectedIndex = -1;
var selectedItem = null;

function getFn(text, value, idx) {
    return function(e) {
        webMI.trigger.fire("valuechanged", value, "");
        webMI.gfx.setText("combobox_label", text);
        if (outputNode != null && outputNode != "" && !consistencyGroup) {
            webMI.data.write(outputNode, value);
        }
        selectedIndex = idx;
        selectedItem = {
            text: text,
            value: value,
            idx: idx
        };

        if (consistencyGroup && e !== 1)
            consistencyHandler.set(consistencyGroup, base, value);
    };
}

function applyTH() {
    openMenu();
}

function backTH() {
    webMI.callExtension("SYSTEM.LIBRARY.PROJECT.QUICKDYNAMICS.Open Context Menu", {
        "id": "",
        onEvent: "immediately"
    });
}

webMI.trigger.connect("setSelectedItem", function(e) {
    var item = e.value;
    webMI.gfx.setText("combobox_label", item);
    if (item == "") {
        getFn("", "", null)();
        return;
    }
    for (var i in menuObj) {
        if (item == menuObj[i]["text"]) {
            menuObj[i]["value"]();
            break;
        }
    }
}, "");

function openMenu() {
    if (!active) return;
    webMI.callExtension("SYSTEM.LIBRARY.PROJECT.QUICKDYNAMICS.Open Context Menu", {
        "id": "combobox_clickarea",
        onEvent: "immediately",
        menuObj: menuObj,
        "outputNode": outputNode,
        "x": 0,
        "y": 30,
        active: function() {
            return true;
        },
        "itemsCount": itemsCount,
        "fontSize": fontSize
    });
}

webMI.addEvent("combobox_clickarea", [ 'touchend', 'click'], function(e) {
    openMenu();
});

webMI.addEvent("combobox_clickarea", "dragstart", function(e) {
    if (e.preventDefault) {
        e.preventDefault();
    }
});

webMI.trigger.connect("setItems", function(e) {
    var value = e.value;

    for (var i in menuObj)
        delete menuObj[i];

    var cnt = 0;
    for (var i in value) {
        if (currentValue == value[i].value) {
            getFn(value[i].text, value[i].value, cnt)();
        }

        menuObj[cnt] = {
            text: value[i].text,
            value: getFn(value[i].text, value[i].value, cnt),
            originalValue: value[i].value
        };
        cnt++;
    }
});

webMI.trigger.connect("addItem", function(e) {
    var value = e.value;
    var cnt = 0;
    for (var i in menuObj) {
        cnt++;
    }
    menuObj[cnt + 1] = {
        text: value.text,
        value: getFn(value.text, value.value, cnt)
    };
});


webMI.trigger.connect("getSelectedItem", function(e) {
    var id = "";
    var value = e.value;
    if (typeof value == "function") {
        value(selectedItem);
    } else {
        webMI.trigger.fire("selectedItem", selectedItem, "");
    }
});

webMI.trigger.connect("getItems", function(e) {
    var items = [];
    for (var i in menuObj) {
        if (i != "style") {
            items.push(menuObj[i]);
        }
    }
    webMI.trigger.fire("items", items, "");
});

if (tooltip != "") {
    webMI.callExtension("SYSTEM.LIBRARY.ATVISE.QUICKDYNAMICS.Tooltip", {
        "auto": "true",
        "id": "combobox_clickarea",
        "text": tooltip
    });
}]]></script>
</svg>
