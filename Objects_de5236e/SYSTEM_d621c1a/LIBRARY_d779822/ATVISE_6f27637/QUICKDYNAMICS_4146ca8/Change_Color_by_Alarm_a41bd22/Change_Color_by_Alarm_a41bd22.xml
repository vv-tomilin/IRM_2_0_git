<?xml version="1.0" encoding="UTF-8"?>
<script>
  <metadata>
	<icon type="image/png">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</icon>
	<visible>1</visible>
	<title>Change Color by Alarm</title>
	<description>Changes the color of an element by an alarm state.</description>
  </metadata>
  <parameter name="alarm" description="alarm condition triggering the change" valuetype="address" defaultvalue="" config="" behavior="optional" group=""/>
  <parameter name="alarmOnFill" description="fill color in case an alarm occurs" valuetype="color" defaultvalue="" config="" behavior="optional" group=""/>
  <parameter name="alarmOnStroke" description="stroke color in case an alarm occurs" valuetype="color" defaultvalue="" config="" behavior="optional" group=""/>
  <parameter name="alarmOffFill" description="fill color when the alarm is off acknowledged" valuetype="color" defaultvalue="" config="" behavior="optional" group=""/>
  <parameter name="alarmOffStroke" description="stroke color when the alarm is off acknowledged" valuetype="color" defaultvalue="" config="" behavior="optional" group=""/>
  <parameter name="blinkOnUnacknowledged" description="flash interval for alarm state &quot;on unacknowledged&quot;" valuetype="enum" defaultvalue="Flash every 250ms" config="visible;invisible;Flash every 250ms;Flash every 500ms;Flash every 750ms;Flash every 1500ms" behavior="optional" group=""/>
  <parameter name="blinkOnAcknowledged" description="flash interval for alarm state &quot;on acknowledged&quot;" valuetype="enum" defaultvalue="Flash every 500ms" config="visible;invisible;Flash every 250ms;Flash every 500ms;Flash every 750ms;Flash every 1500ms" behavior="optional" group=""/>
  <parameter name="blinkOffUnacknowledged" description="flash interval for alarm state &quot;off unacknowledged&quot;" valuetype="enum" defaultvalue="Flash every 750ms" config="visible;invisible;Flash every 250ms;Flash every 500ms;Flash every 750ms;Flash every 1500ms" behavior="optional" group=""/>
  <parameter name="blinkOnOffUnacknowledged" description="flash interval for alarm state &quot;on off unacknowledged&quot;" valuetype="enum" defaultvalue="Flash every 1500ms" config="visible;invisible;Flash every 250ms;Flash every 500ms;Flash every 750ms;Flash every 1500ms" behavior="optional" group=""/>
  <code><![CDATA[// This Quick Dynamic changes the color and stroke of the applied graphical element depending on the different alarm states.
// Parameters:
//	alarm:						alarm (node) which will trigger this Quick Dynamic
//	alarmOnFill:				color to fill the graphical element in case an alarm occurs
//	alarmOnStroke:				color for the stroke of the graphical element in case an alarm occurs
//	alarmOffFill:				fill color of the graphical element to set it back to the original state when the alarm is off acknowledged
//	alarmOffStroke:				stroke color of the graphical element to set it back to the original state when the alarm is off acknowledged
//	blinkOnUnacknowledged:		flash interval for alarm state "on unacknowledged"
//	blinkOnAcknowledged:		flash interval for alarm state "on acknowledged"
//	blinkOffUnacknowledged:		flash interval for alarm state "off unacknowledged"
//	blinkOnOffUnacknowledged:	flash interval for alarm state "on off unacknowledged"

/*
var alarm = webMI.query["alarm"];
var alarmOnFill = webMI.query["alarmOnFill"];
var alarmOnStroke = webMI.query["alarmOnStroke"];
var alarmOffFill = webMI.query["alarmOffFill"];
var alarmOffStroke = webMI.query["alarmOffStroke"];
var blinkOnUnacknowledged = webMI.query["blinkOnUnacknowledged"];
var blinkOnAcknowledged = webMI.query["blinkOnAcknowledged"];
var blinkOffUnacknowledged = webMI.query["blinkOffUnacknowledged"];
var blinkOnOffUnacknowledged = webMI.query["blinkOnOffUnacknowledged"];
*/


webMI.alarm.subscribe(base.alarm, function(e) {
	var value = e.state;
	var flash250 = {0:base.alarmOnStroke,1:base.alarmOffStroke,2:base.alarmOnStroke,3:base.alarmOffStroke,4:base.alarmOnStroke,5:base.alarmOffStroke,6:base.alarmOnStroke,7:base.alarmOffStroke,8:base.alarmOnStroke,9:base.alarmOffStroke,10:base.alarmOnStroke,11:base.alarmOffStroke};
	var flash500 = {0:base.alarmOnStroke,2:base.alarmOffStroke,4:base.alarmOnStroke,6:base.alarmOffStroke,8:base.alarmOnStroke,10:base.alarmOffStroke};
	var flash750 = {0:base.alarmOnStroke,3:base.alarmOffStroke,6:base.alarmOnStroke,9:base.alarmOffStroke};
	var flash1500 = {0:base.alarmOnStroke,6:base.alarmOffStroke};


	switch (value) {
		case 1 : // blinkOnUnacknowledged
			webMI.gfx.setFill(base.id, base.alarmOnFill);
			switch (base.blinkOnUnacknowledged)
			{
				case "visible": webMI.gfx.setVisible(base.id, null); break;
				case "invisible": webMI.gfx.setVisible(base.id, false); break;
				case "Flash every 250ms" : webMI.gfx.setStroke(base.id, flash250); break;
				case "Flash every 500ms" : webMI.gfx.setStroke(base.id, flash500); break;
				case "Flash every 750ms" : webMI.gfx.setStroke(base.id, flash750); break;
				case "Flash every 1500ms" : webMI.gfx.setStroke(base.id, flash1500); break;
			}
			break;
		case 2 : // blinkOnAcknowledged
			webMI.gfx.setFill(base.id, base.alarmOnFill);
			switch (base.blinkOnAcknowledged)
			{
				case "visible": webMI.gfx.setVisible(base.id, null); break;
				case "invisible": webMI.gfx.setVisible(base.id, false); break;
				case "Flash every 250ms" : webMI.gfx.setStroke(base.id, flash250); break;
				case "Flash every 500ms" : webMI.gfx.setStroke(base.id, flash500); break;
				case "Flash every 750ms" : webMI.gfx.setStroke(base.id, flash750); break;
				case "Flash every 1500ms" : webMI.gfx.setStroke(base.id, flash1500); break;
			}
			break;
		case 3 : // blinkOffUnacknowledged
			webMI.gfx.setFill(base.id, base.alarmOnFill);
			switch (base.blinkOffUnacknowledged)
			{
				case "visible": webMI.gfx.setVisible(base.id, null); break;
				case "invisible": webMI.gfx.setVisible(base.id, false); break;
				case "Flash every 250ms" : webMI.gfx.setStroke(base.id, flash250); break;
				case "Flash every 500ms" : webMI.gfx.setStroke(base.id, flash500); break;
				case "Flash every 750ms" : webMI.gfx.setStroke(base.id, flash750); break;
				case "Flash every 1500ms" : webMI.gfx.setStroke(base.id, flash1500); break;
			}
			break;
		case 5 : // blinkOnOffUnacknowledged
			webMI.gfx.setFill(base.id, base.alarmOnFill);
			switch (base.blinkOnOffUnacknowledged)
			{
				case "visible": webMI.gfx.setVisible(base.id, null); break;
				case "invisible": webMI.gfx.setVisible(base.id, false); break;
				case "Flash every 250ms" : webMI.gfx.setStroke(base.id, flash250); break;
				case "Flash every 500ms" : webMI.gfx.setStroke(base.id, flash500); break;
				case "Flash every 750ms" : webMI.gfx.setStroke(base.id, flash750); break;
				case "Flash every 1500ms" : webMI.gfx.setStroke(base.id, flash1500); break;
			}
			break;
		default: // off acknowledged
			webMI.gfx.setFill(base.id,base.alarmOffFill);
			webMI.gfx.setStroke(base.id,base.alarmOffStroke);
			break;
	}
});]]></code>
</script>
