<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<svg version="1.2" xmlns:atv="http://webmi.atvise.com/2007/svgext" width="160" height="30" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
 <defs>
  <linearGradient id="linear_2" y1="0.0151344" y2="0.938184" x1="1.00116" gradientUnits="objectBoundingBox" x2="1.00116">
   <stop offset="0" stop-color="#d2d2d6"/>
   <stop offset="0.3318385650224215" stop-color="#ffffff"/>
   <stop offset="0.3856502242152466" stop-color="#2c2c3c"/>
   <stop offset="1" stop-color="#adadad"/>
  </linearGradient>
  <linearGradient id="linear_5" y1="0.0447761" y2="0.955818" x1="0.239739" gradientUnits="objectBoundingBox" x2="0.239739">
   <stop offset="0" stop-color="#000000"/>
   <stop offset="1" stop-color="#ffffff"/>
  </linearGradient>
 </defs>
 <desc>Allows the selection/deselection of a node's value.</desc>
 <title>Checkbox</title>
 <metadata>
  <atv:parameter desc="base" behavior="mandatory" valuetype="address" name="base"/>
  <atv:parameter defaultvalue="" behavior="optional" desc="alarm address" valuetype="address" name="alarm"/>
  <atv:parameter substitute="$LABEL$" defaultvalue="T{Checkbox}" desc="label" behavior="optional" valuetype="trstring" name="label"/>
  <atv:parameter desc="on value" behavior="mandatory" valuetype="string" name="valueOn"/>
  <atv:parameter desc="value on to be set" behavior="optional" valuetype="string" name="outputValueOn"/>
  <atv:parameter desc="value off to be set" behavior="optional" valuetype="string" name="outputValueOff"/>
  <atv:parameter config="Arial;Courier;Verdana" substitute="$FONTFAMILY$" defaultvalue="Arial" desc="family" group="Font" behavior="optional" valuetype="enum" name="fontFamily"/>
  <atv:parameter config="6;7;8;9;10;11;12;14;16;18;20;22;24;26;28;36;48;72" substitute="$FONTSIZE$" defaultvalue="12" desc="size" group="Font" behavior="optional" valuetype="enum" name="fontSize"/>
  <atv:parameter substitute="$FONTCOLOR$" defaultvalue="#000000" desc="color" group="Font" behavior="optional" valuetype="color" name="fontColor"/>
  <atv:parameter defaultvalue="false" desc="preselect this checkbox" group="Appearance" behavior="optional" valuetype="bool" name="preselected"/>
  <atv:parameter substitute="$FILL$" defaultvalue="#FFFFFF" desc="fill color" group="Appearance" behavior="optional" valuetype="color" name="fill"/>
  <atv:parameter defaultvalue="#ffffff" desc="fill color not editable" group="Appearance" behavior="optional" valuetype="color" name="fillNotEditable"/>
  <atv:parameter defaultvalue="#8c8c8c" desc="fill color when inactive" group="Appearance" behavior="optional" valuetype="color" name="fillColorInactive"/>
  <atv:parameter defaultvalue="#ffffff" desc="stroke color pressed" group="Appearance" behavior="optional" valuetype="color" name="strokePressed"/>
  <atv:parameter config="SYSTEM.LIBRARY.ATVISE.OBJECTDISPLAYS.Symbols.20x20" substitute="$SYMBOL$" defaultvalue="SYSTEM.LIBRARY.ATVISE.OBJECTDISPLAYS.Symbols.20x20.x" desc="symbol" group="Appearance" behavior="optional" valuetype="display" name="symbol"/>
  <atv:parameter defaultvalue="#000000" desc="symbol color" group="Appearance" behavior="optional" valuetype="color" name="symbolColor"/>
  <atv:parameter defaultvalue="#FFFFFF" desc="focus stroke color" group="Appearance" behavior="optional" valuetype="color" name="focusStrokeColor"/>
  <atv:parameter config="Yes;No" defaultvalue="Yes" behavior="optional" desc="enable status monitoring" valuetype="enum" name="statusEnabled"/>
  <atv:parameter defaultvalue="" behavior="optional" desc="fire status trigger" valuetype="string" name="statusTrigger"/>
  <atv:parameter defaultvalue="SYSTEM.GLOBALS.atvStatusIndication" behavior="optional" desc="status indication" group="Appearance" valuetype="global" name="statusIndication"/>
  <atv:parameter defaultvalue="SYSTEM.GLOBALS.atvAlarmIndication" behavior="optional" desc="alarm indication" group="Appearance" valuetype="global" name="alarmIndication"/>
  <atv:parameter desc="address to set" group="Options" behavior="optional" valuetype="address" name="outputNode"/>
  <atv:parameter config="Yes;No" defaultvalue="Yes" desc="editable" group="Options" behavior="optional" valuetype="enum" name="editable"/>
  <atv:parameter desc="consistency group" group="Options" behavior="optional" valuetype="string" name="consistencyGroup"/>
  <atv:parameter desc="tab index" group="Options" behavior="optional" valuetype="number" name="tabIndex"/>
  <atv:parameter desc="tooltip" group="Options" behavior="optional" valuetype="trstring" name="tooltip"/>
  <atv:parameter config="SYSTEM.SECURITY.RIGHTS" desc="necessary right" group="Security" behavior="optional" valuetype="address" name="right"/>
  <atv:parameter desc="activation address" group="Security" behavior="optional" valuetype="address" name="activeNode"/>
  <atv:parameter desc="activation value" group="Security" behavior="optional" valuetype="string" name="activeValue"/>
  <atv:gridconfig width="2" enabled="true" height="2" gridstyle="lines"/>
  <atv:snapconfig width="2" enabled="true" height="2"/>
 </metadata>
 <g id="checkbox_clickarea" atv:refpy="15" atv:refpx="80">
  <rect id="id_0" ry="3" width="159.5" fill="url(#linear_2)" stroke="#646464" atv:bindbr="1,1" atv:refpy="15.75" height="29.5" atv:refpx="80.25" stroke-width="0.5" x="0.25" y="0.25" rx="3" atv:bindtl="0,0"/>
  <rect id="id_2" ry="3" width="128" fill="url(#linear_5)" stroke="none" atv:bindbr="1,1" atv:refpy="-12.25" height="24.5" atv:refpx="209" stroke-width="0.5" x="29" y="2.75" rx="3" atv:bindtl="0,0"/>
  <rect id="checkbox_bg" ry="3" width="126" fill="$FILL$" stroke="none" atv:bindbr="1,1" atv:refpy="18.75" height="22.5" atv:refpx="213" stroke-width="2" x="30" y="3.75" rx="3" atv:bindtl="0,0"/>
  <text id="checkbox_item" font-size="$FONTSIZE$" fill="$FONTCOLOR$" atv:bindbr="1,0.5" atv:refpy="18" atv:refpx="454.602" font-family="$FONTFAMILY$" x="152.5" y="19.25" atv:bindtl="1,0.5" text-anchor="end">$LABEL$</text>
  <rect id="id_5" ry="3" width="24.5" fill="url(#linear_5)" stroke="none" atv:bindbr="0,0.5" atv:refpy="-11.75" height="24.5" atv:refpx="14.75" stroke-width="0.5" x="2.5" y="2.5" rx="3" atv:bindtl="0,0.5"/>
  <rect id="checkbox_bg2" ry="3" width="22.5" fill="$FILL$" stroke="none" atv:bindbr="0,0.5" atv:refpy="18.75" height="22.5" atv:refpx="14.75" stroke-width="2" x="3.5" y="3.5" rx="3" atv:bindtl="0,0.5"/>
  <rect id="blinking_frame" ry="1.75" width="22.75" atv:bindbr="0,0.5" fill="none" stroke="none" atv:refpy="18.75" height="22.75" atv:refpx="14.75" stroke-width="2" x="3.5" y="3.5" rx="1.75" atv:bindtl="0,0.5"/>
  <svg id="checkbox_symbol" width="20" atv:bindbr="0,0.5" atv:refpy="20" height="20" atv:refpx="14.75" x="4.75" y="5" atv:bindtl="0,0.5" xlink:href="$SYMBOL$">
   <atv:argument prefix="symbolColor" name="symbolColor"/>
  </svg>
 </g>
 <script type="text/ecmascript"><![CDATA[// The checkbox will only be ticked if the value of "base" equals the parameter "value On".
// If no "outputNode" is specified, the value of "base" will be switched between "value On" (= checkbox is ticked) and "value Off".
// If an "outputNode" is specified, then this node will be switched between "value On to be set" (= checkbox is ticked) and "value Off to be set". This
// is done in addition to the switching of "base".

var base = (webMI.query["base"] == undefined) ? "" : webMI.query["base"];
var valueOn = (webMI.query["valueOn"] == undefined) ? "" : webMI.query["valueOn"];
var outputNode = (webMI.query["outputNode"] == undefined) ? "" : webMI.query["outputNode"];
var outputValueOn = webMI.query["outputValueOn"];
var outputValueOff = webMI.query["outputValueOff"];
var fontColor = webMI.query["fontColor"];
var strokePressed = webMI.query["strokePressed"];
var focusStrokeColor = webMI.query["focusStrokeColor"];
var preselected = webMI.query["preselected"];
var editable = (webMI.query["editable"] == "Yes") ? true : false;
var fill = webMI.query["fill"];
var fillNotEditable = webMI.query["fillNotEditable"];
var fillColorInactive = webMI.query["fillColorInactive"];
var consistencyGroup = webMI.query["consistencyGroup"];
var tabHandler = webMI.callExtension("SYSTEM.LIBRARY.ATVISE.QUICKDYNAMICS.Tab Handler");
var tabIndex = (webMI.query["tabIndex"] == undefined) ? "" : webMI.query["tabIndex"];
var tooltip = (webMI.query["tooltip"] == undefined) ? "" : webMI.query["tooltip"];
var alarmToSubscribe = webMI.query["alarm"];
var alarmIndication = webMI.query["alarmIndication"];
var statusEnabled = webMI.query["statusEnabled"];
var statusTrigger = webMI.query["statusTrigger"];
var statusIndication = webMI.query["statusIndication"];
var activeIndicators = {};

if (consistencyGroup)
	var consistencyHandler = webMI.callExtension("SYSTEM.LIBRARY.ATVISE.QUICKDYNAMICS.Consistency Handler");

var right = (webMI.query["right"] == undefined) ? "" : webMI.query["right"];
if (right.search(/SYSTEM\.SECURITY\.RIGHTS\./) != -1) {
	right = right.substring(23,right.length); //remove "prefix" SYSTEM.SECURITY.RIGHTS.
}

var active = false;
var hasRight = false;

if (right != "") {
	webMI.addEvent(webMI.data, "clientvariableschange", function(e) {
		hasRight=false;
		if (("username" in e) && (e.username != "")) {
				hasRight = webMI.hasRight(right);
		}
		deActivate();
	});
}

var activeValue = (webMI.query["activeValue"] == undefined) ? "" :webMI.query["activeValue"];
var activeNode = (webMI.query["activeNode"] == undefined) ? "" : webMI.query["activeNode"];
var nodeIsActive = false;

if ((activeNode != "") && (String(activeValue) != "")) {
	webMI.data.subscribe(activeNode, function(e) {
		var nodeActiveValue = e.value;
		if (typeof nodeActiveValue == "boolean") {
			nodeIsActive = (String(nodeActiveValue) == activeValue);
		} else if (typeof nodeActiveValue == "number") {
			try {
				var temp = parseFloat(activeValue);
				nodeIsActive = (nodeActiveValue == temp);
			} catch(e) {
				nodeIsActive = false;
			}
		} else {
			nodeIsActive = (nodeActiveValue == activeValue);
		}
		if (typeof e.status != "undefined")
			handleStatus(e.status);
		deActivate();
	});
} else {
	deActivate();
}

function handleStatus(status) {
	if (statusEnabled != "Yes")
		return;

	if (statusTrigger != "") {
		webMI.trigger.fire(statusTrigger, status);
	} else {
		if (typeof statusIndication["ItemStatusBad"] == "undefined")
			statusIndication = {"ItemStatusBad": {color: "#ffff00", interval: "250"}};

		if (status == 0 || (status & 0xC0000000).toString(16) == 0)	//Good value state
			delete activeIndicators["status"];
		else if ((status & 0x80000000).toString(16) != 0)			//Bad value state
			activeIndicators["status"] = {color: statusIndication["ItemStatusBad"].color, interval: parseInt(statusIndication["ItemStatusBad"].interval)};
		else if ((status & 0xC0000000).toString(16) == 40000000)	//Uncertain value state
			activeIndicators["status"] = {color: statusIndication["ItemStatusBad"].color, interval: parseInt(statusIndication["ItemStatusBad"].interval)};
		else														//Unknown value state
			activeIndicators["status"] = {color: statusIndication["ItemStatusBad"].color, interval: parseInt(statusIndication["ItemStatusBad"].interval)};

		setIndicator();
	}
}

function initAlarm(address) {
	if (alarmIndication == "")
		alarmIndication = {};

	if (typeof alarmIndication["AlarmStatusOnUnacknowledged"] == "undefined")
		alarmIndication["AlarmStatusOnUnacknowledged"] = {color: "#ff0000", interval: "250"};

	if (typeof alarmIndication["AlarmStatusOnAcknowledged"] == "undefined")
		alarmIndication["AlarmStatusOnAcknowledged"] = {color: "#ff0000", interval: "500"};

	if (typeof alarmIndication["AlarmStatusOffUnacknowledged"] == "undefined")
		alarmIndication["AlarmStatusOffUnacknowledged"] = {color: "#ff0000", interval: "750"};

	if (typeof alarmIndication["AlarmStatusOnOffUnacknowledged"] == "undefined")
		alarmIndication["AlarmStatusOnOffUnacknowledged"] = {color: "#ff0000", interval: "1500"};

	webMI.alarm.subscribe(address, function(e) {
		if (e.state == 1)
			activeIndicators["alarm"] = {color: alarmIndication["AlarmStatusOnUnacknowledged"].color, interval: parseInt(alarmIndication["AlarmStatusOnUnacknowledged"].interval)};
		else if (e.state == 2)
			activeIndicators["alarm"] = {color: alarmIndication["AlarmStatusOnAcknowledged"].color, interval: parseInt(alarmIndication["AlarmStatusOnAcknowledged"].interval)};
		else if (e.state == 3)
			activeIndicators["alarm"] = {color: alarmIndication["AlarmStatusOffUnacknowledged"].color, interval: parseInt(alarmIndication["AlarmStatusOffUnacknowledged"].interval)};
		else if (e.state == 5)
			activeIndicators["alarm"] = {color: alarmIndication["AlarmStatusOnOffUnacknowledged"].color, interval: parseInt(alarmIndication["AlarmStatusOnOffUnacknowledged"].interval)};
		else
			delete activeIndicators["alarm"];

		setIndicator();
	});
}

if (alarmToSubscribe != "")
	initAlarm(alarmToSubscribe);

var currentIndicator = "";
function setIndicator() {
	if (currentIndicator != "")
		return;

	if (activeIndicators["trigger"]) {
		currentIndicator = "trigger";
	} else if (activeIndicators["status"]) {
		currentIndicator = "status";
	} else if (activeIndicators["alarm"]) {
		currentIndicator = "alarm";
	} else {
		currentIndicator = "";
		return;
	}

	indicationActive = true;

	webMI.gfx.setStroke("blinking_frame", activeIndicators[currentIndicator].color);
	webMI.gfx.setVisible("blinking_frame", null);

	var interval = activeIndicators[currentIndicator].interval;
	setTimeout(function() {
		webMI.gfx.setVisible("blinking_frame", false);
		setTimeout(function() {
			currentIndicator = "";
			setIndicator();
		}, interval);
	}, interval);
}

function deActivate() {
	if (right != "") {
		if ((String(activeValue) != "") && (activeNode != "")) {
			active=(nodeIsActive && hasRight);
		} else {
			active=hasRight;
		}
	} else {
		if ((String(activeValue) != "") && (activeNode != "")) {
			active=nodeIsActive;
		} else {
			active=true;
		}
	}
	if (active) {
		webMI.gfx.setFill("checkbox_bg", (editable) ? fill : fillNotEditable);
		webMI.gfx.setFill("checkbox_bg2", (editable) ? fill : fillNotEditable);
		if (compareValue(currentValue, valueOn)) {
			webMI.gfx.setVisible("checkbox_symbol",null);
		} else {
			webMI.gfx.setVisible("checkbox_symbol",false);
		}
	} else {
		webMI.gfx.setFill("checkbox_bg", fillColorInactive);
		webMI.gfx.setFill("checkbox_bg2", fillColorInactive);
	}
}

function compareValue(value1, value2) {
// value2 is always a string
var equal = false;
	switch (typeof value1) {
		case "boolean" :
			if (value1 == true) {
				if ((value2 == "true") || (value2 == "1")) {
					equal=true;
				} else {
					equal=false;
				}
			}
			if (value1 == false) {
				if ((value2 == "false") || (value2 == "0")) {
					equal=true;
				} else {
					equal=false;
				}
			}
		break;
		case "number" :
			try {
				var temp = parseFloat(value2);
				equal = (value1 == temp);
			} catch(e) {
				equal = false;
			}
		break;
		default: equal = (value1 == value2); break;
	}
	return equal;
}

var currentValue = outputValueOff;

function update(value) {
	currentValue = !value;

	if (compareValue(currentValue, valueOn)) {
		webMI.trigger.fire("valuechanged", outputValueOff, "");
		webMI.gfx.setVisible("checkbox_symbol",false);

		currentValue=outputValueOff;
	} else {
		webMI.trigger.fire("valuechanged", outputValueOn, "");
		webMI.gfx.setVisible("checkbox_symbol",null);

		currentValue=valueOn;
	}
}

if (base != "") {
	if (consistencyGroup) {
		consistencyHandler.register(consistencyGroup, base, update);
	} else {
		webMI.data.subscribe(base, function(e) {
			var value = e.value;
			if (typeof e.status != "undefined")
				handleStatus(e.status);
			return function(value) {
				currentValue = value;
				if (compareValue(currentValue, valueOn)) {
					webMI.gfx.setVisible("checkbox_symbol",null);
				} else {
					webMI.gfx.setVisible("checkbox_symbol",false);
				}
			} (value);
		});
	}
}
function focusTH(){
	if (active && editable) {
		webMI.gfx.setStroke("checkbox_bg2", focusStrokeColor);
		webMI.gfx.setStroke("checkbox_bg", focusStrokeColor);
	}
}
function applyTH(){
	clickFunction();
}
function backTH(){}
function arrowTH(dir){}
function keyHandler(keyTH,param2){
	if (keyTH == "focus"){
		focusTH();
	} else if (keyTH == "blur"){
		release();
	} else if (keyTH == "apply"){
		applyTH();
	} else if (keyTH == "space"){
		applyTH();
	} else if (keyTH == "back"){
		backTH();
	} else if (keyTH == "arrow"){
		arrowTH(param2);
	} else if (keyTH == "isActive"){
		return (active && editable && param2(document.getElementById("checkbox_clickarea").parentNode));
	}
}

webMI.addEvent("checkbox_clickarea", "click", function(e) {
var id = "checkbox_clickarea";
tabHandler.setCurrentIndex(keyHandler);
clickFunction();
});

function clickFunction() {
	if (active && editable && (String(currentValue) != "")) {
		if (compareValue(currentValue, valueOn)) {
			webMI.trigger.fire("valuechanged", outputValueOff, "");
			if (outputNode != "") {
				webMI.data.write(outputNode , outputValueOff);
			} else {
				if (base != "" && !consistencyGroup) webMI.data.write(base, outputValueOff);
			}
			if (base == "" || consistencyGroup) {
				currentValue=outputValueOff;
				webMI.gfx.setVisible("checkbox_symbol",false);

				if (consistencyGroup)
					consistencyHandler.set(consistencyGroup, base, outputValueOff);
			}
		} else {
			webMI.trigger.fire("valuechanged", outputValueOn, "");
			if (outputNode != "") {
				webMI.data.write(outputNode , outputValueOn);
			} else {
				if (base != "" && !consistencyGroup) webMI.data.write(base, outputValueOn);
			}
			if (base == "" || consistencyGroup) {
				currentValue=valueOn;
				webMI.gfx.setVisible("checkbox_symbol",null);

				if (consistencyGroup)
					consistencyHandler.set(consistencyGroup, base, outputValueOn);
			}
		}
	}
}

webMI.trigger.connect("setChecked", function(e) {
	currentValue = e.value != true;
	clickFunction();
}, "");

webMI.trigger.connect("com.atvise.setBlinking", function(e){
	if (e.value == "none"){
		delete activeIndicators["trigger"];
	} else {
		activeIndicators["trigger"] = {color: e.value, interval: 500};
	}	
	setIndicator();
});

webMI.addEvent("checkbox_clickarea", "mousedown", function(e) {
var id = "checkbox_clickarea";
var value = true;
return function(value) {
		if (active && editable) {
			webMI.gfx.setStroke("checkbox_bg2", strokePressed);
			webMI.gfx.setStroke("checkbox_bg", strokePressed);
		}
} (value);
});

function release() {
	if (active && editable) {
		webMI.gfx.setStroke("checkbox_bg2", "none");
		webMI.gfx.setStroke("checkbox_bg", "none");
	}
}

webMI.addEvent("checkbox_clickarea", ["mouseup","mouseout"], function(e) {
var id = "checkbox_clickarea";
var value = true;
return function(value) {
	release();
} (value);
});

/*
webMI.addEvent("checkbox_clickarea", "mouseout", function(e) {
var id = "checkbox_clickarea";
var value = true;
return function(value) {
	release();
} (value);
});
*/

webMI.addEvent("checkbox_clickarea", "dragstart", function(e) {
	if (e.preventDefault) {
		e.preventDefault();
	}
});

if (preselected == "true" && base == "") {
	if (active) {
		if (compareValue(currentValue, valueOn)) {
			currentValue=outputValueOff;
			webMI.gfx.setVisible("checkbox_symbol", false);
			webMI.trigger.fire("valuechanged", outputValueOff, "");
		} else {
			currentValue=valueOn;
			webMI.gfx.setVisible("checkbox_symbol", null);
			webMI.trigger.fire("valuechanged", valueOn, "");
		}
	}
}
webMI.addOnload(function() {
	webMI.trigger.fire("valuechanged", (preselected == "true"), "");
	var doc = document.getElementById("checkbox_clickarea").ownerDocument;
	tabHandler.register(tabIndex,keyHandler,doc);
});

if (tooltip != ""){
	webMI.callExtension("SYSTEM.LIBRARY.ATVISE.QUICKDYNAMICS.Tooltip", {"auto":"true", "id":"checkbox_clickarea", "text":tooltip});
}]]></script>
</svg>
