<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<svg version="1.2" xmlns:atv="http://webmi.atvise.com/2007/svgext" width="80" height="30" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
 <defs>
  <linearGradient id="linear_12" y1="0.0151344" y2="0.938184" x1="1.00116" gradientUnits="objectBoundingBox" x2="1.00116">
   <stop offset="0" stop-color="#d2d2d6"/>
   <stop offset="0.3318385650224215" stop-color="#ffffff"/>
   <stop offset="0.3856502242152466" stop-color="#2c2c3c"/>
   <stop offset="1" stop-color="#adadad"/>
  </linearGradient>
  <linearGradient id="linear_0" y1="0.0447761" y2="0.955818" x1="0.239739" gradientUnits="objectBoundingBox" x2="0.239739">
   <stop offset="0" stop-color="#000000"/>
   <stop offset="1" stop-color="#ffffff"/>
  </linearGradient>
  <linearGradient id="linear_1" y1="1" y2="-0.136364" x1="1.01755" gradientUnits="objectBoundingBox" x2="1.0303">
   <stop offset="0.6008771929824561" stop-color="#ffffff" stop-opacity="0"/>
   <stop offset="1" stop-color="#ffffff"/>
  </linearGradient>
  <linearGradient id="linear_2" y1="1" y2="-0.0183441" x1="1" gradientUnits="objectBoundingBox" x2="1">
   <stop offset="0" stop-color="#ffffff" stop-opacity="0.2745098039215687"/>
   <stop offset="0.5515695067264574" stop-color="#ffffff" stop-opacity="0"/>
  </linearGradient>
 </defs>
 <desc>Switches 2 values on an address.</desc>
 <title>Button Switch</title>
 <metadata>
  <atv:parameter desc="base" behavior="mandatory" valuetype="address" name="base"/>
  <atv:parameter defaultvalue="" desc="alarm address" behavior="optional" valuetype="address" name="alarm"/>
  <atv:parameter config="Yes;No" defaultvalue="Yes" desc="enable status monitoring" behavior="optional" valuetype="enum" name="statusEnabled"/>
  <atv:parameter defaultvalue="" desc="fire status trigger" behavior="optional" valuetype="string" name="statusTrigger"/>
  <atv:parameter substitute="$LABEL$" defaultvalue="T{Switched on}" desc="label for on state" behavior="optional" valuetype="trstring" name="labelOn"/>
  <atv:parameter defaultvalue="T{Switched off}" desc="label for off state" behavior="optional" valuetype="trstring" name="labelOff"/>
  <atv:parameter defaultvalue="1" desc="on value" behavior="mandatory" valuetype="string" name="valueOn"/>
  <atv:parameter defaultvalue="1" desc="value On to be set" behavior="mandatory" valuetype="string" name="outputValueOn"/>
  <atv:parameter defaultvalue="0" desc="value Off to be set" behavior="mandatory" valuetype="string" name="outputValueOff"/>
  <atv:parameter config="Times New Roman=Times New Roman,Bodoni,Garamond,Minion Web,ITC Stone Serif,MS Georgia,Bitstream Cyberbit,serif;Arial=MS Trebuchet,ITC Avant Garde Gothic,MS Arial,MS Verdana,Univers,Futura,ITC Stone Sans,Gill Sans,Akzidenz Grotesk,Helvetica,sans-serif;Courier=Courier,MS Courier New,Prestige,Everson Mono,monospace;Zapf-Chancery=Caflisch Script,Adobe Poetica,Sanvito,Ex Ponto,Snell Roundhand,Zapf-Chancery,cursive;Alpha Geometrique=Alpha Geometrique,Critter,Cottonwood,FB Reactor,Studz,fantasy" substitute="$FONTFAMILY$" defaultvalue="Arial" desc="family" group="Font" behavior="optional" valuetype="enum" name="fontFamily"/>
  <atv:parameter config="6;7;8;9;10;11;12;14;16;18;20;22;24;26;28;36;48;72" substitute="$FONTSIZE$" defaultvalue="12" desc="size" group="Font" behavior="optional" valuetype="enum" name="fontSize"/>
  <atv:parameter substitute="$FONTCOLOR$" defaultvalue="#FFFFFF" desc="color" group="Font" behavior="optional" valuetype="color" name="fontColor"/>
  <atv:parameter config="visible=inherit;hidden=hidden" substitute="$VISIBILITYLABEL$" defaultvalue="inherit" desc="visibility label" group="Appearance" behavior="optional" valuetype="enum" name="visibilityLabel"/>
  <atv:parameter config="visible=inherit;hidden=hidden" substitute="$VISIBILITYSYMBOL$" defaultvalue="hidden" desc="visibility symbol" group="Appearance" behavior="optional" valuetype="enum" name="visibilitySymbol"/>
  <atv:parameter config="SYSTEM.LIBRARY.ATVISE.OBJECTDISPLAYS.Symbols.20x20" substitute="$SYMBOLON$" defaultvalue="SYSTEM.LIBRARY.ATVISE.OBJECTDISPLAYS.Symbols.20x20.lamp" desc="symbol for on state" group="Appearance" behavior="optional" valuetype="display" name="symbolOn"/>
  <atv:parameter config="SYSTEM.LIBRARY.ATVISE.OBJECTDISPLAYS.Symbols.20x20" substitute="$SYMBOLOFF$" defaultvalue="SYSTEM.LIBRARY.ATVISE.OBJECTDISPLAYS.Symbols.20x20.lamp_off" desc="symbol for off state" group="Appearance" behavior="optional" valuetype="display" name="symbolOff"/>
  <atv:parameter defaultvalue="#d0d0d0" desc="symbol color" group="Appearance" behavior="optional" valuetype="color" name="symbolColor"/>
  <atv:parameter substitute="$FILL$" defaultvalue="#000000" desc="fill color for on state" group="Appearance" behavior="optional" valuetype="color" name="fillOn"/>
  <atv:parameter defaultvalue="#000000" desc="fill color for off state" group="Appearance" behavior="optional" valuetype="color" name="fillOff"/>
  <atv:parameter defaultvalue="#8c8c8c" desc="fill color when inactive" group="Appearance" behavior="optional" valuetype="color" name="fillColorInactive"/>
  <atv:parameter defaultvalue="#ffffff" desc="stroke color pressed" group="Appearance" behavior="optional" valuetype="color" name="strokePressed"/>
  <atv:parameter defaultvalue="#FFFFFF" desc="focus stroke color" group="Appearance" behavior="optional" valuetype="color" name="focusStrokeColor"/>
  <atv:parameter defaultvalue="SYSTEM.GLOBALS.atvStatusIndication" group="Appearance" desc="status indication" behavior="optional" valuetype="global" name="statusIndication"/>
  <atv:parameter defaultvalue="SYSTEM.GLOBALS.atvAlarmIndication" group="Appearance" desc="alarm indication" behavior="optional" valuetype="global" name="alarmIndication"/>
  <atv:parameter desc="address to set" group="Options" behavior="optional" valuetype="address" name="outputNode"/>
  <atv:parameter desc="tab index" group="Options" behavior="optional" valuetype="number" name="tabIndex"/>
  <atv:parameter desc="tooltip" group="Options" behavior="optional" valuetype="trstring" name="tooltip"/>
  <atv:parameter config="SYSTEM.SECURITY.RIGHTS" desc="necessary right" group="Security" behavior="optional" valuetype="address" name="right"/>
  <atv:parameter desc="activation address" group="Security" behavior="optional" valuetype="address" name="activeNode"/>
  <atv:parameter desc="activation value" group="Security" behavior="optional" valuetype="string" name="activeValue"/>
  <atv:gridconfig width="2" enabled="true" height="2" gridstyle="lines"/>
  <atv:snapconfig width="2" enabled="true" height="2"/>
 </metadata>
 <g id="button_clickarea" atv:refpy="15" atv:refpx="16" atv:dynamic="true">
  <rect id="id_0" ry="3" width="79.5" fill="url(#linear_12)" stroke="#646464" atv:bindbr="1,1" atv:refpy="16" height="29.5" atv:refpx="40.25" stroke-width="0.5" x="0.25" y="0.25" rx="3" atv:bindtl="0,0" atv:dynamic="true"/>
  <rect id="id_2" ry="2.492" width="74.5" fill="url(#linear_0)" stroke="none" atv:bindbr="1,1" atv:refpy="-94" height="24.5" atv:refpx="42.75" stroke-width="0.5" x="2.75" y="2.75" rx="2.811" atv:bindtl="0,0"/>
  <rect id="button_bg" ry="2.237" width="72" fill="$FILL$" stroke="none" atv:bindbr="1,1" atv:refpy="31" height="22" atv:refpx="44" stroke-width="0.5" x="4" y="4" rx="2.717" atv:bindtl="0,0"/>
  <svg id="button_symbol_on" width="20" atv:bindbr="0.5,0.5" atv:refpy="20" height="20" atv:refpx="130" x="30" y="5" atv:bindtl="0.5,0.5" visibility="$VISIBILITYSYMBOL$" xlink:href="$SYMBOLON$">
   <atv:argument prefix="symbolColor" name="symbolColor"/>
  </svg>
  <svg id="button_symbol_off" width="20" atv:bindbr="0.5,0.5" atv:refpy="20" height="20" atv:refpx="130" x="30" y="5" atv:bindtl="0.5,0.5" visibility="hidden" xlink:href="$SYMBOLOFF$">
   <atv:argument prefix="symbolColor" name="symbolColor"/>
  </svg>
  <text id="button_label" font-size="$FONTSIZE$" fill="$FONTCOLOR$" atv:bindbr="0.5,0.5" atv:refpy="14.5" atv:refpx="40" font-family="$FONTFAMILY$" x="40" y="19.5" atv:bindtl="0.5,0.5" visibility="$VISIBILITYLABEL$" text-anchor="middle">$LABEL$</text>
  <rect id="button_stroke" ry="2.237" width="72" fill="url(#linear_1)" stroke="none" atv:bindbr="1,1" atv:refpy="31" height="22" atv:refpx="44" stroke-width="1" x="4" y="4" rx="2.717" atv:bindtl="0,0"/>
 </g>
 <rect id="blinking_frame" ry="2.492" width="73.25" atv:bindbr="1,1" fill="none" stroke="none" atv:refpy="15.881" height="23.25" atv:refpx="40.238" stroke-width="1.8" x="3.375" y="3.375" fill-opacity="1" rx="2.811" atv:bindtl="0,0" atv:dynamic="true"/>
 <script type="text/ecmascript"><![CDATA[// This button will be in "On" state if the value of "base" equals the parameter "value On".
// If no "outputNode" is specified, the value of "base" will be switched between "value On to be set" (= state "On") and "value Off to be set" (=state Off").
// If an "outputNode" is specified, then this node will be switched between "value On to be set" (= state "On") and "value Off to be set".

var base = (webMI.query["base"] == undefined) ? "" : webMI.query["base"];
var onText = webMI.query["labelOn"];
var offText = webMI.query["labelOff"];
var onFill = (webMI.query["fillOn"] == undefined) ? "" : webMI.query["fillOn"];
var offFill = (webMI.query["fillOff"] == undefined) ? "" : webMI.query["fillOff"];
var fillColorInactive = webMI.query["fillColorInactive"];
var strokeNormal = "none";
var strokePressed = webMI.query["strokePressed"];
var focusStrokeColor = webMI.query["focusStrokeColor"];
var valueOn = (webMI.query["valueOn"] == undefined) ? "" : webMI.query["valueOn"];
var outputNode = (webMI.query["outputNode"] == undefined) ? "" : webMI.query["outputNode"];
var outputValueOn = webMI.query["outputValueOn"];
var outputValueOff = webMI.query["outputValueOff"];
var visibilityLabel = webMI.query["visibilityLabel"];
var visibilitySymbol = webMI.query["visibilitySymbol"];
var symbolOn = (webMI.query["symbolOn"] == undefined) ? "" : webMI.query["symbolOn"];
var symbolOff = (webMI.query["symbolOff"] == undefined) ? "" : webMI.query["symbolOff"];
var currentValue = outputValueOff;
var tabHandler = webMI.callExtension("SYSTEM.LIBRARY.ATVISE.QUICKDYNAMICS.Tab Handler");
var tabIndex = (webMI.query["tabIndex"] == undefined) ? "" : webMI.query["tabIndex"];
var tooltip = (webMI.query["tooltip"] == undefined) ? "" : webMI.query["tooltip"];
var alarmToSubscribe = webMI.query["alarm"];
var alarmIndication = webMI.query["alarmIndication"];
var statusEnabled = webMI.query["statusEnabled"];
var statusTrigger = webMI.query["statusTrigger"];
var statusIndication = webMI.query["statusIndication"];
var activeIndicators = {};

var right = (webMI.query["right"] == undefined) ? "" : webMI.query["right"];
if (right.search(/SYSTEM\.SECURITY\.RIGHTS\./) != -1) {
	right = right.substring(23,right.length); //remove "prefix" SYSTEM.SECURITY.RIGHTS.
}

var active = false;
var hasRight = false;

if (right != "") {
	webMI.addEvent(webMI.data, "clientvariableschange", function(e) {
		hasRight=false;
		if (("username" in e) && (e.username != "")) {
				hasRight = webMI.hasRight(right);
		}
		deActivate();
	});
}

var activeValue = (webMI.query["activeValue"] == undefined) ? "" :webMI.query["activeValue"];
var activeNode = (webMI.query["activeNode"] == undefined) ? "" : webMI.query["activeNode"];
var nodeIsActive = false;

if ((activeNode != "") && (String(activeValue) != "")) {
	webMI.data.subscribe(activeNode, function(e) {
		var nodeActiveValue = e.value;
		if (typeof nodeActiveValue == "boolean") {
			nodeIsActive = (String(nodeActiveValue) == activeValue);
		} else if (typeof nodeActiveValue == "number") {
			try {
				var temp = parseFloat(activeValue);
				nodeIsActive = (nodeActiveValue == temp);
			} catch(e) {
				nodeIsActive = false;
			}
		} else {
			nodeIsActive = (nodeActiveValue == activeValue);
		}
		if (typeof e.status != "undefined")
			handleStatus(e.status);
		deActivate();
	});
} else {
	deActivate();
}

function deActivate() {
	if (right != "") {
		if ((String(activeValue) != "") && (activeNode != "")) {
			active=(nodeIsActive && hasRight);
		} else {
			active=hasRight;
		}
	} else {
		if ((String(activeValue) != "") && (activeNode != "")) {
			active=nodeIsActive;
		} else {
			active=true;
		}
	}
	if (active) {
		if (compareValue(currentValue, valueOn)){
			webMI.gfx.setFill("button_stroke", "url(#linear_2)");
			if (onFill != "") webMI.gfx.setFill("button_bg", onFill);
			if (visibilityLabel != "hidden") webMI.gfx.setText("button_label",onText);
			if (visibilitySymbol != "hidden") {
				if (symbolOff != "") webMI.gfx.setVisible("button_symbol_on", null);
				if (symbolOn != "") webMI.gfx.setVisible("button_symbol_off", false);
			}
		} else {
			webMI.gfx.setFill("button_stroke", "url(#linear_1)");
			if (offFill != "") webMI.gfx.setFill("button_bg", offFill);
			if (visibilityLabel != "hidden") webMI.gfx.setText("button_label",offText);
			if (visibilitySymbol != "hidden") {
				if (symbolOff != "") webMI.gfx.setVisible("button_symbol_on", false);
				if (symbolOn != "") webMI.gfx.setVisible("button_symbol_off", null);
			}
		}
		webMI.gfx.setVisible("button_stroke", null);
	} else {
		webMI.gfx.setFill("button_bg", fillColorInactive);
		webMI.gfx.setVisible("button_stroke", false);
	}
}

function handleStatus(status) {
	if (statusEnabled != "Yes")
		return;

	if (statusTrigger != "") {
		webMI.trigger.fire(statusTrigger, status);
	} else {
		if (typeof statusIndication["ItemStatusBad"] == "undefined")
			statusIndication = {"ItemStatusBad": {color: "#ffff00", interval: "250"}};

		if (status == 0 || (status & 0xC0000000).toString(16) == 0)	//Good value state
			delete activeIndicators["status"];
		else if ((status & 0x80000000).toString(16) != 0)			//Bad value state
			activeIndicators["status"] = {color: statusIndication["ItemStatusBad"].color, interval: parseInt(statusIndication["ItemStatusBad"].interval)};
		else if ((status & 0xC0000000).toString(16) == 40000000)	//Uncertain value state
			activeIndicators["status"] = {color: statusIndication["ItemStatusBad"].color, interval: parseInt(statusIndication["ItemStatusBad"].interval)};
		else														//Unknown value state
			activeIndicators["status"] = {color: statusIndication["ItemStatusBad"].color, interval: parseInt(statusIndication["ItemStatusBad"].interval)};

		setIndicator();
	}
}

function initAlarm(address) {
	if (alarmIndication == "")
		alarmIndication = {};

	if (typeof alarmIndication["AlarmStatusOnUnacknowledged"] == "undefined")
		alarmIndication["AlarmStatusOnUnacknowledged"] = {color: "#ff0000", interval: "250"};

	if (typeof alarmIndication["AlarmStatusOnAcknowledged"] == "undefined")
		alarmIndication["AlarmStatusOnAcknowledged"] = {color: "#ff0000", interval: "500"};

	if (typeof alarmIndication["AlarmStatusOffUnacknowledged"] == "undefined")
		alarmIndication["AlarmStatusOffUnacknowledged"] = {color: "#ff0000", interval: "750"};

	if (typeof alarmIndication["AlarmStatusOnOffUnacknowledged"] == "undefined")
		alarmIndication["AlarmStatusOnOffUnacknowledged"] = {color: "#ff0000", interval: "1500"};

	webMI.alarm.subscribe(address, function(e) {
		if (e.state == 1)
			activeIndicators["alarm"] = {color: alarmIndication["AlarmStatusOnUnacknowledged"].color, interval: parseInt(alarmIndication["AlarmStatusOnUnacknowledged"].interval)};
		else if (e.state == 2)
			activeIndicators["alarm"] = {color: alarmIndication["AlarmStatusOnAcknowledged"].color, interval: parseInt(alarmIndication["AlarmStatusOnAcknowledged"].interval)};
		else if (e.state == 3)
			activeIndicators["alarm"] = {color: alarmIndication["AlarmStatusOffUnacknowledged"].color, interval: parseInt(alarmIndication["AlarmStatusOffUnacknowledged"].interval)};
		else if (e.state == 5)
			activeIndicators["alarm"] = {color: alarmIndication["AlarmStatusOnOffUnacknowledged"].color, interval: parseInt(alarmIndication["AlarmStatusOnOffUnacknowledged"].interval)};
		else
			delete activeIndicators["alarm"];

		setIndicator();
	});
}

if (alarmToSubscribe != "")
	initAlarm(alarmToSubscribe);

var currentIndicator = "";
function setIndicator() {
	if (currentIndicator != "")
		return;

	if (activeIndicators["trigger"]) {
		currentIndicator = "trigger";
	} else if (activeIndicators["status"]) {
		currentIndicator = "status";
	} else if (activeIndicators["alarm"]) {
		currentIndicator = "alarm";
	} else {
		currentIndicator = "";
		return;
	}

	indicationActive = true;

	webMI.gfx.setStroke("blinking_frame", activeIndicators[currentIndicator].color);
	webMI.gfx.setVisible("blinking_frame", null);

	var interval = activeIndicators[currentIndicator].interval;
	setTimeout(function() {
		webMI.gfx.setVisible("blinking_frame", false);
		setTimeout(function() {
			currentIndicator = "";
			setIndicator();
		}, interval);
	}, interval);
}

function compareValue(value1, value2) {
// value2 is always a string
var equal = false;
	switch (typeof value1) {
		case "boolean" :
			if (value1 == true) {
				if ((value2 == "true") || (value2 == "1")) {
					equal=true;
				} else {
					equal=false;
				}
			}
			if (value1 == false) {
				if ((value2 == "false") || (value2 == "0")) {
					equal=true;
				} else {
					equal=false;
				}
			}
		break;
		case "number" :
			try {
				var temp = parseFloat(value2);
				equal = (value1 == temp);
			} catch(e) {
				equal = false;
			}
		break;
		default: equal = (value1 == value2); break;
	}
	return equal;
}

if (base != "") {
	webMI.data.subscribe(base, function(e) {
		currentValue = e.value;
		if ((String(currentValue) != "")) {
			if (compareValue(currentValue, valueOn)) {
				if (visibilityLabel != "hidden") webMI.gfx.setText("button_label",onText);
				if (visibilitySymbol != "hidden") {
					if (symbolOff != "") webMI.gfx.setVisible("button_symbol_on", null);
					if (symbolOn != "") webMI.gfx.setVisible("button_symbol_off", false);
				}
				if (active) {
					webMI.gfx.setFill("button_stroke", "url(#linear_2)");
					if (onFill != "") webMI.gfx.setFill("button_bg", onFill);
				}
			} else {
				if (visibilityLabel != "hidden") webMI.gfx.setText("button_label",offText);
				if (visibilitySymbol != "hidden") {
					if (symbolOff != "") webMI.gfx.setVisible("button_symbol_on", false);
					if (symbolOn != "") webMI.gfx.setVisible("button_symbol_off", null);
				}
				if (active) {
					webMI.gfx.setFill("button_stroke", "url(#linear_1)");
					if (offFill != "") webMI.gfx.setFill("button_bg", offFill);
				}
			}
		}
		if (typeof e.status != "undefined")
			handleStatus(e.status);
	});
} else {
	webMI.gfx.setFill("button_stroke", "url(#linear_1)");
	if (visibilityLabel != "hidden") webMI.gfx.setText("button_label",offText);
	if (offFill != "") webMI.gfx.setFill("button_bg", offFill);
	if (visibilitySymbol != "hidden") {
		if (symbolOff != "") webMI.gfx.setVisible("button_symbol_on", false);
		if (symbolOn != "") webMI.gfx.setVisible("button_symbol_off", null);
	}
}

function release() {
	if (active) webMI.gfx.setStroke("button_stroke", strokeNormal);
}

function focusTH(){
	if (active) webMI.gfx.setStroke("button_stroke", focusStrokeColor);
}

function applyTH(){
	clickFunction(true);
}

function backTH(){}

function arrowTH(dir){}

function keyHandler(keyTH,param2){
	if (keyTH == "focus"){
		focusTH();
	} else if (keyTH == "blur"){
		release();
	} else if (keyTH == "apply"){
		applyTH();
	} else if (keyTH == "back"){
		backTH();
	} else if (keyTH == "arrow"){
		arrowTH(param2);
	} else if (keyTH == "isActive"){
		return active && param2(document.getElementById("button_clickarea").parentNode);
	}
}

webMI.addEvent("button_clickarea", ["mouseup","mouseout"], function(e) {
var id = "button_clickarea";
var value = true;
return function(value) {
	release();
} (value);
});

webMI.addEvent("button_clickarea", "mousedown", function(e) {
var id = "button_clickarea";
var value = true;
return function(value) {
		if (active) webMI.gfx.setStroke("button_stroke", strokePressed);
} (value);
});

webMI.addEvent("button_clickarea", "dragstart", function(e) {
	if (e.preventDefault) e.preventDefault();
});

webMI.addEvent("button_clickarea", "click", function(e) {
var id = "button_clickarea";
var value = true;
return function(value) {
	if (active) tabHandler.setCurrentIndex(keyHandler);
	clickFunction(true);
} (value);
});

function clickFunction(fireTrigger) {
	if (active && (String(currentValue) != "")) {
		if (compareValue(currentValue, valueOn)) {
			if (fireTrigger)
				webMI.trigger.fire("valuechanged", outputValueOff, "");
			if (outputNode != "") {
				webMI.data.write(outputNode, outputValueOff);
			} else {
				if (base != "") webMI.data.write(base, outputValueOff);
			}
			if (base == "") {
				webMI.gfx.setFill("button_stroke", "url(#linear_1)");
				if (visibilityLabel != "hidden") webMI.gfx.setText("button_label",offText);
				if (offFill != "") webMI.gfx.setFill("button_bg", offFill);
				if (visibilitySymbol != "hidden") {
					if (symbolOff != "") webMI.gfx.setVisible("button_symbol_on", false);
					if (symbolOn != "") webMI.gfx.setVisible("button_symbol_off", null);
				}
				currentValue=outputValueOff;
			}
		} else {
			if (fireTrigger)
				webMI.trigger.fire("valuechanged", outputValueOn, "");
			if (outputNode != "") {
				webMI.data.write(outputNode, outputValueOn);
			} else {
				if (base != "") webMI.data.write(base, outputValueOn);
			}
			if (base == "") {
				webMI.gfx.setFill("button_stroke", "url(#linear_2)");
				if (visibilityLabel != "hidden") webMI.gfx.setText("button_label",onText);
				if (onFill != "") webMI.gfx.setFill("button_bg", onFill);
				if (visibilitySymbol != "hidden") {
					if (symbolOff != "") webMI.gfx.setVisible("button_symbol_on", null);
					if (symbolOn != "") webMI.gfx.setVisible("button_symbol_off", false);
				}
				currentValue=valueOn;
			}
		}
	}
}

webMI.trigger.connect("setValue", function(e) {
	var value = e.value;
	var isClicked = currentValue == "1";

	if (isClicked == value) {
		clickFunction(false);
	}

}, "");

webMI.trigger.connect("com.atvise.setBlinking", function(e){
	if (e.value == "none"){
		delete activeIndicators["trigger"];
	} else {
		activeIndicators["trigger"] = {color: e.value, interval: 500};
	}	
	setIndicator();
});

webMI.addOnload(function() {
	var doc = document.getElementById("button_clickarea").ownerDocument;
	tabHandler.register(tabIndex,keyHandler,doc);
});

if (tooltip != ""){
	webMI.callExtension("SYSTEM.LIBRARY.ATVISE.QUICKDYNAMICS.Tooltip", {"auto":"true", "id":"button_clickarea", "text":tooltip});
}]]></script>
</svg>
