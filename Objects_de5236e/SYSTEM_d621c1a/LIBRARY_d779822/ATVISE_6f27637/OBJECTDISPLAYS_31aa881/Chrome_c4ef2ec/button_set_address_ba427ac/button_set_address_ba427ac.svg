<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<svg width="80" version="1.2" xmlns="http://www.w3.org/2000/svg" height="30" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:atv="http://webmi.atvise.com/2007/svgext">
 <defs>
  <linearGradient id="linear_12" y1="0.0151344" x1="1.00116" y2="0.938184" gradientUnits="objectBoundingBox" x2="1.00116">
   <stop offset="0" stop-color="#d2d2d6"/>
   <stop offset="0.3318385650224215" stop-color="#ffffff"/>
   <stop offset="0.3856502242152466" stop-color="#2c2c3c"/>
   <stop offset="1" stop-color="#adadad"/>
  </linearGradient>
  <linearGradient id="linear_0" y1="0.0447761" x1="0.239739" y2="0.955818" gradientUnits="objectBoundingBox" x2="0.239739">
   <stop offset="0" stop-color="#000000"/>
   <stop offset="1" stop-color="#ffffff"/>
  </linearGradient>
  <linearGradient id="linear_1" y1="1" x1="1.01755" y2="-0.136364" gradientUnits="objectBoundingBox" x2="1.0303">
   <stop offset="0.6008771929824561" stop-color="#ffffff" stop-opacity="0"/>
   <stop offset="1" stop-color="#ffffff"/>
  </linearGradient>
  <linearGradient id="linear_2" y1="1" x1="1" y2="-0.0183441" gradientUnits="objectBoundingBox" x2="1">
   <stop offset="0" stop-color="#ffffff" stop-opacity="0.2745098039215687"/>
   <stop offset="0.5515695067264574" stop-color="#ffffff" stop-opacity="0"/>
  </linearGradient>
 </defs>
 <desc>Sets the specified value to an address.</desc>
 <title>Button Set Address</title>
 <metadata>
  <atv:gridconfig width="2" enabled="false" height="2" gridstyle="lines"/>
  <atv:snapconfig width="2" enabled="false" height="2"/>
  <atv:parameter desc="base" valuetype="address" behavior="mandatory" name="base"/>
  <atv:parameter desc="value" valuetype="string" behavior="mandatory" name="value"/>
  <atv:parameter desc="label" valuetype="trstring" substitute="$LABEL$" behavior="optional" name="label" defaultvalue="T{Set address}"/>
  <atv:parameter desc="family" config="Times New Roman=Times New Roman,Bodoni,Garamond,Minion Web,ITC Stone Serif,MS Georgia,Bitstream Cyberbit,serif;Arial=MS Trebuchet,ITC Avant Garde Gothic,MS Arial,MS Verdana,Univers,Futura,ITC Stone Sans,Gill Sans,Akzidenz Grotesk,Helvetica,sans-serif;Courier=Courier,MS Courier New,Prestige,Everson Mono,monospace;Zapf-Chancery=Caflisch Script,Adobe Poetica,Sanvito,Ex Ponto,Snell Roundhand,Zapf-Chancery,cursive;Alpha Geometrique=Alpha Geometrique,Critter,Cottonwood,FB Reactor,Studz,fantasy" valuetype="enum" substitute="$FONTFAMILY$" group="Font" behavior="optional" name="fontFamily" defaultvalue="Arial"/>
  <atv:parameter desc="size" config="6;7;8;9;10;11;12;14;16;18;20;22;24;26;28;36;48;72" valuetype="enum" substitute="$FONTSIZE$" group="Font" behavior="optional" name="fontSize" defaultvalue="12"/>
  <atv:parameter desc="color" valuetype="color" substitute="$FONTCOLOR$" group="Font" behavior="optional" name="fontColor" defaultvalue="#FFFFFF"/>
  <atv:parameter desc="visibility label" config="visible=inherit;hidden=hidden" valuetype="enum" substitute="$VISIBILITYLABEL$" group="Appearance" behavior="optional" name="visibilityLabel" defaultvalue="inherit"/>
  <atv:parameter desc="visibility symbol" config="visible=inherit;hidden=hidden" valuetype="enum" substitute="$VISIBILITYSYMBOL$" group="Appearance" behavior="optional" name="visibilitySymbol" defaultvalue="hidden"/>
  <atv:parameter desc="symbol" config="SYSTEM.LIBRARY.ATVISE.OBJECTDISPLAYS.Symbols.20x20" valuetype="display" substitute="$SYMBOL$" group="Appearance" behavior="optional" name="symbol" defaultvalue="SYSTEM.LIBRARY.ATVISE.OBJECTDISPLAYS.Symbols.20x20.disc"/>
  <atv:parameter desc="symbol color" valuetype="color" group="Appearance" behavior="optional" name="symbolColor" defaultvalue="#d0d0d0"/>
  <atv:parameter desc="fill color" valuetype="color" substitute="$FILLCOLOR$" group="Appearance" behavior="optional" name="fillColor" defaultvalue="#000000"/>
  <atv:parameter desc="fill color when inactive" valuetype="color" group="Appearance" behavior="optional" name="fillColorInactive" defaultvalue="#8c8c8c"/>
  <atv:parameter desc="stroke color pressed" valuetype="color" group="Appearance" behavior="optional" name="strokePressed" defaultvalue="#ffffff"/>
  <atv:parameter desc="focus stroke color" valuetype="color" group="Appearance" behavior="optional" name="focusStrokeColor" defaultvalue="#FFFFFF"/>
  <atv:parameter desc="address to set at MouseDown" valuetype="address" group="Options" behavior="optional" name="onMouseDownNode"/>
  <atv:parameter desc="value MouseDown" valuetype="string" group="Options" behavior="optional" name="onMouseDownValue"/>
  <atv:parameter desc="address to set at MouseUp" valuetype="address" group="Options" behavior="optional" name="onMouseUpNode"/>
  <atv:parameter desc="value MouseUp" valuetype="string" group="Options" behavior="optional" name="onMouseUpValue"/>
  <atv:parameter desc="tab index" valuetype="number" group="Options" behavior="optional" name="tabIndex"/>
  <atv:parameter desc="tooltip" valuetype="trstring" group="Options" behavior="optional" name="tooltip"/>
  <atv:parameter desc="necessary right" config="SYSTEM.SECURITY.RIGHTS" valuetype="address" group="Security" behavior="optional" name="right"/>
  <atv:parameter desc="activation address" valuetype="address" group="Security" behavior="optional" name="activeNode"/>
  <atv:parameter desc="activation value" valuetype="string" group="Security" behavior="optional" name="activeValue"/>
 </metadata>
 <g atv:dynamic="true" id="button_clickarea">
  <rect width="79.5" x="0.25" y="0.25" atv:bindtl="0,0" fill="url(#linear_12)" atv:dynamic="true" rx="3" height="29.5" ry="3" stroke="#646464" atv:bindbr="1,1" id="id_0" atv:refpx="40.25" stroke-width="0.5" atv:refpy="16"/>
  <rect width="74.5" x="2.75" y="2.75" atv:bindtl="0,0" fill="url(#linear_0)" rx="2.811" height="24.5" ry="2.492" stroke="none" atv:bindbr="1,1" id="id_2" atv:refpx="42.75" stroke-width="0.5" atv:refpy="-94"/>
  <rect width="72" x="4" y="4" atv:bindtl="0,0" fill="$FILLCOLOR$" rx="2.717" height="22" ry="2.237" stroke="none" atv:bindbr="1,1" id="button_bg" atv:refpx="44" stroke-width="0.5" atv:refpy="31"/>
  <svg width="20" x="30" y="5" atv:bindtl="0.5,0.5" visibility="$VISIBILITYSYMBOL$" height="20" atv:bindbr="0.5,0.5" xlink:href="$SYMBOL$" id="button_symbol" atv:refpx="130" atv:refpy="20">
   <atv:argument prefix="symbolColor" name="symbolColor"/>
  </svg>
  <text x="40" y="19.5" atv:bindtl="0.5,0.5" visibility="$VISIBILITYLABEL$" fill="$FONTCOLOR$" font-family="$FONTFAMILY$" text-anchor="middle" atv:bindbr="0.5,0.5" id="button_label" atv:refpx="61.666" atv:refpy="15" font-size="$FONTSIZE$">$LABEL$</text>
  <rect width="72" x="4" y="4" atv:bindtl="0,0" fill="url(#linear_1)" rx="2.717" height="22" ry="2.237" stroke="none" atv:bindbr="1,1" id="button_stroke" atv:refpx="44" stroke-width="1" atv:refpy="31"/>
 </g>
 <script type="text/ecmascript"><![CDATA[var base = (webMI.query["base"] == undefined) ? "" : webMI.query["base"];
var strokeNormal = "none";
var strokePressed = webMI.query["strokePressed"];
var focusStrokeColor = webMI.query["focusStrokeColor"];
var fillColor = webMI.query["fillColor"];
var fillColorInactive = webMI.query["fillColorInactive"];
var onMouseDownValue = (webMI.query["onMouseDownValue"] == undefined) ? "" : webMI.query["onMouseDownValue"];
var onMouseDownNode = (webMI.query["onMouseDownNode"] == undefined) ? "" : webMI.query["onMouseDownNode"];
var onMouseUpValue = (webMI.query["onMouseUpValue"] == undefined) ? "" : webMI.query["onMouseUpValue"];
var onMouseUpNode = (webMI.query["onMouseUpNode"] == undefined) ? "" : webMI.query["onMouseUpNode"];
var newValue = (webMI.query["value"] == undefined) ? "" : webMI.query["value"];
var tabHandler = webMI.callExtension("SYSTEM.LIBRARY.ATVISE.QUICKDYNAMICS.Tab Handler");
var tabIndex = (webMI.query["tabIndex"] == undefined) ? "" : webMI.query["tabIndex"];
var tooltip = (webMI.query["tooltip"] == undefined) ? "" : webMI.query["tooltip"];

var right = (webMI.query["right"] == undefined) ? "" : webMI.query["right"];
if (right.search(/SYSTEM\.SECURITY\.RIGHTS\./) != -1) {
	right = right.substring(23,right.length); //remove "prefix" SYSTEM.SECURITY.RIGHTS.
}

var active = false;
var hasRight = false;

if (right != "") {
	webMI.addEvent(webMI.data, "clientvariableschange", function(e) {
		hasRight=false;
		if (("username" in e) && (e.username != "")) {
				hasRight = webMI.hasRight(right);
		}
		deActivate();
	});
}

var activeValue = (webMI.query["activeValue"] == undefined) ? "" :webMI.query["activeValue"];
var activeNode = (webMI.query["activeNode"] == undefined) ? "" : webMI.query["activeNode"];
var nodeIsActive = false;

if ((activeNode != "") && (String(activeValue) != "")) {
	webMI.data.subscribe(activeNode, function(e) {
		var nodeActiveValue = e.value;
		if (typeof nodeActiveValue == "boolean") {
			nodeIsActive = (String(nodeActiveValue) == activeValue);
		} else if (typeof nodeActiveValue == "number") {
			try {
				var temp = parseFloat(activeValue);
				nodeIsActive = (nodeActiveValue == temp);
			} catch(e) {
				nodeIsActive = false;
			}
		} else {
			nodeIsActive = (nodeActiveValue == activeValue);
		}
		deActivate();
	});
} else {
	deActivate();
}

function deActivate() {
	if (right != "") {
		if ((String(activeValue) != "") && (activeNode != "")) {
			active=(nodeIsActive && hasRight);
		} else {
			active=hasRight;
		}
	} else {
		if ((String(activeValue) != "") && (activeNode != "")) {
			active=nodeIsActive;
		} else {
			active=true;
		}
	}
	if (active) {
		webMI.gfx.setFill("button_bg", fillColor);
		webMI.gfx.setVisible("button_stroke", null);
	} else {
		webMI.gfx.setFill("button_bg", fillColorInactive);
		webMI.gfx.setVisible("button_stroke", false);
	}
}

function release() {
	if (active) {
		webMI.gfx.setFill("button_stroke", "url(#linear_1)");
		webMI.gfx.setStroke("button_stroke", strokeNormal);
	}
}

function focusTH(){
	if (active) {
		webMI.gfx.setStroke("button_stroke", focusStrokeColor);
	}
}
function applyTH(){
	if (active) {
		if ((base != "") && (String(newValue) != "")) {
			if (newValue == "true") {
				newValue = true;
			} else if (newValue == "false") {
				newValue = false;
			} else {
				try {
					var temp = parseFloat(newValue);
					if (!isNaN(temp)) {
						newValue = temp;
					}
				} catch(e) {}
			}
			webMI.data.write(base, newValue);
		}
		webMI.trigger.fire("valuechanged", newValue, "");
	}
}
function backTH(){}
function arrowTH(dir){}
function keyHandler(keyTH,param2){
	if (keyTH == "focus"){
		focusTH();
	} else if (keyTH == "blur"){
		release();
	} else if (keyTH == "apply"){
		webMI.gfx.setFill("button_stroke", "url(#linear_2)");
		applyTH();
	} else if (keyTH == "releaseClick"){
		webMI.gfx.setFill("button_stroke", "url(#linear_1)");
	} else if (keyTH == "back"){
		backTH();
	} else if (keyTH == "arrow"){
		arrowTH(param2);
	} else if (keyTH == "isActive"){
		return active && param2(document.getElementById("button_clickarea").parentNode);
	}
}

webMI.addEvent("button_clickarea", "mousedown", function(e) {
var id = "button_clickarea";
var value = true;
return function(value) {
	if (active) {
		webMI.gfx.setFill("button_stroke", "url(#linear_2)");
		webMI.gfx.setStroke("button_stroke", strokePressed);
		if ((onMouseDownNode != "") && (String(onMouseDownValue) != "")) {
			if (onMouseDownValue == "true") {
				onMouseDownValue = true;
			} else if (onMouseDownValue == "false") {
				onMouseDownValue = false;
			} else {
				try {
					var temp = parseFloat(onMouseDownValue);
					if (!isNaN(temp)) {
						onMouseDownValue = temp;
					}
				} catch(e) {}
			}
			webMI.data.write(onMouseDownNode, onMouseDownValue);
		}
		webMI.trigger.fire("valuechangedMouseDown", onMouseDownValue, "");
	}
} (value);
});

webMI.addEvent("button_clickarea", "mouseup", function(e) {
var id = "button_clickarea";
var value = true;
return function(value) {
	release();
	if (active) {
		if ((onMouseUpNode != "") && (String(onMouseUpValue) != "")) {
			if (onMouseUpValue == "true") {
				onMouseUpValue = true;
			} else if (onMouseUpValue == "false") {
				onMouseUpValue = false;
			} else {
				try {
					var temp = parseFloat(onMouseUpValue);
					if (!isNaN(temp)) {
						onMouseUpValue = temp;
					}
				} catch(e) {}
			}
			webMI.data.write(onMouseUpNode, onMouseUpValue);
		}
		webMI.trigger.fire("valuechangedMouseUp", onMouseUpValue, "");
	}
} (value);
});

webMI.addEvent("button_clickarea", "mouseout", function(e) {
var id = "button_clickarea";
var value = true;
return function(value) {
	release();
} (value);
});

webMI.addEvent("button_clickarea", "click", function(e) {
var id = "button_clickarea";
var value = true;
return function(value) {
	if (active) {
		tabHandler.setCurrentIndex(keyHandler);
		if ((base != "") && (String(newValue) != "")) {
			if (newValue == "true") {
				newValue = true;
			} else if (newValue == "false") {
				newValue = false;
			} else {
				try {
					var temp = parseFloat(newValue);
					if (!isNaN(temp)) {
						newValue = temp;
					}
				} catch(e) {}
			}
			webMI.data.write(base, newValue);
		}
		webMI.trigger.fire("valuechanged", newValue, "");
	}
} (value);
});

webMI.addEvent("button_clickarea", "dragstart", function(e) {
	if (e.preventDefault) {
		e.preventDefault();
	}
});
webMI.addOnload(function() {
	var doc = document.getElementById("button_clickarea").ownerDocument;
	tabHandler.register(tabIndex,keyHandler,doc);
});

if (tooltip != ""){
	webMI.callExtension("SYSTEM.LIBRARY.ATVISE.QUICKDYNAMICS.Tooltip", {"auto":"true", "id":"button_clickarea", "text":tooltip});
}]]></script>
</svg>
