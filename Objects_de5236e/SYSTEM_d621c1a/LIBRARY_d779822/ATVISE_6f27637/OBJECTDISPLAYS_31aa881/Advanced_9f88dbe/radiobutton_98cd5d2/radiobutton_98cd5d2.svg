<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<svg version="1.2" xmlns:atv="http://webmi.atvise.com/2007/svgext" width="160" height="30" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
 <defs/>
 <title>Radiobutton</title>
 <desc>Allows multiple selection within a group.</desc>
 <metadata>
  <atv:parameter desc="base" behavior="mandatory" valuetype="address" name="base"/>
  <atv:parameter defaultvalue="" desc="alarm address" behavior="optional" valuetype="address" name="alarm"/>
  <atv:parameter desc="radio group id" behavior="optional" valuetype="string" name="radiogroupId"/>
  <atv:parameter config="Yes;No" defaultvalue="Yes" desc="enable status monitoring" behavior="optional" valuetype="enum" name="statusEnabled"/>
  <atv:parameter defaultvalue="" desc="fire status trigger" behavior="optional" valuetype="string" name="statusTrigger"/>
  <atv:parameter substitute="$LABEL$" defaultvalue="T{Radiobutton}" desc="label" behavior="optional" valuetype="trstring" name="label"/>
  <atv:parameter desc="value" behavior="optional" valuetype="string" name="value"/>
  <atv:parameter config="Arial;Courier;Verdana" substitute="$FONTFAMILY$" defaultvalue="Arial" group="Font" desc="family" behavior="optional" valuetype="enum" name="fontFamily"/>
  <atv:parameter config="6;7;8;9;10;11;12;14;16;18;20;22;24;26;28;36;48;72" substitute="$FONTSIZE$" defaultvalue="12" group="Font" desc="size" behavior="optional" valuetype="enum" name="fontSize"/>
  <atv:parameter substitute="$FONTCOLOR$" defaultvalue="SYSTEM.GLOBALS.atvFontColor" group="Font" desc="color" behavior="optional" valuetype="global" name="fontColor"/>
  <atv:parameter defaultvalue="false" group="Appearance" desc="preselect this option" behavior="optional" valuetype="bool" name="preselected"/>
  <atv:parameter substitute="$FILLCOLOR$" defaultvalue="SYSTEM.GLOBALS.atvFillColor" group="Appearance" desc="fill color" behavior="optional" valuetype="global" name="fillColor"/>
  <atv:parameter substitute="$SELECTAREAFILL$" defaultvalue="#ffffff" group="Appearance" desc="select area fill color" behavior="optional" valuetype="color" name="selectAreaFill"/>
  <atv:parameter defaultvalue="#f2f2f2" group="Appearance" desc="select area fill color pressed" behavior="optional" valuetype="color" name="selectAreaFillPressed"/>
  <atv:parameter defaultvalue="SYSTEM.GLOBALS.atvInactiveColor" group="Appearance" desc="fill color when inactive" behavior="optional" valuetype="global" name="fillColorInactive"/>
  <atv:parameter config="SYSTEM.LIBRARY.ATVISE.OBJECTDISPLAYS.Symbols.20x20" substitute="$SYMBOL$" defaultvalue="SYSTEM.LIBRARY.ATVISE.OBJECTDISPLAYS.Symbols.20x20.disc" group="Appearance" desc="symbol" behavior="optional" valuetype="display" name="symbol"/>
  <atv:parameter defaultvalue="SYSTEM.GLOBALS.atvSymbolColor" group="Appearance" desc="symbol color" behavior="optional" valuetype="global" name="symbolColor"/>
  <atv:parameter defaultvalue="#e5e5e5" group="Appearance" desc="stroke color pressed" behavior="optional" valuetype="color" name="strokePressed"/>
  <atv:parameter defaultvalue="#FFFFFF" group="Appearance" desc="focus stroke color" behavior="optional" valuetype="color" name="focusStrokeColor"/>
  <atv:parameter substitute="$BORDERCOLOR$" defaultvalue="SYSTEM.GLOBALS.atvBorderColor" group="Appearance" desc="border color" behavior="optional" valuetype="global" name="borderColor"/>
  <atv:parameter defaultvalue="SYSTEM.GLOBALS.atvStatusIndication" group="Appearance" desc="status indication" behavior="optional" valuetype="global" name="statusIndication"/>
  <atv:parameter defaultvalue="SYSTEM.GLOBALS.atvAlarmIndication" group="Appearance" desc="alarm indication" behavior="optional" valuetype="global" name="alarmIndication"/>
  <atv:parameter group="Options" desc="address to set" behavior="optional" valuetype="address" name="outputNode"/>
  <atv:parameter group="Options" desc="consistency group" behavior="optional" valuetype="string" name="consistencyGroup"/>
  <atv:parameter group="Options" desc="tab index" behavior="optional" valuetype="number" name="tabIndex"/>
  <atv:parameter group="Options" desc="tooltip" behavior="optional" valuetype="trstring" name="tooltip"/>
  <atv:parameter config="SYSTEM.SECURITY.RIGHTS" group="Security" desc="necessary right" behavior="optional" valuetype="address" name="right"/>
  <atv:parameter group="Security" desc="activation address" behavior="optional" valuetype="address" name="activeNode"/>
  <atv:parameter group="Security" desc="activation value" behavior="optional" valuetype="string" name="activeValue"/>
  <atv:gridconfig width="2" enabled="true" height="2" gridstyle="lines"/>
  <atv:snapconfig width="2" enabled="true" height="2"/>
 </metadata>
 <text id="radiobutton_label" font-size="$FONTSIZE$" atv:bindbr="0,0.5" fill="$FONTCOLOR$" atv:refpy="18" atv:refpx="344.897" font-family="$FONTFAMILY$" x="38" y="19.25" atv:bindtl="0,0.5" text-anchor="start">$LABEL$</text>
 <g id="radiobutton_clickarea" atv:refpy="15" atv:refpx="15">
  <circle id="id_1" cx="15" r="14.5" atv:bindbr="0,0.5" fill="$FILLCOLOR$" stroke="$BORDERCOLOR$" atv:refpy="0" atv:refpx="0" stroke-width="1" cy="15" atv:bindtl="0,0.5"/>
  <circle id="radiobutton_bg" cx="15" r="11.776" atv:bindbr="0,0.5" fill="$SELECTAREAFILL$" stroke="none" atv:refpy="15" atv:refpx="15" stroke-width="2" cy="15" atv:bindtl="0,0.5"/>
  <circle id="blinking_frame" cx="15" r="11.776" atv:bindbr="0,0.5" fill="none" stroke="none" atv:refpy="15" atv:refpx="15" stroke-width="2" cy="15" atv:bindtl="0,0.5"/>
  <circle id="focus_frame" cx="15" r="13.4" atv:bindbr="0,0.5" fill="none" stroke="none" atv:refpy="15" atv:refpx="15" stroke-width="1.2" cy="15" atv:bindtl="0,0.5"/>
  <svg id="radiobutton_symbol" width="20" transform="matrix(1.175,0,0,1.175,0,0)" atv:bindbr="0,0.5" atv:refpy="34" height="20" atv:refpx="20" x="2.75" y="2.8" atv:bindtl="0,0.5" xlink:href="$SYMBOL$">
   <atv:argument value="#D7D7D7" name="stroke"/>
   <atv:overwrite id="id_0" stroke="none"/>
   <atv:argument prefix="symbolColor" name="symbolColor"/>
  </svg>
 </g>
 <script type="text/ecmascript"><![CDATA[var selectedItem = null;
var base = (webMI.query["base"] == undefined) ? "" : webMI.query["base"];
var setValue = (webMI.query["value"] == undefined) ? "" : webMI.query["value"];
var outputNode = (webMI.query["outputNode"] == undefined) ? "" : webMI.query["outputNode"];
var fontColor = webMI.query["fontColor"];
var strokePressed = webMI.query["strokePressed"];
var focusStrokeColor = webMI.query["focusStrokeColor"];
var preselected = webMI.query["preselected"];
var selectAreaFill = webMI.query["selectAreaFill"];
var selectAreaFillPressed = webMI.query["selectAreaFillPressed"];
var fillColor = webMI.query["fillColor"];
var fillColorInactive = webMI.query["fillColorInactive"];
var tabHandler = webMI.callExtension("SYSTEM.LIBRARY.ATVISE.QUICKDYNAMICS.Tab Handler");
var tabIndex = (webMI.query["tabIndex"] == undefined) ? "" : webMI.query["tabIndex"];
var tooltip = (webMI.query["tooltip"] == undefined) ? "" : webMI.query["tooltip"];
var curValue;
var consistencyGroup = webMI.query["consistencyGroup"];
var alarmToSubscribe = webMI.query["alarm"];
var alarmIndication = webMI.query["alarmIndication"];
var statusEnabled = webMI.query["statusEnabled"];
var statusTrigger = webMI.query["statusTrigger"];
var statusIndication = webMI.query["statusIndication"];
var activeIndicators = {};

if (consistencyGroup)
	var consistencyHandler = webMI.callExtension("SYSTEM.LIBRARY.ATVISE.QUICKDYNAMICS.Consistency Handler");

webMI.gfx.setVisible("radiobutton_symbol", false);

var right = (webMI.query["right"] == undefined) ? "" : webMI.query["right"];
if (right.search(/SYSTEM\.SECURITY\.RIGHTS\./) != -1) {
	right = right.substring(23,right.length); //remove "prefix" SYSTEM.SECURITY.RIGHTS.
}

var active = false;
var hasRight = false;

if (right != "") {
	webMI.addEvent(webMI.data, "clientvariableschange", function(e) {
		hasRight=false;
		if (("username" in e) && (e.username != "")) {
				hasRight = webMI.hasRight(right);
		}
		deActivate();
	});
}

var activeValue = (webMI.query["activeValue"] == undefined) ? "" :webMI.query["activeValue"];
var activeNode = (webMI.query["activeNode"] == undefined) ? "" : webMI.query["activeNode"];
var nodeIsActive = false;

if ((activeNode != "") && (String(activeValue) != "")) {
	webMI.data.subscribe(activeNode, function(e) {
		var nodeActiveValue = e.value;
		if (typeof nodeActiveValue == "boolean") {
			nodeIsActive = (String(nodeActiveValue) == activeValue);
		} else if (typeof nodeActiveValue == "number") {
			try {
				var temp = parseFloat(activeValue);
				nodeIsActive = (nodeActiveValue == temp);
			} catch(e) {
				nodeIsActive = false;
			}
		} else {
			nodeIsActive = (nodeActiveValue == activeValue);
		}
		if (typeof e.status != "undefined")
			handleStatus(e.status);
		deActivate();
	});
} else {
	deActivate();
}

function deActivate(forceDeActivate) {
	if (typeof forceDeActivate !== "undefined" && forceDeActivate){
		active = false;
	} else if (right != "") {
		if ((String(activeValue) != "") && (activeNode != "")) {
			active=(nodeIsActive && hasRight);
		} else {
			active=hasRight;
		}
	} else {
		if ((String(activeValue) != "") && (activeNode != "")) {
			active=nodeIsActive;
		} else {
			active=true;
		}
	}
	if (active) {
		webMI.gfx.setFill("radiobutton_bg", selectAreaFill);
	} else {
		webMI.gfx.setFill("radiobutton_bg", fillColorInactive);
	}
}

function handleStatus(status) {
	if (statusEnabled != "Yes")
		return;

	if (statusTrigger != "") {
		webMI.trigger.fire(statusTrigger, status);
	} else {
		if (typeof statusIndication["ItemStatusBad"] == "undefined")
			statusIndication = {"ItemStatusBad": {color: "#ffff00", interval: "250"}};

		if (status == 0 || (status & 0xC0000000).toString(16) == 0)	//Good value state
			delete activeIndicators["status"];
		else if ((status & 0x80000000).toString(16) != 0)			//Bad value state
			activeIndicators["status"] = {color: statusIndication["ItemStatusBad"].color, interval: parseInt(statusIndication["ItemStatusBad"].interval)};
		else if ((status & 0xC0000000).toString(16) == 40000000)	//Uncertain value state
			activeIndicators["status"] = {color: statusIndication["ItemStatusBad"].color, interval: parseInt(statusIndication["ItemStatusBad"].interval)};
		else														//Unknown value state
			activeIndicators["status"] = {color: statusIndication["ItemStatusBad"].color, interval: parseInt(statusIndication["ItemStatusBad"].interval)};

		setIndicator();
	}
}

function initAlarm(address) {
	if (alarmIndication == "")
		alarmIndication = {};

	if (typeof alarmIndication["AlarmStatusOnUnacknowledged"] == "undefined")
		alarmIndication["AlarmStatusOnUnacknowledged"] = {color: "#ff0000", interval: "250"};

	if (typeof alarmIndication["AlarmStatusOnAcknowledged"] == "undefined")
		alarmIndication["AlarmStatusOnAcknowledged"] = {color: "#ff0000", interval: "500"};

	if (typeof alarmIndication["AlarmStatusOffUnacknowledged"] == "undefined")
		alarmIndication["AlarmStatusOffUnacknowledged"] = {color: "#ff0000", interval: "750"};

	if (typeof alarmIndication["AlarmStatusOnOffUnacknowledged"] == "undefined")
		alarmIndication["AlarmStatusOnOffUnacknowledged"] = {color: "#ff0000", interval: "1500"};

	webMI.alarm.subscribe(address, function(e) {
		if (e.state == 1)
			activeIndicators["alarm"] = {color: alarmIndication["AlarmStatusOnUnacknowledged"].color, interval: parseInt(alarmIndication["AlarmStatusOnUnacknowledged"].interval)};
		else if (e.state == 2)
			activeIndicators["alarm"] = {color: alarmIndication["AlarmStatusOnAcknowledged"].color, interval: parseInt(alarmIndication["AlarmStatusOnAcknowledged"].interval)};
		else if (e.state == 3)
			activeIndicators["alarm"] = {color: alarmIndication["AlarmStatusOffUnacknowledged"].color, interval: parseInt(alarmIndication["AlarmStatusOffUnacknowledged"].interval)};
		else if (e.state == 5)
			activeIndicators["alarm"] = {color: alarmIndication["AlarmStatusOnOffUnacknowledged"].color, interval: parseInt(alarmIndication["AlarmStatusOnOffUnacknowledged"].interval)};
		else
			delete activeIndicators["alarm"];

		setIndicator();
	});
}

if (alarmToSubscribe != "")
	initAlarm(alarmToSubscribe);

var currentIndicator = "";
function setIndicator() {
	if (currentIndicator != "")
		return;

	if (activeIndicators["trigger"]) {
		currentIndicator = "trigger";
	} else if (activeIndicators["status"]) {
		currentIndicator = "status";
	} else if (activeIndicators["alarm"]) {
		currentIndicator = "alarm";
	} else {
		currentIndicator = "";
		return;
	}

	indicationActive = true;

	webMI.gfx.setStroke("blinking_frame", activeIndicators[currentIndicator].color);
	webMI.gfx.setVisible("blinking_frame", null);

	var interval = activeIndicators[currentIndicator].interval;
	setTimeout(function() {
		webMI.gfx.setVisible("blinking_frame", false);
		setTimeout(function() {
			currentIndicator = "";
			setIndicator();
		}, interval);
	}, interval);
}

if (base != "") {
	if (consistencyGroup) {
		consistencyHandler.register(consistencyGroup, base, update);
	} else {
		webMI.data.subscribe(base, function(e) {
			curValue = e.value;
			if (typeof curValue == "boolean") setValue=(setValue=="true"||setValue=="1");
			if (String(setValue) != "") {
				if (curValue == setValue) {
					webMI.gfx.setVisible("radiobutton_symbol", null);
				} else {
					webMI.gfx.setVisible("radiobutton_symbol", false);
				}
			}
			if (typeof e.status != "undefined")
				handleStatus(e.status);
		});
	}
}

function focusTH(){
	if (active) {
		webMI.gfx.setStroke("focus_frame", focusStrokeColor);
	}
}

function blurTH(){
	if (active) {
		webMI.gfx.setStroke("focus_frame", "none");
	}
}

function applyTH(){
	if (active) {
		var value = (String(setValue) != "") ? setValue : curValue;
		var name = webMI.gfx.getText("radiobutton_label");
		webMI.trigger.fire(["radioClicked_"+webMI.query["radiogroupId"]], {name: name, value: value});
	}
}

function backTH(){}

function arrowTH(dir){}

function keyHandler(keyTH,param2){
	if (keyTH == "focus"){
		focusTH();
	} else if (keyTH == "blur"){
		blurTH();
	} else if (keyTH == "apply"){
		applyTH();
	} else if (keyTH == "space"){
		applyTH();
	} else if (keyTH == "back"){
		backTH();
	} else if (keyTH == "arrow"){
		arrowTH(param2);
	} else if (keyTH == "isActive"){
		return active && param2(document.getElementById("radiobutton_clickarea").parentNode);
	}
}

/**
 * Radiogroup event that is triggered when an option is clicked
*/
webMI.trigger.connect("radioClicked_"+webMI.query["radiogroupId"], function(e) {
	var value = e.value;
	var name = webMI.gfx.getText("radiobutton_label");

	if (name == value.name) {
		selectedItem = value;

		if (base == "" || consistencyGroup)
			webMI.gfx.setVisible("radiobutton_symbol", null);

		webMI.trigger.fire("valuechanged", selectedItem.value, "");

		if (outputNode != "" && !consistencyGroup) {
			webMI.data.write(outputNode, selectedItem.value);
		} else {
			if (base != "" && !consistencyGroup)
				webMI.data.write(base, selectedItem.value);
		}

		if (consistencyGroup)
			consistencyHandler.set(consistencyGroup, base, selectedItem.value);
	} else {
		if (base == "" || consistencyGroup)
			webMI.gfx.setVisible("radiobutton_symbol", false);
	}
});

webMI.trigger.connect("com.atvise.setBlinking", function(e){
	if (e.value == "none"){
		delete activeIndicators["trigger"];
	} else {
		activeIndicators["trigger"] = {color: e.value, interval: 500};
	}	
	setIndicator();
});

function update(value) {
	var tmpValue = (String(setValue) != "") ? setValue : curValue;

	if (value == tmpValue) {
		webMI.trigger.fire("valuechanged", value, "");
		webMI.gfx.setVisible("radiobutton_symbol", null);
	} else {
		webMI.gfx.setVisible("radiobutton_symbol", false);
	}
}

if (preselected == "true" && base == "") {
	if (active) {
		var value = (String(setValue) != "") ? setValue : curValue;
		var name = webMI.gfx.getText("radiobutton_label");
		webMI.trigger.fire(["radioClicked_"+webMI.query["radiogroupId"]], {name: name, value: value});
	}
	preselected = "false";
}

webMI.addEvent("radiobutton_clickarea", "click", function(e) {
	if (active) {
		tabHandler.setCurrentIndex(keyHandler);
		var value = (String(setValue) != "") ? setValue : curValue;
		var name = webMI.gfx.getText("radiobutton_label");
		webMI.trigger.fire(["radioClicked_"+webMI.query["radiogroupId"]], {name: name, value: value});
	}
});
/*
	Events for optical representation
*/

webMI.addEvent("radiobutton_clickarea", "mousedown", function(e) {
	var value = true;
	return function(value) {
		if (active) {
			webMI.gfx.setStroke("focus_frame", strokePressed);
			webMI.gfx.setFill("radiobutton_bg", selectAreaFillPressed);
		}
	} (value);
});

function release() {
	if (active) {
		webMI.gfx.setStroke("focus_frame", "none");
		webMI.gfx.setFill("radiobutton_bg", selectAreaFill);
	}
}

webMI.addEvent("radiobutton_clickarea", ["mouseup","mouseout"], function(e) {
	var value = true;
	return function(value) {
		release();
	} (value);
});

/*
webMI.addEvent("radiobutton_clickarea", "mouseout", function(e) {
	var value = true;
	return function(value) {
		release();
	} (value);
});
*/

webMI.addEvent("radiobutton_clickarea", "dragstart", function(e) {
	if (e.preventDefault) {
		e.preventDefault();
	}
});
webMI.addOnload(function() {
	var doc = document.getElementById("radiobutton_clickarea").ownerDocument;
	tabHandler.register(tabIndex,keyHandler,doc);
});

webMI.trigger.connect("com.atvise.setActive",function(e){
	if (e.value){
		deActivate();
	}  else {
		deActivate(true);
	}
});

if (tooltip != ""){
	webMI.callExtension("SYSTEM.LIBRARY.ATVISE.QUICKDYNAMICS.Tooltip", {"auto":"true", "id":"radiobutton_clickarea", "text":tooltip});
}]]></script>
</svg>
