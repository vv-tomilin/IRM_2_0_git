<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<svg width="45" version="1.2" xmlns:atv="http://webmi.atvise.com/2007/svgext" xmlns="http://www.w3.org/2000/svg" height="45" xmlns:xlink="http://www.w3.org/1999/xlink">
 <defs>
  <linearGradient x2="1" x1="1" y2="1" y1="0" gradientUnits="objectBoundingBox" id="linear_1">
   <stop offset="0" stop-color="#ffffff" stop-opacity="0"/>
   <stop offset="1" stop-color="#ffffff" stop-opacity="0"/>
  </linearGradient>
  <linearGradient x2="1" x1="1" y2="1" y1="0" gradientUnits="objectBoundingBox" id="linear_2">
   <stop offset="0" stop-color="#ffffff" stop-opacity="0.35"/>
   <stop offset="1" stop-color="#ffffff" stop-opacity="0.35"/>
  </linearGradient>
 </defs>
 <title>Button Switch Language</title>
 <desc>This button is used for switching to other languages.</desc>
 <metadata>
  <atv:parameter valuetype="address" behavior="hidden" name="base" desc="base"/>
  <atv:parameter group="Appearance" valuetype="display" behavior="optional" name="symbol" defaultvalue="SYSTEM.LIBRARY.ATVISE.OBJECTDISPLAYS.Symbols.language" config="SYSTEM.LIBRARY.ATVISE.OBJECTDISPLAYS.Symbols.20x20" desc="symbol" substitute="$SYMBOL$"/>
  <atv:parameter group="Appearance" valuetype="display" behavior="optional" name="symbolPressed" defaultvalue="SYSTEM.LIBRARY.ATVISE.OBJECTDISPLAYS.Symbols.language" config="SYSTEM.LIBRARY.ATVISE.OBJECTDISPLAYS.Symbols.20x20" desc="symbol pressed" substitute="$SYMBOLPRESSED$"/>
  <atv:parameter group="Appearance" valuetype="global" behavior="optional" name="symbolColor" defaultvalue="SYSTEM.GLOBALS.atvSymbolColor" desc="symbol color"/>
  <atv:parameter group="Appearance" valuetype="global" behavior="optional" name="symbolColorPressed" defaultvalue="SYSTEM.GLOBALS.atvSymbolColor" desc="symbol color pressed"/>
  <atv:parameter group="Appearance" valuetype="number" behavior="optional" name="symbolScaling" defaultvalue="100" desc="symbol scaling (%)" substitute=""/>
  <atv:parameter group="Appearance" valuetype="global" behavior="optional" name="fill" defaultvalue="SYSTEM.GLOBALS.atvFillColor" desc="fill color" substitute="$FILLCOLOR$"/>
  <atv:parameter group="Appearance" valuetype="global" behavior="optional" name="borderColor" defaultvalue="SYSTEM.GLOBALS.atvBorderColor" desc="border color" substitute="$BORDERCOLOR$"/>
  <atv:parameter group="Appearance" valuetype="color" behavior="optional" name="strokePressed" defaultvalue="#ffffff" desc="stroke color pressed"/>
  <atv:parameter group="Appearance" valuetype="string" behavior="optional" name="contextMenuStyle" defaultvalue="" desc="context menu style"/>
  <atv:gridconfig enabled="true" width="20" height="20" gridstyle="lines"/>
  <atv:snapconfig enabled="true" width="10" height="10"/>
 </metadata>
 <g atv:refpy="22.5" id="button_clickarea" atv:refpx="22.5">
  <rect atv:bindtl="0,0" width="44.5" atv:refpy="24.636" stroke-width="0.5" atv:dynamic="true" stroke="$BORDERCOLOR$" rx="3" height="44.5" atv:bindbr="1,1" ry="3" fill="$FILLCOLOR$" y="0.25" id="id_0" x="0.25" atv:refpx="22.64"/>
  <rect atv:bindtl="0,0" width="39.5" atv:refpy="-146.051" stroke-width="0.5" stroke="none" rx="3" height="39.5" atv:bindbr="1,1" ry="3" fill="#FFFFFF" y="2.75" id="id_2" x="2.75" atv:refpx="23.957"/>
  <rect atv:bindtl="0,0" width="37" atv:refpy="60.136" stroke-width="0.5" stroke="none" rx="3" height="37" atv:bindbr="1,1" ry="3" fill="$FILLCOLOR$" y="4" id="button_bg" x="4" atv:refpx="24.555"/>
  <rect atv:bindtl="0,0" width="37" atv:refpy="26.5" stroke-width="2" stroke="none" rx="3" height="37" atv:bindbr="1,1" ry="3" fill="url(#linear_1)" y="4" id="button_stroke" x="4" atv:refpx="22.5"/>
  <svg atv:bindtl="0.5,0.5" visibility="hidden" transform="matrix(1.5312,0,0,1.5312,0,0)" width="20" atv:refpy="45" xlink:href="$SYMBOLPRESSED$" height="20" atv:bindbr="0.5,0.5" y="4.694" id="button_symbol_pressed" x="4.694" atv:refpx="160.308">
   <atv:argument prefix="symbolColorPressed" name="symbolColor"/>
  </svg>
  <svg atv:bindtl="0.5,0.5" transform="matrix(1.5312,0,0,1.5312,0,0)" width="20" atv:refpy="45" xlink:href="$SYMBOL$" height="20" atv:bindbr="0.5,0.5" y="4.694" id="button_symbol" x="4.694" atv:refpx="160.308">
   <atv:argument prefix="symbolColor" name="symbolColor"/>
  </svg>
 </g>
 <script type="text/ecmascript"><![CDATA[var contextMenuStyle = {
	maxRows: 10,
	fontFamily: "Arial",
	fontSize: 12,
	fontFill: "#575757",
	width: 140,
	fill: "#ffffff",
	stroke: "#d7d7d7",
	strokeWidth: 1,
	hoverFill: "#e5e5e5",
	closeTime: 0,
	zIndex: 100,
	showType: "right"
};

if (webMI.query["contextMenuStyle"]) {
	var queryContextMenuStyle = JSON.parse(webMI.query["contextMenuStyle"]);
	Object.assign(contextMenuStyle,queryContextMenuStyle);
}
if (webMI.query["context_menu_font_family"]) {
	contextMenuStyle["fontFamily"] = webMI.query["context_menu_font_family"];
}
if (webMI.query["context_menu_font_color"]) {
	contextMenuStyle["fontFill"] = webMI.query["context_menu_font_color"];
}
if (webMI.query["context_menu_font_size"] && true) {
	contextMenuStyle["fontSize"] = 12; // parseInt(webMI.query["context_menu_font_size"], 10);
}
if (webMI.query["context_menu_fill_color"]) {
	contextMenuStyle["itemFill"] = webMI.query["context_menu_fill_color"];
}
if (webMI.query["context_menu_hover_color"]) {
	contextMenuStyle["hoverFill"] = webMI.query["context_menu_hover_color"];
}


var x = 45;
var y = 0;
if (contextMenuStyle.x) x = contextMenuStyle.x;
if (contextMenuStyle.y) y = contextMenuStyle.y;

var strokeNormal = "none";
var strokePressed = webMI.query["strokePressed"];
var display = webMI.query["display"];
var active = true;
var symbolScaling = parseInt(webMI.query["symbolScaling"],10);

webMI.addOnload(function () {
	/* set and scale icon position */
	var FRAME = {};
	FRAME.element = document.getElementById("id_0");
	FRAME.height = parseInt(FRAME.element.getAttribute("height"));
	FRAME.width = parseInt(FRAME.element.getAttribute("width"));

	var SYMBOL = {};
	SYMBOL.element = document.getElementById("button_clickarea").parentNode;
	SYMBOL.height = parseInt(SYMBOL.element.getAttribute("height"));
	SYMBOL.width = parseInt(SYMBOL.element.getAttribute("width"));

	if(symbolScaling != 0 && symbolScaling != 100){
		var scale = {};
		scale.x = FRAME.width / SYMBOL.width;
		scale.y = FRAME.height / SYMBOL.height;
		scale.value = symbolScaling / 100;
	
		var offset = {};
		offset.x = 20 * (scale.x - scale.value) / 2;
		offset.y = 20 * (scale.y - scale.value) / 2;
	
		var icon = document.getElementById("button_symbol");
		icon.setAttribute("viewBox", "0,0,20,20");
		icon.setAttribute("x", 4.694 * scale.x + offset.x);
		icon.setAttribute("y", 4.694 * scale.y + offset.y);
		icon.setAttribute("width", 20 * scale.value);
		icon.setAttribute("height", 20 * scale.value);
	}
});

function release() {
	if (active) {
		webMI.gfx.setFill("button_stroke", "url(#linear_1)");
		webMI.gfx.setVisible("button_symbol", true);
		webMI.gfx.setVisible("button_symbol_pressed", false);
	}
}

webMI.addEvent("button_clickarea", "mousedown", function(e) {
var id = "button_clickarea";
var value = true;
return function(value) {
	if (active) {
		webMI.gfx.setFill("button_stroke", "url(#linear_2)");
		webMI.gfx.setVisible("button_symbol", false);
		webMI.gfx.setVisible("button_symbol_pressed", true);
	}
} (value);
});

webMI.addEvent("button_clickarea", "mouseup", function(e) {
var id = "button_clickarea";
var value = true;
return function(value) {
	release();
} (value);
});

webMI.addEvent("button_clickarea", "mouseout", function(e) {
var id = "button_clickarea";
var value = true;
return function(value) {
	release();
} (value);
});

webMI.addEvent("button_clickarea", "dragstart", function(e) {
	if (e.preventDefault) {
		e.preventDefault();
	}
});

var menuObj = {};
menuObj["languagemenu"] = "languagemenu";
webMI.callExtension("SYSTEM.LIBRARY.ATVISE.QUICKDYNAMICS.Open Context Menu", {"id":"button_clickarea", menuObj: menuObj, "outputNode":null, "x":x, "y":y, minWidth: contextMenuStyle.width, onEvent: "click", "style": contextMenuStyle});
]]></script>
</svg>
