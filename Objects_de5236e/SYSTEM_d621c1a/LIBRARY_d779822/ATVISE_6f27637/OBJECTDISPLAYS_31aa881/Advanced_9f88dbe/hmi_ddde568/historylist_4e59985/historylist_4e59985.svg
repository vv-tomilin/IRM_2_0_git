<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<svg xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://www.w3.org/2000/svg" xmlns:atv="http://webmi.atvise.com/2007/svgext" height="680" version="1.2" width="1280">
 <defs/>
 <rect atv:refpx="640" x="0" y="-0.5" rx="0" stroke-width="1" height="115" stroke="#575757" ry="0" fill="$FILLCOLOR$" id="filters_bg" atv:refpy="1.886" width="1280"/>
 <g atv:refpx="512" transform="matrix(1,0,0,1,0,-2)" id="group_to" atv:refpy="25">
  <text atv:refpx="401.5" x="429" y="30" font-size="14" font-family="Arial" text-anchor="end" fill="$FONTCOLOR$" id="id_4" atv:refpy="25">T{To}:</text>
  <svg xlink:href="SYSTEM.LIBRARY.ATVISE.OBJECTDISPLAYS.Advanced.picker_date" atv:refpx="489.227" x="432" y="10" height="30" id="date_to" atv:refpy="25" width="160">
   <atv:argument value="to" name="name"/>
   <atv:argument value="2" name="tabIndex"/>
  </svg>
 </g>
 <svg xlink:href="SYSTEM.LIBRARY.ATVISE.OBJECTDISPLAYS.Advanced.picker_date" atv:refpx="260" x="190" y="8" height="30" id="date_from" atv:refpy="18" width="160">
  <atv:argument value="from" name="name"/>
  <atv:argument value="1" name="tabIndex"/>
 </svg>
 <text atv:refpx="150.5" x="187" y="28" font-size="14" font-family="Arial" text-anchor="end" fill="$FONTCOLOR$" id="lbl_from" atv:refpy="23">T{From}:</text>
 <desc>Provides a list of historical data as a table.</desc>
 <title>Historylist</title>
 <metadata>
  <atv:parameter behavior="mandatory" defaultvalue="history_table" desc="table ID" name="tableID" valuetype="string"/>
  <atv:parameter group="" behavior="optional" defaultvalue="30" desc="table header height" name="header_height" valuetype="number"/>
  <atv:parameter group="" behavior="optional" defaultvalue="20" desc="table row height" name="row_height" valuetype="number"/>
  <atv:parameter group="Columns" behavior="mandatory" scope="" defaultvalue="SYSTEM.GLOBALS.atvObjectDisplays.Historylist.Columns" substitute="" desc="configuration" name="columns" valuetype="global"/>
  <atv:parameter group="Font" behavior="optional" defaultvalue="Arial" desc="font family" name="font_family" config="Arial;Courier;Tahoma;Verdana" valuetype="enum"/>
  <atv:parameter group="Font" behavior="optional" defaultvalue="SYSTEM.GLOBALS.atvFontColor" substitute="$FONTCOLOR$" desc="font color" name="globalFontColor" valuetype="global"/>
  <atv:parameter group="Font" behavior="optional" defaultvalue="12" desc="table header font size" name="header_text_size" valuetype="number"/>
  <atv:parameter group="Font" behavior="optional" defaultvalue="12" desc="table row font size" name="row_text_size" valuetype="number"/>
  <atv:parameter group="Font" behavior="optional" defaultvalue="12" desc="table detail font size" name="detail_text_size" valuetype="number"/>
  <atv:parameter group="Font" behavior="optional" defaultvalue="12" desc="table footer font size" name="footer_text_size" valuetype="number"/>
  <atv:parameter group="Appearance" behavior="optional" defaultvalue="SYSTEM.GLOBALS.atvFillColor" substitute="$FILLCOLOR$" desc="fill color" name="globalFillColor" valuetype="global"/>
  <atv:parameter group="Appearance" behavior="optional" defaultvalue="SYSTEM.GLOBALS.atvBorderColor" desc="border color" name="globalBorderColor" valuetype="global"/>
  <atv:parameter group="Appearance" behavior="optional" defaultvalue="SYSTEM.GLOBALS.atvSymbolColor" substitute="$SYMBOLCOLOR$" desc="symbol color" name="globalSymbolColor" valuetype="global"/>
  <atv:parameter group="Appearance" behavior="optional" defaultvalue="SYSTEM.GLOBALS.atvObjectDisplays.Tables.ColorConfig" desc="table colors" name="globalColorConfig" valuetype="global"/>
  <atv:parameter group="Appearance" behavior="optional" defaultvalue="atviseTheme" desc="custom theme" name="theme_class" valuetype="string"/>
  <atv:parameter group="Options" behavior="optional" defaultvalue="continue" desc="data mode" name="data_mode" config="continue;triggered" valuetype="enum"/>
  <atv:parameter group="Options" behavior="optional" defaultvalue="10000" desc="data per request" name="num_rows" valuetype="number"/>
  <atv:parameter group="Options" behavior="optional" defaultvalue="250000" desc="data limitation" name="truncate" valuetype="number"/>
  <atv:parameter group="Options" behavior="optional" defaultvalue="all" desc="detail mode" name="detail_mode" config="alarm;value;all" valuetype="enum"/>
  <atv:parameter group="Options" behavior="optional" defaultvalue="true" desc="paging" name="paging" valuetype="bool"/>
  <atv:parameter group="Options" behavior="optional" defaultvalue="true" desc="filter bar enabled" name="filterBar" valuetype="bool"/>
  <atv:parameter group="Options" behavior="optional" defaultvalue="false" desc="filter regular expressions" name="filterRegExp" valuetype="bool"/>
  <atv:parameter group="Options" behavior="optional" defaultvalue="false" desc="filter use placeholder" name="filterStar" valuetype="bool"/>
  <atv:parameter group="Options" behavior="optional" defaultvalue="false" desc="filter case sensitive" name="filterCaseSensitive" valuetype="bool"/>
  <atv:parameter group="Options" behavior="optional" defaultvalue="1" desc="filter minimum length" name="filterLength" valuetype="number"/>
  <atv:parameter group="Options" behavior="optional" defaultvalue="1000" desc="filter delay [ms]" name="filterDelay" valuetype="number"/>
  <atv:parameter group="Options" behavior="optional" defaultvalue="false" desc="cell linebreak" name="linebreak" valuetype="bool"/>
  <atv:parameter group="Options" behavior="optional" defaultvalue="true" desc="columns reorderable" name="columnReorder" valuetype="bool"/>
  <atv:parameter group="Options" behavior="optional" defaultvalue="true" desc="multiselect on cell click" name="multicellselect" valuetype="bool"/>
  <atv:parameter group="Menu options" behavior="optional" defaultvalue="true" desc="show menu" name="showMenu" valuetype="bool"/>
  <atv:parameter group="Menu options" behavior="optional" defaultvalue="T{Export CSV}" desc="custom menu title" name="showMenuCustomTitle" valuetype="string"/>
  <atv:parameter group="Menu options" behavior="optional" defaultvalue="true" desc="show picker menu" name="showMenuPicker" valuetype="bool"/>
  <atv:parameter group="Menu options" behavior="optional" defaultvalue="T{Columns}" desc="picker menu title" name="showMenuPickerTitle" valuetype="string"/>
  <atv:parameter group="Menu options" behavior="optional" defaultvalue="300" desc="menu height" name="menuHeight" valuetype="number"/>
  <atv:parameter group="Menu options" behavior="optional" defaultvalue="250" desc="menu width" name="menuWidth" valuetype="number"/>
  <atv:parameter group="Appearance" behavior="optional" defaultvalue="SYSTEM.GLOBALS.atvStatusIndication" desc="status indication" name="atvStatusIndication" valuetype="global"/>
  <atv:parameter group="Appearance" behavior="optional" defaultvalue="SYSTEM.LIBRARY.ATVISE.OBJECTDISPLAYS.Symbols.alarmlist.shelve" substitute="$SHELVE$" desc="shelve symbol" name="shelveSymbol" valuetype="string"/>
  <atv:parameter group="Appearance" behavior="optional" defaultvalue="SYSTEM.LIBRARY.ATVISE.OBJECTDISPLAYS.Symbols.alarmlist.shelve" substitute="$UNSHELVED$" desc="unshelved symbol" name="unshelvedSymbol" valuetype="string"/>
  <atv:parameter group="Appearance" behavior="optional" defaultvalue="SYSTEM.LIBRARY.ATVISE.OBJECTDISPLAYS.Symbols.alarmlist.shelveOnce" substitute="$ONESHOTSHELVED$" desc="one shot shelved symbol" name="oneShotShelvedSymbol" valuetype="string"/>
  <atv:parameter group="Appearance" behavior="optional" defaultvalue="SYSTEM.LIBRARY.ATVISE.OBJECTDISPLAYS.Symbols.alarmlist.shelveTime" substitute="$TIMESHELVED$" desc="timed shelved symbol" name="timeShelvedSymbol" valuetype="string"/>
  <atv:parameter group="Appearance" behavior="optional" defaultvalue="SYSTEM.LIBRARY.ATVISE.OBJECTDISPLAYS.Symbols.alarmlist.suppress" substitute="$SUPPRESSED$" desc="suppressed symbol" name="suppressedSymbol" valuetype="string"/>
  <atv:parameter group="Appearance" behavior="optional" defaultvalue="SYSTEM.LIBRARY.ATVISE.OBJECTDISPLAYS.Symbols.alarmlist.suppress" substitute="$UNSUPPRESSED$" desc="unsuppressed symbol" name="unsuppressedSymbol" valuetype="string"/>
  <atv:parameter group="Appearance" behavior="optional" defaultvalue="SYSTEM.LIBRARY.ATVISE.OBJECTDISPLAYS.Symbols.alarmlist.enabled" substitute="$ENABLED$" desc="enabled symbol" name="enabledSymbol" valuetype="string"/>
  <atv:parameter group="Appearance" behavior="optional" defaultvalue="SYSTEM.LIBRARY.ATVISE.OBJECTDISPLAYS.Symbols.alarmlist.enabled" substitute="$DISABLED$" desc="disabled symbol" name="disabledSymbol" valuetype="string"/>
  <atv:parameter group="Appearance" behavior="optional" defaultvalue="SYSTEM.LIBRARY.ATVISE.OBJECTDISPLAYS.Symbols.alarmlist.confirm" substitute="$CONFIRMED$" desc="confirmed symbol" name="confirmedSymbol" valuetype="string"/>
  <atv:parameter group="Appearance" behavior="optional" defaultvalue="SYSTEM.LIBRARY.ATVISE.OBJECTDISPLAYS.Symbols.alarmlist.confirm" substitute="$UNCONFIRMED$" desc="unconfirmed symbol" name="unconfirmedSymbol" valuetype="string"/>
  <atv:parameter group="Default filter" behavior="optional" defaultvalue="60" desc="start time (Value in seconds to go back from the current time)" name="starttime" valuetype="number"/>
  <atv:parameter group="Default filter" behavior="optional" defaultvalue="" desc="min. priority" name="severity" valuetype="number"/>
  <atv:parameter group="Default filter" behavior="optional" defaultvalue="" desc="source" name="source" valuetype="address"/>
  <atv:parameter group="Default filter" behavior="optional" defaultvalue="" desc="user" name="user" valuetype="string"/>
  <atv:parameter group="Default filter" behavior="optional" defaultvalue="" desc="eventtext" name="message" valuetype="string"/>
  <atv:parameter group="Default filter" behavior="optional" defaultvalue="" desc="value" name="value" valuetype="string"/>
  <atv:parameter group="Default filter" behavior="optional" defaultvalue="" desc="archive" name="archive" valuetype="string"/>
  <atv:parameter group="Default filter" behavior="optional" defaultvalue="" desc="type" name="type" config="All=0;Value=1;Event=2;Alarm=3" valuetype="enum"/>
  <atv:parameter group="Default filter" behavior="optional" defaultvalue="false" desc="live view" name="live" valuetype="bool"/>
  <atv:parameter group="Default filter" behavior="optional" defaultvalue="Average" desc="aggregate" name="aggregate" valuetype="string"/>
  <atv:parameter group="Default filter" behavior="optional" defaultvalue="1" desc="aggregate interval" name="interval_value" valuetype="number"/>
  <atv:parameter group="Default filter" behavior="optional" defaultvalue="m" desc="aggregate unit" name="interval_unit" config="m;h;d;M" valuetype="enum"/>
  <atv:parameter group="Default filter" behavior="optional" defaultvalue="" substitute="" desc="comment" name="comment" valuetype="string"/>
  <atv:parameter group="Default filter" behavior="optional" defaultvalue="" desc="group" name="group" valuetype="string"/>
  <atv:parameter group="Default filter" behavior="optional" defaultvalue="0" desc="range filter mode" name="range_filter_mode" config="From - To=0; From - Number of rows=1; To - Number of rows=2 " valuetype="enum"/>
  <atv:gridconfig height="20" gridstyle="lines" enabled="true" width="20"/>
  <atv:snapconfig height="2" enabled="true" width="2"/>
 </metadata>
 <text atv:refpx="1241" x="1279" y="39" font-size="12" font-family="Arial" text-anchor="end" fill="$FONTCOLOR$" id="label_loading" atv:refpy="34">T{loading...}</text>
 <svg xlink:href="SYSTEM.LIBRARY.ATVISE.OBJECTDISPLAYS.Advanced.button" atv:refpx="971.117" x="429.565" transform="matrix(2.3,0,0,1,0,0)" y="8" height="30" id="btn_append" atv:refpy="25" atv:dynamic="true" width="80">
  <atv:argument value="T{Append data off}" name="label"/>
  <atv:argument value="14" name="tabIndex"/>
  <atv:overwrite transform="matrix(0.8889,0,0,1,0,0)" id="id_2" width="84.5"/>
  <atv:overwrite transform="matrix(0.8889,0,0,1,0,0)" id="id_0" width="89.5"/>
  <atv:argument value="true" name="borderVisible"/>
  <atv:argument value="#FFFFFF" name="extraBorderColor"/>
  <atv:overwrite transform="matrix(0.4348,0,0,1,0,0)" id="id_6" width="182"/>
  <atv:overwrite x="82" transform="matrix(0.4348,0,0,1,0,0)" id="button_symbol"/>
  <atv:overwrite x="92" transform="matrix(0.4348,0,0,1,0,0)" id="button_label"/>
  <atv:overwrite transform="matrix(0.4348,0,0,1,0,0)" id="button_stroke" width="180"/>
  <atv:overwrite transform="matrix(0.4348,0,0,1,0,0)" id="button_bg" width="182"/>
  <atv:overwrite transform="matrix(0.4348,0,0,1,0,0)" id="outer_frame" width="184"/>
 </svg>
 <svg xlink:href="SYSTEM.LIBRARY.ATVISE.OBJECTDISPLAYS.Advanced.button" atv:refpx="1073.743" x="961.778" transform="matrix(1.125,0,0,1,0,0)" y="8" height="30" id="btn_reset" atv:refpy="25" atv:dynamic="true" width="80">
  <atv:argument value="T{Reset filter}" name="label"/>
  <atv:argument value="15" name="tabIndex"/>
  <atv:overwrite transform="matrix(0.8889,0,0,1,0,0)" id="id_2" width="84.5"/>
  <atv:overwrite transform="matrix(0.8889,0,0,1,0,0)" id="id_0" width="89.5"/>
  <atv:argument value="true" name="borderVisible"/>
  <atv:argument value="#FFFFFF" name="extraBorderColor"/>
  <atv:overwrite transform="matrix(0.8889,0,0,1,0,0)" id="id_6" width="88"/>
  <atv:overwrite x="35" transform="matrix(0.8889,0,0,1,0,0)" id="button_symbol"/>
  <atv:overwrite x="45" transform="matrix(0.8889,0,0,1,0,0)" id="button_label"/>
  <atv:overwrite transform="matrix(0.8889,0,0,1,0,0)" id="button_stroke" width="86"/>
  <atv:overwrite transform="matrix(0.8889,0,0,1,0,0)" id="button_bg" width="88"/>
  <atv:overwrite transform="matrix(0.8889,0,0,1,0,0)" id="outer_frame" width="90"/>
 </svg>
 <svg xlink:href="SYSTEM.LIBRARY.ATVISE.OBJECTDISPLAYS.Advanced.combobox" atv:refpx="726" x="656" y="8" height="30" id="combo_type" atv:refpy="25" width="160">
  <atv:argument value="T{Value, Event, Alarm}" name="text1"/>
  <atv:argument value="T{Alarm}" name="text2"/>
  <atv:argument value="T{Event}" name="text3"/>
  <atv:argument value="all" name="text1value"/>
  <atv:argument value="alarm" name="text2value"/>
  <atv:argument value="event" name="text3value"/>
  <atv:argument value="T{Value}" name="text4"/>
  <atv:argument value="value" name="text4value"/>
  <atv:argument value="3" name="tabIndex"/>
  <atv:argument value="T{Aggregate}" name="text5"/>
  <atv:argument value="aggregate" name="text5value"/>
 </svg>
 <text atv:refpx="617.617" x="653.117" y="27.5" font-size="14" font-family="Arial" text-anchor="end" fill="$FONTCOLOR$" id="id_15" atv:refpy="22.5">T{Type}:</text>
 <svg xlink:href="SYSTEM.LIBRARY.ATVISE.OBJECTDISPLAYS.Advanced.button" atv:refpx="978.743" x="877.334" transform="matrix(1.125,0,0,1,0,0)" y="8" height="30" id="btn_apply" atv:refpy="25" atv:dynamic="true" width="80">
  <atv:argument value="T{Apply filter}" name="label"/>
  <atv:argument value="14" name="tabIndex"/>
  <atv:overwrite transform="matrix(0.8889,0,0,1,0,0)" id="id_2" width="84.5"/>
  <atv:overwrite transform="matrix(0.8889,0,0,1,0,0)" id="id_0" width="89.5"/>
  <atv:argument value="true" name="borderVisible"/>
  <atv:argument value="#FFFFFF" name="extraBorderColor"/>
  <atv:overwrite transform="matrix(0.8889,0,0,1,0,0)" id="id_6" width="88"/>
  <atv:overwrite x="35" transform="matrix(0.8889,0,0,1,0,0)" id="button_symbol"/>
  <atv:overwrite x="45" transform="matrix(0.8889,0,0,1,0,0)" id="button_label"/>
  <atv:overwrite transform="matrix(0.8889,0,0,1,0,0)" id="button_stroke" width="86"/>
  <atv:overwrite transform="matrix(0.8889,0,0,1,0,0)" id="button_bg" width="88"/>
  <atv:overwrite transform="matrix(0.8889,0,0,1,0,0)" id="outer_frame" width="90"/>
 </svg>
 <svg xlink:href="SYSTEM.LIBRARY.ATVISE.OBJECTDISPLAYS.Symbols.60x60.history" atv:refpx="24.667" x="6.545" transform="matrix(0.4583,0,0,0.4583,0,0)" y="19.637" height="60" id="logo" atv:refpy="21.333" width="60">
  <atv:argument value="" name="symbolColor" prefix="globalSymbolColor"/>
 </svg>
 <svg xlink:href="SYSTEM.LIBRARY.ATVISE.OBJECTDISPLAYS.Advanced.button" atv:refpx="882.5" x="603.131" transform="matrix(1.4375,0,0,1,0,0)" y="8" height="30" id="showFilter" atv:refpy="25" width="80">
  <atv:argument value="T{Advanced filters}" name="label"/>
  <atv:argument value="13" name="tabIndex"/>
  <atv:overwrite transform="matrix(0.6957,0,0,1,0,0)" id="id_2" width="109.5"/>
  <atv:overwrite transform="matrix(0.6957,0,0,1,0,0)" id="id_0" width="114.5"/>
  <atv:argument value="true" name="borderVisible"/>
  <atv:argument value="#FFFFFF" name="extraBorderColor"/>
  <atv:overwrite transform="matrix(0.6957,0,0,1,0,0)" id="id_6" width="113"/>
  <atv:overwrite x="47.5" transform="matrix(0.6957,0,0,1,0,0)" id="button_symbol"/>
  <atv:overwrite x="57.5" transform="matrix(0.6957,0,0,1,0,0)" id="button_label"/>
  <atv:overwrite transform="matrix(0.6957,0,0,1,0,0)" id="button_stroke" width="111"/>
  <atv:overwrite transform="matrix(0.6957,0,0,1,0,0)" id="button_bg" width="113"/>
  <atv:overwrite transform="matrix(0.6957,0,0,1,0,0)" id="outer_frame" width="115"/>
 </svg>
 <text atv:refpx="74" x="30.5" y="21.5" font-size="18" font-family="Arial" text-anchor="start" fill="$FONTCOLOR$" id="id_9" atv:refpy="16.5">T{History}</text>
 <g atv:refpx="456" transform="matrix(1,0,0,1,0,-2)" id="adv_2" atv:refpy="95">
  <svg xlink:href="SYSTEM.LIBRARY.ATVISE.OBJECTDISPLAYS.Advanced.in_out_value" atv:refpx="260" x="190" y="80" height="30" id="inout_username" atv:refpy="95" width="160">
   <atv:argument value="String" name="validation"/>
   <atv:argument value="8" name="tabIndex"/>
  </svg>
  <g atv:refpx="1180" id="adv_6" atv:refpy="85">
   <svg xlink:href="SYSTEM.LIBRARY.ATVISE.OBJECTDISPLAYS.Advanced.picker_value" atv:refpx="753.125" x="1027" transform="matrix(0.6875,0,0,1,0,0)" y="80" height="30" id="picker_priority" atv:refpy="95" width="160">
    <atv:argument value="10" name="tabIndex"/>
    <atv:overwrite transform="matrix(1.4545,0,0,1,0,0)" id="focus_frame" width="106"/>
    <atv:overwrite transform="matrix(1.4545,0,0,1,-72.7273,0)" id="clickarea_dec"/>
    <atv:overwrite transform="matrix(1.4545,0,0,1,-72.7273,0)" id="clickarea_inc"/>
    <atv:overwrite x="75.5" transform="matrix(1.4545,0,0,1,0,0)" id="input_label"/>
    <atv:overwrite transform="matrix(1.4545,0,0,1,0,0)" id="blinking_frame" width="78"/>
    <atv:overwrite transform="matrix(1.4545,0,0,1,0,0)" id="input_bg" width="78"/>
    <atv:overwrite transform="matrix(1.4545,0,0,1,0,0)" id="id_2" width="110"/>
   </svg>
   <text atv:refpx="633.244" x="702" y="101" font-size="14" font-family="Arial" text-anchor="end" fill="$FONTCOLOR$" id="id_11" atv:refpy="96">T{Min. priority}:</text>
   <svg xlink:href="SYSTEM.LIBRARY.ATVISE.OBJECTDISPLAYS.Advanced.in_out_value" atv:refpx="1013" x="917" y="45" height="30" id="inout_comment" atv:refpy="95" width="160">
    <atv:argument value="String" name="validation"/>
    <atv:argument value="7" name="tabIndex"/>
   </svg>
   <svg xlink:href="SYSTEM.LIBRARY.ATVISE.OBJECTDISPLAYS.Advanced.in_out_value" atv:refpx="1009" x="917" y="80" height="30" id="inout_group" atv:refpy="60" width="160">
    <atv:argument value="String" name="validation"/>
    <atv:argument value="11" name="tabIndex"/>
   </svg>
   <text atv:refpx="860.556" x="915" y="67" font-size="14" font-family="Arial" text-anchor="end" fill="$FONTCOLOR$" id="id_18" atv:refpy="61">T{Comment}:</text>
   <text atv:refpx="847.491" x="915" y="101" font-size="14" font-family="Arial" text-anchor="end" fill="$FONTCOLOR$" id="id_19" atv:refpy="96">T{Group}:</text>
  </g>
  <text atv:refpx="135" x="187" y="100" font-size="14" font-family="Arial" text-anchor="end" fill="$FONTCOLOR$" id="id_14" atv:refpy="95">T{Username}:</text>
  <svg xlink:href="SYSTEM.LIBRARY.ATVISE.OBJECTDISPLAYS.Advanced.in_out_value" atv:refpx="489.842" x="433" y="80" height="30" id="inout_event" atv:refpy="95" width="160">
   <atv:argument value="String" name="validation"/>
   <atv:argument value="9" name="tabIndex"/>
  </svg>
  <text atv:refpx="385.416" x="431" y="101" font-size="14" font-family="Arial" text-anchor="end" fill="$FONTCOLOR$" id="id_34" atv:refpy="96">T{Eventtext}:</text>
 </g>
 <g atv:refpx="462.5" transform="matrix(1,0,0,1,0,-2)" id="adv_1" atv:refpy="60">
  <svg xlink:href="SYSTEM.LIBRARY.ATVISE.OBJECTDISPLAYS.Advanced.picker_address" atv:refpx="260" x="190" y="45" height="30" id="address_source" atv:refpy="60" width="160">
   <atv:argument value="No" name="showDisplays"/>
   <atv:argument value="No" name="showArchives"/>
   <atv:argument value="4" name="tabIndex"/>
   <atv:argument value="25" name="itemsCount"/>
  </svg>
  <text atv:refpx="141" x="187" y="66" font-size="14" font-family="Arial" text-anchor="end" fill="$FONTCOLOR$" id="id_13" atv:refpy="61">T{Address}:</text>
  <text atv:refpx="397.048" x="429.984" y="66" font-size="14" font-family="Arial" text-anchor="end" fill="$FONTCOLOR$" id="id_6" atv:refpy="61">T{Value}:</text>
  <svg xlink:href="SYSTEM.LIBRARY.ATVISE.OBJECTDISPLAYS.Advanced.in_out_value" atv:refpx="489.994" x="432" y="45" height="30" id="inout_value" atv:refpy="60" width="160">
   <atv:argument value="String" name="validation"/>
   <atv:argument value="5" name="tabIndex"/>
  </svg>
  <g atv:refpx="1180" id="g_archive" atv:refpy="85">
   <text atv:refpx="615.471" x="653" y="67" font-size="14" font-family="Arial" text-anchor="end" fill="$FONTCOLOR$" id="id_7" atv:refpy="55">T{Archive}:</text>
   <svg xlink:href="SYSTEM.LIBRARY.ATVISE.OBJECTDISPLAYS.Advanced.combobox" atv:refpx="725" x="656" y="45" height="30" id="combo_archive" atv:refpy="60" width="160">
    <atv:argument value="6" name="tabIndex"/>
    <atv:argument value="20" name="itemsCount"/>
   </svg>
  </g>
 </g>
 <svg xlink:href="SYSTEM.LIBRARY.ATVISE.OBJECTDISPLAYS.Advanced.checkbox" atv:refpx="1203.5" x="1881.6" transform="matrix(0.625,0,0,1,0,0)" y="8" height="30" id="cb_live" atv:refpy="18" width="160">
  <atv:argument value="T{Live}" name="label"/>
  <atv:argument value="1" name="valueOn"/>
  <atv:argument value="1" name="outputValueOn"/>
  <atv:argument value="0" name="outputValueOff"/>
  <atv:argument value="16" name="tabIndex"/>
  <atv:overwrite transform="matrix(1.6,0,0,1,0,0)" id="checkbox_item"/>
  <atv:overwrite transform="matrix(1.6,0,0,1,0,0)" id="checkbox_symbol"/>
  <atv:overwrite transform="matrix(1.6,0,0,1,0,0)" id="blinking_frame"/>
  <atv:overwrite transform="matrix(1.6,0,0,1,0,0)" id="focus_frame"/>
  <atv:overwrite transform="matrix(1.6,0,0,1,0,0)" id="checkbox_bg"/>
  <atv:overwrite transform="matrix(1.6,0,0,1,0,0)" id="checkbox_frame"/>
  <atv:overwrite transform="matrix(1.6,0,0,1,0,0)" id="checkbox_stroke"/>
 </svg>
 <foreignObject id="id_1" x="0" width="1280" height="540" y="115">
  <div xmlns="http://www.w3.org/1999/xhtml" style="width:100%;height:100%">
   <div id="slick_table_panel" style="width:100%; height:100%;"/>
  </div>
 </foreignObject>
 <g transform="matrix(1,0,0,1,0,-2)" id="adv_3" atv:refpy="95" atv:refpx="344.319">
  <g id="adv_5" atv:refpy="95" atv:refpx="344.319">
   <text font-size="14" fill="$FONTCOLOR$" id="id_30" atv:refpy="60" atv:refpx="58.8" x="188" text-anchor="end" font-family="Arial" y="100">T{Aggregate}:</text>
   <svg transform="matrix(2.5125,0,0,1,0,0)" id="combo_aggregate" atv:refpy="95" atv:refpx="391.002" xlink:href="SYSTEM.LIBRARY.ATVISE.OBJECTDISPLAYS.Advanced.combobox" x="75.621" width="160" height="30" y="80">
    <atv:argument value="8" name="tabIndex"/>
    <atv:overwrite transform="matrix(0.398,0,0,1,0,0)" id="focus_frame" width="398.002"/>
    <atv:overwrite transform="matrix(0.398,0,0,1,0,0)" id="button_stroke" x="377.002"/>
    <atv:overwrite transform="matrix(0.398,0,0,1,0,0)" id="id_7" x="377.002"/>
    <atv:overwrite transform="matrix(0.398,0,0,1,0,0)" id="button_bg" x="377.002"/>
    <atv:overwrite transform="matrix(0.398,0,0,1,0,0)" id="combobox_label" x="367.502"/>
    <atv:overwrite transform="matrix(0.398,0,0,1,0,0)" id="blinking_frame" width="370.002"/>
    <atv:overwrite transform="matrix(0.398,0,0,1,0,0)" id="combobox_bg" width="370.002"/>
    <atv:overwrite transform="matrix(0.398,0,0,1,0,0)" id="id_1" width="400.002"/>
    <atv:overwrite transform="matrix(0.398,0,0,1,0,0)" id="id_0" width="402.002"/>
   </svg>
  </g>
  <g transform="matrix(1,0,0,1,0.0511,-0.0416)" id="adv_4" atv:refpy="94.958" atv:refpx="478.051">
   <text font-size="14" fill="$FONTCOLOR$" id="id_25" atv:refpy="60" atv:refpx="58.8" x="112" text-anchor="end" font-family="Arial" y="100">T{Aggregate}:</text>
   <svg transform="matrix(1.4688,0,0,1,0,0)" id="combo_predefined_aggregate" atv:refpy="-535" atv:refpx="417.122" xlink:href="SYSTEM.LIBRARY.ATVISE.OBJECTDISPLAYS.Advanced.combobox" x="78" width="160" height="30" y="80">
    <atv:argument value="8" name="tabIndex"/>
    <atv:argument value="20" name="itemsCount"/>
    <atv:overwrite transform="matrix(0.6809,0,0,1,0,0)" id="focus_frame" width="231"/>
    <atv:overwrite transform="matrix(0.6809,0,0,1,0,0)" id="button_stroke" x="210"/>
    <atv:overwrite transform="matrix(0.6809,0,0,1,0,0)" id="id_7" x="210"/>
    <atv:overwrite transform="matrix(0.6809,0,0,1,0,0)" id="button_bg" x="210"/>
    <atv:overwrite transform="matrix(0.6809,0,0,1,0,0)" id="combobox_label" x="200.5"/>
    <atv:overwrite transform="matrix(0.6809,0,0,1,0,0)" id="blinking_frame" width="203"/>
    <atv:overwrite transform="matrix(0.6809,0,0,1,0,0)" id="combobox_bg" width="203"/>
    <atv:overwrite transform="matrix(0.6809,0,0,1,0,0)" id="id_1" width="233"/>
    <atv:overwrite transform="matrix(0.6809,0,0,1,0,0)" id="id_0" width="235"/>
   </svg>
   <text font-size="14" fill="$FONTCOLOR$" id="id_29" atv:refpy="96.021" atv:refpx="389.782" x="430.982" text-anchor="end" font-family="Arial" y="101.021">T{Interval}:</text>
   <svg id="picker_intervalvalue" atv:refpy="-500" atv:refpx="161.403" xlink:href="SYSTEM.LIBRARY.ATVISE.OBJECTDISPLAYS.Advanced.picker_value" x="432" width="160" height="30" y="80">
    <atv:argument value="1" name="min"/>
    <atv:argument value="9" name="tabIndex"/>
   </svg>
   <svg id="combo_intervalunit" atv:refpy="0" atv:refpx="73.859" xlink:href="SYSTEM.LIBRARY.ATVISE.OBJECTDISPLAYS.Advanced.combobox" x="656" width="160" height="30" y="80">
    <atv:argument value="T{minute(s)}" name="text2"/>
    <atv:argument value="m" name="text2value"/>
    <atv:argument value="T{hour(s)}" name="text3"/>
    <atv:argument value="h" name="text3value"/>
    <atv:argument value="T{day(s)}" name="text4"/>
    <atv:argument value="d" name="text4value"/>
    <atv:argument value="T{month(s)}" name="text5"/>
    <atv:argument value="M" name="text5value"/>
    <atv:argument value="10" name="tabIndex"/>
    <atv:overwrite transform="matrix(1.3913,0,0,1,0,0)" id="id_3" x="89.75"/>
    <atv:overwrite transform="matrix(1.3913,0,0,1,0,0)" id="id_5" x="87.5"/>
    <atv:overwrite transform="matrix(1.3913,0,0,1,0,0)" id="id_2" width="83"/>
    <atv:overwrite transform="matrix(1.3913,0,0,1,0,0)" id="combobox_stroke" width="114.5"/>
   </svg>
   <text font-size="14" fill="$FONTCOLOR$" id="id_8" atv:refpy="92.45" atv:refpx="621.099" x="652" text-anchor="end" font-family="Arial" y="100">T{Unit}:</text>
  </g>
 </g>
 <svg transform="matrix(2,0,0,1,0,0)" id="id_16" atv:refpy="667.5" atv:refpx="322.5" xlink:href="SYSTEM.LIBRARY.ATVISE.OBJECTDISPLAYS.Advanced.slickgrid.table_footer" x="0" width="640" height="25" y="655">
  <atv:argument name="tableID" prefix="tableID"/>
 </svg>
 <svg transform="matrix(0.4125,0,0,1,0,0)" id="btn_show_settings_menu" atv:refpy="25" atv:refpx="845.5" xlink:href="SYSTEM.LIBRARY.ATVISE.OBJECTDISPLAYS.Advanced.button" x="2009.697" width="80" height="30" y="8">
  <atv:argument value="T{settings}" name="label"/>
  <atv:argument value="SYSTEM.LIBRARY.ATVISE.OBJECTDISPLAYS.Symbols.20x20.gears" name="symbol"/>
  <atv:argument value="hidden" name="visibilityLabel"/>
  <atv:argument value="inherit" name="visibilitySymbol"/>
  <atv:argument value="12" name="tabIndex"/>
  <atv:overwrite transform="matrix(2.4242,0,0,1,0,0)" id="id_6" width="31"/>
  <atv:overwrite transform="matrix(2.4242,0,0,1,0,0)" id="button_symbol" x="6.5"/>
  <atv:overwrite transform="matrix(2.4242,0,0,1,0,0)" id="button_label" x="16.5"/>
  <atv:overwrite transform="matrix(2.4242,0,0,1,0,0)" id="button_stroke" width="29"/>
  <atv:overwrite transform="matrix(2.4242,0,0,1,0,0)" id="button_bg" width="31"/>
  <atv:overwrite transform="matrix(2.4242,0,0,1,0,0)" id="outer_frame" width="33"/>
 </svg>
 <svg transform="matrix(0.55,0,0,0.55,0,0)" id="iconSelected" atv:refpy="-14.5" atv:refpx="228.25" xlink:href="SYSTEM.LIBRARY.ATVISE.OBJECTDISPLAYS.Symbols.20x20.check" x="400" width="20" height="20" y="-36.364"/>
 <svg transform="matrix(0.8,0,0,0.8,0,0)" id="iconSelector" atv:refpy="-12.8" atv:refpx="220.8" xlink:href="SYSTEM.LIBRARY.ATVISE.OBJECTDISPLAYS.Symbols.alarmlist.action" x="250" width="20" height="20" y="-25"/>
 <svg transform="matrix(0.65,0,0,0.65,0,0)" id="iconBurger" atv:refpy="-15.5" atv:refpx="239.125" xlink:href="SYSTEM.LIBRARY.ATVISE.OBJECTDISPLAYS.Symbols.table.burger" x="361.538" width="20" height="20" y="-30.769"/>
 <g transform="matrix(1,0,0,1,0,-2)" id="group_number_of_rows" atv:refpy="25" atv:refpx="466.613">
  <text font-size="14" fill="$FONTCOLOR$" id="lbl_rows" atv:refpy="25" atv:refpx="437.727" x="465.227" text-anchor="end" font-family="Arial" y="30">T{Number of rows}:</text>
  <svg transform="matrix(0.7813,0,0,1,0,0)" id="picker_number_of_rows" atv:refpy="25" atv:refpx="529.5" xlink:href="SYSTEM.LIBRARY.ATVISE.OBJECTDISPLAYS.Advanced.picker_value" x="597.76" width="160" height="30" y="10">
   <atv:argument value="1000" name="stepInc"/>
   <atv:argument value="1000" name="stepDec"/>
   <atv:argument value="1" name="min"/>
   <atv:argument value="2" name="tabIndex"/>
   <atv:overwrite transform="matrix(1.28,0,0,1,0,0)" id="focus_frame" width="121"/>
   <atv:overwrite transform="matrix(1.28,0,0,1,-44.8,0)" id="clickarea_dec"/>
   <atv:overwrite transform="matrix(1.28,0,0,1,-44.8,0)" id="clickarea_inc"/>
   <atv:overwrite transform="matrix(1.28,0,0,1,0,0)" id="input_label" x="90.5"/>
   <atv:overwrite transform="matrix(1.28,0,0,1,0,0)" id="blinking_frame" width="93"/>
   <atv:overwrite transform="matrix(1.28,0,0,1,0,0)" id="input_bg" width="93"/>
   <atv:overwrite transform="matrix(1.28,0,0,1,0,0)" id="id_0" width="123"/>
   <atv:overwrite transform="matrix(1.28,0,0,1,0,0)" id="id_2" width="125"/>
  </svg>
 </g>
 <svg visibility="visible" transform="matrix(0.8,0,0,0.8,0,0)" id="icon_timeshelved" atv:refpy="-17" atv:refpx="63" xlink:href="$TIMESHELVED$" x="50" width="20" height="20" y="-25">
  <atv:argument value="" name="symbolColor" prefix="globalSymbolColor"/>
 </svg>
 <svg visibility="visible" transform="matrix(0.8,0,0,0.8,0,0)" id="icon_oneshotshelved" atv:refpy="-17" atv:refpx="43" xlink:href="$ONESHOTSHELVED$" x="25" width="20" height="20" y="-25">
  <atv:argument value="" name="symbolColor" prefix="globalSymbolColor"/>
 </svg>
 <svg visibility="visible" transform="matrix(0.8,0,0,0.8,0,0)" id="icon_shelve" atv:refpy="-17" atv:refpx="23" xlink:href="$SHELVE$" x="0" width="20" height="20" y="-25" atv:bindtl="0,0" atv:bindbr="0,0">
  <atv:argument value="" name="symbolColor" prefix="globalSymbolColor"/>
 </svg>
 <svg visibility="visible" transform="matrix(0.8,0,0,0.8,0,0)" id="icon_unsuppressed" atv:refpy="-17" atv:refpx="123" xlink:href="$SUPPRESSED$" x="125" width="20" height="20" y="-25">
  <atv:argument value="#b7b7b7" name="symbolColor"/>
 </svg>
 <svg visibility="visible" transform="matrix(0.8,0,0,0.8,0,0)" id="icon_suppressed" atv:refpy="-5" atv:refpx="-24" xlink:href="$SUPPRESSED$" x="100" width="20" height="20" y="-25">
  <atv:argument value="" name="symbolColor" prefix="globalSymbolColor"/>
 </svg>
 <svg visibility="visible" transform="matrix(0.8,0,0,0.8,0,0)" id="icon_disabled" atv:refpy="-17" atv:refpx="151" xlink:href="$DISABLED$" x="175" width="20" height="20" y="-25">
  <atv:argument value="#b7b7b7" name="symbolColor"/>
 </svg>
 <svg visibility="visible" transform="matrix(0.8,0,0,0.8,0,0)" id="icon_enabled" atv:refpy="-5" atv:refpx="57" xlink:href="$ENABLED$" x="150" width="20" height="20" y="-25">
  <atv:argument value="" name="symbolColor" prefix="globalSymbolColor"/>
 </svg>
 <svg visibility="visible" transform="matrix(0.8,0,0,0.8,0,0)" id="icon_unshelved" atv:refpy="-17" atv:refpx="85" xlink:href="$UNSHELVED$" x="75" width="20" height="20" y="-25" atv:bindtl="0,0" atv:bindbr="0,0">
  <atv:argument value="#b7b7b7" name="symbolColor"/>
 </svg>
 <svg visibility="visible" transform="matrix(0.8,0,0,0.8,0,0)" id="icon_confirmed" atv:refpy="-17" atv:refpx="179" xlink:href="$CONFIRMED$" x="200" width="20" height="20" y="-25">
  <atv:argument value="" name="symbolColor" prefix="globalSymbolColor"/>
 </svg>
 <svg visibility="visible" transform="matrix(0.8,0,0,0.8,0,0)" id="icon_unconfirmed" atv:refpy="-17" atv:refpx="201" xlink:href="$UNCONFIRMED$" x="225" width="20" height="20" y="-25">
  <atv:argument value="#B7B7B7" name="symbolColor"/>
 </svg>
 <svg id="iconMessage" atv:refpy="-15" atv:refpx="80" xlink:href="SYSTEM.LIBRARY.ATVISE.OBJECTDISPLAYS.Advanced.slickgrid.table_notification" x="250" width="80" height="20" y="-25">
  <atv:argument name="tableID" prefix="tableID"/>
 </svg>
 <svg height="20" y="-25" width="80" atv:refpy="-15" atv:refpx="375" id="id_12" xlink:href="SYSTEM.LIBRARY.ATVISE.OBJECTDISPLAYS.Advanced.slickgrid.table_keyboard" x="335">
  <atv:argument name="tableID" prefix="tableID"/>
 </svg>
 <foreignObject id="id_notification" x="1175" width="80" height="20" y="50">
  <div xmlns="http://www.w3.org/1999/xhtml" style="width:100%;height:100%;float:right;">
   <div id="notification_area" xmlns="http://www.w3.org/1999/xhtml" style="z-index:10000;background-color:#fff;width:80px;height:20px; float: right;"/>
  </div>
 </foreignObject>
 <text font-size="18" fill="$FONTCOLOR$" id="id_10" atv:refpy="34.5" atv:refpx="56" x="31" text-anchor="start" font-family="Arial" y="39.5">T{list}</text>
 <script type="text/ecmascript"><![CDATA[
var topWindow = parent;
var tableID = webMI.query["tableID"];
var columnParameters = webMI.query["columns"];
var filterStart = parseFloat((webMI.query["starttime"] != "") ? (webMI.query["starttime"] * 1000) : (60 * 1000));
var filterPriority = parseFloat(webMI.query["severity"]);
var filterSource = webMI.query["source"];
var filterEventText = webMI.query["message"];
var filterValue = webMI.query["value"];
 //Set only to webMI.query["archive"] set only to webMI.query["archive"] if archiv exists
var filterArchive = "";
var defaultFilterArchive = webMI.query["archive"];
var filterUsername = webMI.query["user"];
var filterTypeNum = parseInt(webMI.query["type"]);
var filterComment = webMI.query["comment"];
var filterGroup = webMI.query["group"];
var filterAggregate = webMI.query["aggregate"];
var defaultFilterAggregate = webMI.query["aggregate"];
var filterIntervalValue = parseInt(webMI.query["interval_value"]);
var filterIntervalUnit = webMI.query["interval_unit"];
var filterNumRows = parseInt(webMI.query["num_rows"], 10);
var defaultMode = webMI.query["data_mode"];
var runtimeMode = webMI.query["data_mode"];
var statusIndicationConfig =  webMI.query["atvStatusIndication"];
var detailMode = webMI.query["detail_mode"];
var row_text_size = webMI.query["row_text_size"];
var header_text_size = webMI.query["header_text_size"];
 //enum RangeFilterModes
var RangeFilterModes = { FROM_TO: 0, FROM_NUMROWS: 1, TO_NUMROWS: 2 };
var currentRangeFilterMode = webMI.query["range_filter_mode"];

var aggregateFunctions = ["AnnotationCount", "Average", "Count", "Delta", "DeltaBounds", "DurationBad", "DurationGood", "DurationInStateNonZero",
	"DurationInStateZero", "End", "EndBound", "Interpolative", "Maximum", "Maximum2", "MaximumActualTime", "MaximumActualTime2",
	"Minimum", "Minimum2", "MinimumActualTime", "MinimumActualTime2", "NumberOfTransitions", "PercentBad", "PercentGood",
	"Range", "Range2", "Sampled", "StandardDeviationPopulation", "StandardDeviationSample", "Start", "StartBound", "TimeAverage", "TimeAverage2",
	"Total", "Total2", "VariancePopulation", "VarianceSample", "WorstQuality", "WorstQuality2"];
var units = [
	{ text: "T{second(s)}", value: "s" },
	{ text: "T{minute(s)}", value: "m" },
	{ text: "T{hour(s)}", value: "h" },
	{ text: "T{day(s)}", value: "d" },
	{ text: "T{month(s)}", value: "M" }
];

if (isNaN(filterStart)) filterStart = (1000 * 60);
if (isNaN(filterPriority)) filterPriority = 0;
if (isNaN(filterTypeNum)) filterTypeNum = 0;
var typeTexts = ["T{Value, Event, Alarm}", "T{Value}", "T{Event}", "T{Alarm}"];
var typeConvert = ["all", "value", "event", "alarm"];
var filterType = typeConvert[filterTypeNum];

var rangeTo = (new Date()).getTime();
var rangeFrom = rangeTo - filterStart;
var filterTo = rangeTo;
var filterFrom = rangeFrom;
var enableApplyButton = true;

var isLive = webMI.query["live"] == "true";
var liveSubscription = null;

var tableController;
var tableLayer;
var currentScaleFactor = 1;
var columns = getColumnSettings(columnParameters);
columns.fields.push("v:status", "v:ReplacementNames", "v:ReplacementValues");

var showFilter = false;
var yMove = 69;
var yOffset = 115;
var tableLoaded = false;
var hasBrowseNodes = webMI.getMethodSupport().indexOf("BrowseNodes") !== -1;

var fontSizeToTransformationFactor = 0.065;

if (!document.getElementById("icon_shelve").outerHTML) {
	Object.defineProperty(SVGElement.prototype, 'outerHTML', {
		get: function () {
			return new XMLSerializer().serializeToString(this);
		},
		enumerable: false,
		configurable: true
	});
}

/* -------------------------- */
/* append or update live data */
var appendLiveData = false;
var appendLiveMode = false;

function toggleAppendLiveData(value) {
	if(value == true){
		webMI.gfx.setVisible("btn_append", true);
		webMI.gfx.setVisible("btn_apply", false);
		webMI.gfx.setVisible("btn_reset", false);
	} else {
		webMI.gfx.setVisible("btn_append", false);
		webMI.gfx.setVisible("btn_apply", true);
		webMI.gfx.setVisible("btn_reset", true);
	}
}

/*
 * Triggers
 */
webMI.trigger.connect("clicked", function (e) {
	if(appendLiveData == true){
		webMI.gfx.setText("btn_append_button_label", "T{Append data off}");
	} else {
		webMI.gfx.setText("btn_append_button_label", "T{Append data on}");
	}
	appendLiveData = !appendLiveData;
}, "btn_append");

toggleAppendLiveData(false);
/* end append or update live data */
/* ------------------------------ */


var slickStyler;
var slickConfigurator;
var badStatusConfig;
if (statusIndicationConfig.ItemStatusBad)
	badStatusConfig = statusIndicationConfig.ItemStatusBad;

var badStatusRowStyle; 

var screenCTM;
var transformationFactor;

var PanelTopPositionExpandedTransformed;
var PanelTopPositionCollapsedTransformed;
var PanelHeightExpandedTransformed;
var PanelHeightCollapsedTransformed;

function detectMicrosoftBrowser() {

  var ua = navigator.userAgent;

  // IE 10
  // ua = 'Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; Trident/6.0)';

  // IE 11
  // ua = 'Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko';

  // Edge 12 (Spartan)
  // ua = 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.71 Safari/537.36 Edge/12.0';

  // Edge 13
  // ua = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/46.0.2486.0 Safari/537.36 Edge/13.10586';

  var msie = ua.indexOf('MSIE ');
  if (msie > 0) {
    // IE 10 or older => return version number
    return parseInt(ua.substring(msie + 5, ua.indexOf('.', msie)), 10);
  }

  var trident = ua.indexOf('Trident/');
  if (trident > 0) {
    // IE 11 => return version number
    var rv = ua.indexOf('rv:');
    return parseInt(ua.substring(rv + 3, ua.indexOf('.', rv)), 10);
  }

  var edge = ua.indexOf('Edge/');
  if (edge > 0) {
    // Edge (IE 12+) => return version number
    return parseInt(ua.substring(edge + 5, ua.indexOf('.', edge)), 10);
  }

  // other browser
  return false;

}

function setSupportedFilters() {
	//Deactivate unsupported filter inputs
	var filtersupport = webMI.getFilterSupport();
	var filters;
	if (filtersupport["queryfilter"] == true || filtersupport["subscribefilter"] == true) {
		filters = true;
	} else {
		filters = [];
		if (typeof filtersupport["queryfilter"] != "boolean")
			filters = filters.concat(filtersupport["queryfilter"]);
		if (typeof filtersupport["subscribefilter"] != "boolean")
			filters = filters.concat(filtersupport["subscribefilter"]);
	}

	function filtersup(filter) {
		if (typeof filters == "boolean") return filters;
		return (filters.indexOf(filter) == -1) ? false : true; 
	}

    if (!filtersupport["subscribefilter"]) webMI.gfx.setVisible("cb_live", false);
	if (!filtersup("timestamp")) {
		webMI.trigger.fire("com.atvise.setActive", false, "date_from");
		webMI.trigger.fire("com.atvise.setActive", false, "date_to");
	}
	if (!filtersup("type")) webMI.trigger.fire("com.atvise.setActive", false, "combo_type");
	if (!filtersup("address")) webMI.trigger.fire("com.atvise.setActive", false, "address_source");
	if (!filtersup("value")) webMI.trigger.fire("com.atvise.setActive", false, "inout_value");
	if (!filtersup("archive")) webMI.trigger.fire("com.atvise.setActive", false, "combo_archive");
	if (!filtersup("Comment")) webMI.trigger.fire("com.atvise.setActive", false, "inout_comment");
	if (!filtersup("username")) webMI.trigger.fire("com.atvise.setActive", false, "inout_username");
	if (!filtersup("eventtext")) webMI.trigger.fire("com.atvise.setActive", false, "inout_event");
	if (!filtersup("priority")) webMI.trigger.fire("com.atvise.setActive", false, "picker_priority");
	if (!filtersup("Group")) webMI.trigger.fire("com.atvise.setActive", false, "inout_group");
	if (!filtersup("aggregate")) webMI.trigger.fire("com.atvise.setActive", false, "combo_predefined_aggregate");
	if (!filtersup("interval")) webMI.trigger.fire("com.atvise.setActive", false, "picker_intervalvalue");
	if (!filtersup("unit")) webMI.trigger.fire("com.atvise.setActive", false, "combo_intervalunit");
	if (!filtersup("numrows")) webMI.gfx.setVisible("btn_show_settings_menu", false);

}

var iconShelveHeader = initIcon("icon_shelve", "T{Shelved}", fontSizeToTransformationFactor * header_text_size);
var iconOneshotshelved = initIcon("icon_oneshotshelved", "T{OneShotShelved}", fontSizeToTransformationFactor * row_text_size);
var iconTimeshelved = initIcon("icon_timeshelved", "T{TimeShelved}", fontSizeToTransformationFactor * row_text_size);
var iconUnshelved = initIcon("icon_unshelved", "T{Unshelved}", fontSizeToTransformationFactor * row_text_size);
var iconConfirmed = initIcon("icon_confirmed", "T{Confirmed}", fontSizeToTransformationFactor * row_text_size);
var iconConfirmedHeader = initIcon("icon_confirmed", "T{Confirmed}", fontSizeToTransformationFactor * header_text_size);
var iconUnconfirmed = initIcon("icon_unconfirmed", "T{Unconfirmed}", fontSizeToTransformationFactor * row_text_size);
var iconSuppressed = initIcon("icon_suppressed", "T{Suppressed}", fontSizeToTransformationFactor * row_text_size);
var iconSuppressedHeader = initIcon("icon_suppressed", "T{Suppressed}", fontSizeToTransformationFactor * header_text_size);
var iconUnsuppressed = initIcon("icon_unsuppressed", "T{Unsuppressed}", fontSizeToTransformationFactor * row_text_size);
var iconEnabled = initIcon("icon_enabled", "T{Enabled}", fontSizeToTransformationFactor * row_text_size);
var iconEnabledHeader = initIcon("icon_enabled", "T{Enabled}", fontSizeToTransformationFactor * header_text_size);
var iconDisabled = initIcon("icon_disabled", "T{Disabled}", fontSizeToTransformationFactor * row_text_size);

function setPanelHeightAndTop() {
	screenCTM = webMI.gfx.getScreenCTM(true);
	transformationFactor = screenCTM.d;
	PanelTopPositionExpandedTransformed = parseInt(tableLayer.style.top.replace("px", ""));
	PanelHeightExpandedTransformed = parseInt(tableLayer.style.height.replace("px", ""));
	PanelTopPositionCollapsedTransformed = PanelTopPositionExpandedTransformed - yMove * transformationFactor / currentScaleFactor;
	PanelHeightCollapsedTransformed = PanelHeightExpandedTransformed + yMove * transformationFactor / currentScaleFactor;
}

webMI.addOnload(function () {

	if (webMI.getConfig("frame.scaletype") != "native") currentScaleFactor = webMI.frame.getCurrentScaleFactor();

	setSupportedFilters();

	//initial view - hide detailed filters
	webMI.gfx.setVisible("adv_1", false);
	webMI.gfx.setVisible("adv_2", false);
	webMI.gfx.setVisible("adv_3", false);
	webMI.gfx.setVisible("adv_6", false);
	webMI.gfx.setHeight("filters_bg", yOffset - yMove);

	//init aggregates
	if (hasBrowseNodes) {
		webMI.gfx.setVisible("adv_4", false);
	} else {
		setPredefinedAggregates(defaultFilterAggregate);
		var unitText = getUnitText(filterIntervalUnit);
		webMI.trigger.fire("setSelectedItem", unitText, "combo_intervalunit");
		webMI.trigger.fire("setValue", filterIntervalValue, "picker_intervalvalue");
		webMI.gfx.setVisible("adv_5", false);
	}

	//set default filters
	setDefaultFilters();
	
	isLive = webMI.query["live"] == "true";
	if (isLive) {
		webMI.trigger.fire("setChecked", true, "cb_live");
	}

	//init table
	tableLayer = document.getElementById("slick_table_panel").parentElement.parentElement;

	setPanelHeightAndTop(),

	tableLayer.style.top = PanelTopPositionCollapsedTransformed + "px";
	tableLayer.style.height = PanelHeightCollapsedTransformed + "px";

	webMI.table.loadResources(function () {

        /* special for ie11 */
		function iconInnerHTML(icon, iconClass, dimensions, spanAround) {
			var newIcon = icon;
			newIcon.setAttribute("visibility", "visible");
			newIcon.setAttribute("viewbox", "0 0 " + icon.getAttribute("width") + " " + icon.getAttribute("height"));
			if(dimensions) {
                newIcon.setAttribute("width", dimensions.width);
                newIcon.setAttribute("height", dimensions.height);
			}
			for (var ic in iconClass) {
				webMI.rootWindow.jQuery(newIcon).addClass(iconClass[ic]);
			}
			var iconInnerHTML = webMI.rootWindow.jQuery('<div>').append(webMI.rootWindow.jQuery(newIcon).clone()).html(); // webMI.rootWindow.jQuery(newIcon).outerHTML;
			if (!spanAround) {
				return iconInnerHTML;
			} else {
				var originalButtonSize = parseInt(icon.height.baseVal.value);
				var span = parent.document.createElement("span");
				span.style.display = "flex";
				span.style.justifyContent = "center";
				span.innerHTML = iconInnerHTML;
				return span;
			}
		}

		function spanAroundIcon(icon) {
		}

		/**
		 * Declaration of some ICONS
		 * @type {HTMLElement | null}
		 */
		var dimensions = {
			width: fontSizeToTransformationFactor * header_text_size * 12.5 / currentScaleFactor,
			height: fontSizeToTransformationFactor * header_text_size * 12.5 / currentScaleFactor
		}

		var iconSelected = iconInnerHTML(document.getElementById("iconSelected"), ["iconSelected","table-icon"], dimensions, true);

		var originalBurgerIconSize = document.getElementById("iconBurger").height.baseVal.value;
		var transformFactor = fontSizeToTransformationFactor * header_text_size / currentScaleFactor;
		var transformedBurgerButtonSize = transformFactor * originalBurgerIconSize;
		var dimensionsBurger = {
			width: transformFactor * originalBurgerIconSize,
			height: transformFactor * originalBurgerIconSize
		}

		var iconBurger = iconInnerHTML(document.getElementById("iconBurger"), ["iconBurger","table-icon"], dimensionsBurger, true);
		iconBurger.id = "burgerSpan";
		iconBurger.style.marginRight = "1.5px";

		var iconMessage = iconInnerHTML(document.getElementById("iconMessage"), [], {width: 80, height: 20}, false);

		/**
		* Scaling correction for external event listener
		*/
		var elementForScaleEvents = document.getElementById("slick_table_panel");
		var scaleType = webMI.getConfig("frame.scaletype");
		if (scaleType == "zoom") {
			webMI.gfx.setScaledEvents(
				elementForScaleEvents.parentElement.parentElement,
				false,
				false,
				elementForScaleEvents.parentElement
			);
		}

		var config = {};
		config.mode = isLive ? "live" : defaultMode;
		config.columns = columns.mainTableColumns;
		config.containerID = document.getElementById("slick_table_panel").id;
		config.dataRequestFunction = dataRequestFunction;
		config.dataReleaseFunction = dataReleaseFunction;
		config.detailRowSettings = {
			/* add three rows for prevent scrolling */
            rows: columns.detailTableColumns.length + 6,
			template: createSubTable,
			exclude: function(item){
				if(detailMode == "alarm" && item.type == "W")
					return true;
				if(detailMode == "value" && item.type == "A")
					return true;
				return false;
			}
		};
		config.bufferInterval = 0;
		config.renderInterval = 100;
		config.truncateSize = webMI.query["truncate"];
		config.rowFormatter = rowFormatter;

		/* get settings from query param */
		var settings = {};
		var heightMultiplicator = webMI.getClientInfo() ? webMI.getClientInfo().deviceScaling.table.rowheight : 1;
		settings.multiselect = true;
		settings.header_height = webMI.query["header_height"] / currentScaleFactor * heightMultiplicator;
		settings.row_height = webMI.query["row_height"] / currentScaleFactor * heightMultiplicator;
		settings.header_text_size = header_text_size / currentScaleFactor;
		settings.row_text_size = row_text_size / currentScaleFactor;
		settings.detail_text_size = webMI.query["detail_text_size"] / currentScaleFactor;
		settings.footer_text_size = webMI.query["footer_text_size"] / currentScaleFactor;
		settings.font_family = webMI.query["font_family"];
		settings.theme_class = webMI.query["theme_class"];
		settings.paging = webMI.query["paging"];
		settings.filterBar = webMI.query["filterBar"];
		settings.filterRegExp = webMI.query["filterRegExp"];
		settings.filterStar = webMI.query["filterStar"];
		settings.filterCaseSensitive = webMI.query["filterCaseSensitive"];
		settings.filterLength = webMI.query["filterLength"];
		settings.filterDelay = webMI.query["filterDelay"];
		settings.filterConversion = {
			"timestamp": ["datetime"],
			"activetime": ["datetime"],
			"inactivetime": ["datetime"],
			"ShelvingStateUnshelveTime": ["datetime"],
			"ReceiveTime": ["datetime"],
			"acktime": ["datetime"],
			"flash": ["datetime"]
		};
		settings.linebreak = webMI.query["linebreak"];
		settings.columnReorder = webMI.query["columnReorder"];
		settings.multicellselect = webMI.query["multicellselect"];
		settings.showMenu = webMI.query["showMenu"];
		settings.showMenuCustomTitle = webMI.query["showMenuCustomTitle"];
		settings.showMenuPickerTitle = webMI.query["showMenuPickerTitle"];
		settings.showMenuPicker = webMI.query["showMenuPicker"];
		settings.showMenuWidth = webMI.query["menuWidth"] * settings.row_text_size / 12 / currentScaleFactor;
		settings.showMenuHeight = webMI.query["menuHeight" / currentScaleFactor];
		settings.showMode = true;
		settings.icons = [];
		settings.icons.selector = typeof iconSelected == "undefined" ? false : iconSelected.outerHTML;
		settings.icons.burger = typeof iconBurger == "undefined" ? false : iconBurger.outerHTML;
		settings.notification = document.getElementById("notification_area").getAttribute("id");
		var translation = {
			title_export: "T{Export}",
			title_command: "T{Filter}",
			title_picker: "T{Columns}",
	        export_csv: "T{All rows with displayed columns}",
	        export_csv_wh: "T{All rows with all columns}",
	        export_csv_m: "T{Marked rows with displayed columns}",
	        export_csv_mwh: "T{Marked rows with all columns}",
			filter_show_hide : "T{Show or hide filter}",
			filter_clear : "T{Reset filter}",
			sort_clear : "T{Reset sorting}",
			tooltip_marks: "T{Set/Cancel marks}",
			tooltip_details: "T{Details show/hide}",
		}
		settings.translation = translation; 

		/* add globals to settings */
		for (var key in webMI.query["globalColorConfig"]) {
			var value = webMI.query["globalColorConfig"][key];
			if (typeof value.color != "undefined")
				settings[key] = value.color;
		}

		/* get custom styling */
		var styling = webMI.table.request(tableID, "styling");
		for (var key in styling) {
			var value = styling[key];
			if (typeof value != "undefined")
				settings[key] = value;
		}

		/* global fallback colors */
		var fallbacks = {};
		fallbacks.globalBorderColor = webMI.query["globalBorderColor"];
		fallbacks.globalFillColor = webMI.query["globalFillColor"];
		fallbacks.globalFontColor = webMI.query["globalFontColor"];
		fallbacks.globalSymbolColor = webMI.query["globalSymbolColor"];


		slickConfigurator = new webMI.rootWindow.SlickConfigurator(config, settings, fallbacks);
		var tableConfig = slickConfigurator.getConfig();
	
		webMI.table.register(tableID, "ControllerConfig", tableConfig);
		webMI.table.setReady(tableID, "ControllerConfig");

		webMI.table.waitReady(tableID, "ControllerConfig", function () {

			var dataController = new webMI.rootWindow.DataController();
			tableController = new webMI.rootWindow.SlickController(dataController, tableConfig);
			webMI.table.register(tableID, "controller", tableController);

				/**
				 * Add some dialogs to the tableController
				 * @type {Array}
				 */
				var dialogs = (new webMI.rootWindow.SlickDialogs()).getDialogs();
				tableController.dialogs = [];
				tableController.dialogs.continuation = [];
				tableController.dialogs.continuation.search = function () {
					_openDialog(dialogs.continuation.search("T{}"))
				};
				tableController.dialogs.continuation.filter = function () {
					_openDialog(dialogs.continuation.filter("T{}"))
				};

                tableController.dialogs.sorting = [];
                tableController.dialogs.sorting.running = function () {
                   return _openDialog(dialogs.sorting.running("T{}"))
                };

				tableController.dialogs.triggered = [];
				tableController.dialogs.triggered.search = function () {
					_openDialog(dialogs.triggered.search("T{}"))
				};
				tableController.dialogs.triggered.filter = function () {
					_openDialog(dialogs.triggered.filter("T{}"))
				};

			/**
			 * Add message icon to notification_area and configure listener
			 */
			webMI.rootWindow.jQuery("#" + settings.notification).append(webMI.rootWindow.jQuery(iconMessage).clone()).html();
			webMI.addEvent("notification_area", "click", function(e) {
				tableController.notification.handleEvent(e, null);
			});

			/**
             * Hide show notification button
             */
			var panel = []
			panel.element =  document.getElementById("slick_table_panel"); // config.containerID);
			panel.width = panel.element.offsetWidth;

			var noteButton = [];
			noteButton.element =  document.getElementById("id_notification");
			noteButton.top = noteButton.element.style.top;
			tableController.hideNotificatonButton = function() {
				noteButton.element.style.top = "-100px";
				noteButton.element.style.display  = "none";
			}
			tableController.showNotificatonButton = function() {
				noteButton.element.style.top = noteButton.top;
				var nbWidth =  noteButton.element.style.width.replace("px", "");
				var nbLeft =  noteButton.element.style.left.replace("px", "");
				if(nbLeft > (panel.width - 80 - 25)) {
					nbLeft = panel.width - 80 - 25;
					noteButton.element.style.left = nbLeft +"px";
				}
				if(nbWidth < 80){
					noteButton.element.style.width = "80px";
				}
				noteButton.element.style.display  = "block";

				/* correction for parent */
				var noteArea = document.getElementById("notification_area");
				var areaLeft = parseInt(noteArea.parentElement.parentElement.style.left, 10);
				var areaWidth = parseInt(noteArea.parentElement.parentElement.style.width, 10);
				var areaOffset = areaWidth - 80;
				noteArea.parentElement.parentElement.style.left = areaLeft + areaOffset + "px";
				noteArea.parentElement.parentElement.style.width = 80 + "px";
			}
			tableController.hideNotificatonButton();

			tableController.init(function () {

				// Fit burger alignment to scrollbar width
				var slickViewport = topWindow.document.getElementsByClassName("slick-viewport")[0];
				var scrollbarWidth = slickViewport.offsetWidth  - slickViewport.clientWidth;
				var burgerSpan = topWindow.document.getElementById("burgerSpan");
				if(typeof burgerSpan != "undefined" && burgerSpan != null) burgerSpan.style.width = scrollbarWidth + "px";

				/* apply custom css to all components */
				slickStyler = new webMI.rootWindow.SlickStyler();
				slickStyler.generate(tableConfig.containerID, tableConfig.style);
				if(badStatusConfig) {
					badStatusRowStyle = slickStyler.getRowStyle(tableConfig.containerID, badStatusConfig.fontColor, badStatusConfig.fontFlashInterval, badStatusConfig.fillColor, badStatusConfig.fillFlashColor);
				}
				webMI.table.setReady(tableID, "controller");
				tableController.grid.resizeCanvas();
				
				setHeaderIcon("ShelvingState", iconShelveHeader);
				setHeaderIcon("ConfirmedStateId", iconConfirmedHeader);
				setHeaderIcon("SuppressedStateId", iconSuppressedHeader);
				setHeaderIcon("EnabledStateId", iconEnabledHeader);

				tableController.grid.onHeaderCellRendered.subscribe(function(e, args){
					if (args.column.field == "ShelvingState") {
						setHeaderIcon("ShelvingState", iconShelveHeader);
					}
					else if (args.column.field == "ConfirmedStateId") {
						setHeaderIcon("ConfirmedStateId", iconConfirmedHeader);
					} 
					else if (args.column.field == "SuppressedStateId") {
						setHeaderIcon("SuppressedStateId", iconSuppressedHeader);
					} 
					else if (args.column.field == "EnabledStateId") {
						setHeaderIcon("EnabledStateId", iconEnabledHeader);
					}
				});

				tableLoaded = true;

				//Start live subscription or get historical data for inital view
				if (isLive)
					subscribeLiveData();
				else
					requestHistoricalData();

			});
		});
	});
});

//cleanup subscriptions
webMI.addOnunload(function () {
	try {
		webMI.table.register(tableID, "controller", null, true);
	} catch (ex) {
		/* allready unregistered */
	}

	/* remove functions */
	tableController.hideNotificatonButton();
	tableController.showNotificatonButton = undefined;
	tableController.hideNotificatonButton = undefined;
	tableController.dialogs = undefined;

	slickConfigurator = undefined;
	delete slickConfigurator;

	try {
		slickStyler.unload();
		slickStyler = undefined;
		delete slickStyler;
	} catch (ex) {
		/* allready unset */
	}

	try {
		tableController.destroy();
		tableController = null;
		delete tableController;
	} catch (ex) {
		/* allready unset */
	}
});


/**
* Functions for preparing settings and headers of the table's columns
*/
function getColumnSettings(columnsParameters) {
	var mainTableColumns = [];
	var detailTableColumns = [];
	var fields = [];

	for (var prop in columnsParameters) {

		var colParameters = columnsParameters[prop];
		var maxColumnPriority = webMI.getClientInfo() ? (webMI.getClientInfo().isDesktop ? 100 : (webMI.getClientInfo().isTablet ? 2 : 1)) : 100;

		//main table columns
		var column = {
			id: colParameters.field,
			name: colParameters.columnName,
			field: colParameters.field,
			alignment: colParameters.alignment,
			filter: colParameters.filter == "true",
			minWidth: 0,
			order: parseInt(colParameters.orderMain),
			sortable: colParameters.sortable == "true",
			textoption: colParameters.textoption,
			type: trimAndSplit(colParameters.type),
			visible: (colParameters.visibleMain == "true" && colParameters.priority <= maxColumnPriority)
		};

		if (parseInt(colParameters.widthMain) > 0) {
			column.width = parseInt(colParameters.widthMain);
		}

		if (column.field == "timestamp") {
			column.sortByDefault = true;
			column.sortByDefaultAsc = false;
		}
		else if (column.field == "ShelvingState") {
            column.formatter = shelveIconFormatter;
        }
        else if (column.field == "SuppressedStateId") {
            column.formatter = suppressIconFormatter;
        }
		else if (column.field == "ConfirmedStateId") {
            column.formatter = confirmIconFormatter;
        }
        else if (column.field == "EnabledStateId") {
            column.formatter = enableIconFormatter;
        }

		mainTableColumns.push(column);

		//detail table columns
		if (colParameters.visibleDetail == "true") {
			detailTableColumns.push({
				name: colParameters.columnName,
				field: colParameters.field,
				order: parseInt(colParameters.orderDetail),
				type: colParameters.type
			});
		}

		fields.push("v:" + colParameters.field); //Will be used as select parameter at queryFilter
	}

	mainTableColumns.sort(columnCompareFunction);
	detailTableColumns.sort(columnCompareFunction);

	return { "mainTableColumns": mainTableColumns, "detailTableColumns": detailTableColumns, "fields": fields };
}

//Custom compare function for Array.sort
function columnCompareFunction(a, b) {
	//The table colums are sorted by "order" and, if two ore more colums have the same "order", by "name".
	if (a.order < b.order) return -1;
	if (a.order > b.order) return 1;
	//if a.order == b.order sort by name:
	if (a.name.toUpperCase() < b.name.toUpperCase()) return -1;
	if (a.name.toUpperCase() > b.name.toUpperCase()) return 1;
	//if a.name.toUpperCase() == b.name.toUpperCase() return 0:
	return 0;
}

function trimAndSplit(input) {
	return input.replace(/\s/g, "").replace(/;/g, ",").split(",");
}

function setHeaderIcon(columnField, icon){
	var header = parent.document.getElementById(tableController.grid.getUID() + columnField);
	if (header != null) {
		var headerSpan = header.getElementsByClassName('slick-column-name')[0];
		headerSpan.innerHTML = icon.outerHTML;
	}
}
 
function initIcon(domId, title, transform){
	var icon = document.getElementById(domId);
	var originalButtonSize = parseInt(icon.height.baseVal.value);
	var transformFactor = transform / currentScaleFactor;
	if (detectMicrosoftBrowser() == false) {
		icon.setAttribute("transform", "matrix(" + transform + ",0,0," + transform + ",0,0)");
	} else {
		var iconGroup = document.getElementById(domId + "_group");
		iconGroup.setAttribute("transform", "matrix(" + transform + ",0,0," + transform + ",0,0)");
		icon.style.height = originalButtonSize * transformFactor + "px";
		icon.style.width = originalButtonSize * transformFactor + "px";
	}
	icon.setAttribute("visibility", "visible");

	var span = parent.document.createElement("span");
	span.setAttribute("title", title)	
	span.setAttribute("style", "display:flex");
	span.innerHTML = icon.outerHTML;
	return span;
}

/**
* Functions for subscribing, filtering and preparing data 
*/
var subscriptionData = {};
function subscribeLiveData() {
	if(tableLoaded){
		webMI.gfx.setVisible("label_loading", false);
		tableController.clearData();
		runtimeMode = "live";
		tableController.triggerLiveRequests();
		var filter = createQueryFilter();
		liveSubscription = webMI.data.subscribeFilter(filter, function (item) {
			if(appendLiveData != appendLiveMode){
				appendLiveMode = appendLiveData;
				subscriptionData = {}
				tableController.clearData();
			}

			if (typeof item.error != "undefined") {
				var errorstring = item.errorstring ? item.error + " (" + item.errorstring + ")" : item.error;
				errorstring = item.address ? (errorstring + " T{for node} " + item.address) : errorstring;
				tableController.setMessage("T{Error}: " + translateErrorCode(errorstring));
			}

			prepareData(item);

			if(subscriptionData[item.address] && !appendLiveMode){
                item.id = subscriptionData[item.address];
				tableController.updateData(subscriptionData[item.address], item, true);
			} else {
				var id = tableController.addData({ result: [item] });
				if(!appendLiveMode) {
				subscriptionData[item.address] = id[0];
			}
			}
		});
	}
}

function unsubscribeLiveData() {
	if (liveSubscription != null)
		webMI.data.unsubscribeFilter(liveSubscription);

    subscriptionData = {};
	liveSubscription = null;
}

function requestHistoricalData() {
	if (tableLoaded) {
		if (currentRangeFilterMode == RangeFilterModes.FROM_TO && defaultMode == "continue") {
            runtimeMode = "continue";
			tableController.triggerContinueRequests();
		} else if(currentRangeFilterMode == RangeFilterModes.FROM_NUMROWS || currentRangeFilterMode == RangeFilterModes.TO_NUMROWS) {
			runtimeMode = "manually";
			tableController.triggerManuallyRequests("manually");
		} else {
			runtimeMode = "triggered";
			tableController.triggerStopRequests();
		}
		tableController.clearData();
		tableController.startDataRequest();
	}
}

function createQueryFilter() {
	var filter_type = [];
	if (filterType == "event" || filterType == "all" || filterType == "")
		filter_type.push("v:3"); //event
	if (filterType == "alarm" || filterType == "all" || filterType == "")
		filter_type.push("v:2"); //alarm
	if (filterType == "value" || filterType == "aggregate" || filterType == "all" || filterType == "")
		filter_type.push("v:1"); //value or aggregate

	var filter = {};

	filter.language = ["v:T{}"]

	if (rangeFrom != null || rangeTo != null) {
		filter.timestamp = ["n:"];
		if (rangeFrom && (currentRangeFilterMode == RangeFilterModes.FROM_TO || currentRangeFilterMode == RangeFilterModes.FROM_NUMROWS))
			filter.timestamp[0] += ">=" + rangeFrom;
		if (rangeTo && (currentRangeFilterMode == RangeFilterModes.FROM_TO || currentRangeFilterMode == RangeFilterModes.TO_NUMROWS))
			filter.timestamp[0] += "<" + rangeTo;
	}

	//do not filter by AGENT.OBJECTS.* as it will create large database queries
	if (filterSource)
		filter.address = ["g:*" + filterSource + "*"];
	filter.type = filter_type;
	filterPriority = parseFloat(filterPriority);

	if (filterPriority > 0)
		filter.priority = ["n:>=" + filterPriority];

	if (filterEventText)
		filter.eventtext = ["g:*" + filterEventText + "*"];

	if (filterValue)
		filter.value = ["g:*" + filterValue + "*"];

	if (filterUsername)
		filter.username = ["g:*" + filterUsername + "*"];

	if (filterComment)
		filter.Comment = ["g:*" + filterComment + "*"];

	if (filterGroup) {
		var groupArray = trimAndSplit(filterGroup);
		filter.Group = [];
		for (var i = 0; i < groupArray.length; i++) {
			filter.Group.push("v:" + groupArray[i]);
		}
	}

	/* numrows depend on rangefilter */
	var useNumRows = parseInt(webMI.query["num_rows"], 10);
	if(currentRangeFilterMode == RangeFilterModes.FROM_NUMROWS || currentRangeFilterMode == RangeFilterModes.TO_NUMROWS)
		useNumRows = filterNumRows;

	filter.numrows = ["v:" + useNumRows];
	filter.select = columns.fields.slice();
	filter.select.push("v:type");

	if (filterType == "aggregate") {
		filter.select.push("v:aggregate"); 
		filter.select.push("v:interval");
		filter.select.push("v:unit");
		filter.interval = ["v:" + filterIntervalValue];
		filter.unit = ["v:" + filterIntervalUnit];
		filter.aggregate = ["v:" + filterAggregate];
	}
	if (filterArchive != "none" && filterArchive != "")
		filter.archive = ["v:" + filterArchive];

	return filter;
}

function prepareData(item) {

	// Should only concern atvise scada:
	// if using atvise scada the status is a signed int32 value and therefore the value can be negative.
	if (item.status < 0) {
		// convert signed int32 value to unsigned value by adding 2^32.
		item.status = item.status + Math.pow(2, 32);
	}

	//set state text
	if (item.type == 1) //values 
		item.state = createValueStatustext(item);
	else if (item.type == 2) //alarms
		item.state = item.state == 0 ? "T{inactiv ack.}" : (item.state == 1 ? "T{ACTIVE!}" : (item.state == 2 ? "T{activ ack.}" : (item.state == 3 ? "T{INACTIVE!}" : (item.state == 5 ? "T{(IN)ACTIVE!}" : "T{Unknown}: (" + item.state + ")"))));
	
	//short address
	if (item.address) {
		item.address = item.address.replace(/AGENT\.OBJECTS\./g, "");
	    item.address = item.address.replace(/AGENT.ALARMING.Groups./g, "");
	}

	// Sort Groups array and concat its elements
	if (item.Groups && Array.isArray(item.Groups)) {
		item.Groups = item.Groups.sort().join(", ");
	    item.Groups = item.Groups.replace(/AGENT.ALARMING.Groups./g, "");
	}

	//localize text properties
	item.description = formatString(item, "description");
	item.eventtext = formatString(item, "eventtext");
	item.Comment = formatString(item, "Comment");
	item.ConfirmedState = formatString(item, "ConfirmedState");
	item.EnabledState = formatString(item, "EnabledState");
	item.SuppressedState = formatString(item, "SuppressedState");
	item.ShelvingState = formatString(item, "ShelvingState");
	item.display = formatString(item, "display");

	//set shelved, suppressed, confirmed and enabled if not set by server
	if(item.type == 2){
		item.EnabledStateId = item.EnabledStateId !== undefined ? item.EnabledStateId : true;	
		item.ConfirmedStateId = item.ConfirmedStateId !== undefined ? item.ConfirmedStateId : false;
		item.SuppressedStateId = item.SuppressedStateId !== undefined ? item.SuppressedStateId : false;
		// if (typeof item.SuppressedState != "undefined") console.log(item.SuppressedState);
		item.ShelvingState = item.ShelvingState ? item.ShelvingState : "Unshelved";
	}

	//set type text
	item.type = item.type == 1 ? "T{V}" : (item.type == 2 ? "T{A}" : (item.type == 3 ? "T{E}" : "T{U} (" + item.type + ")"));

	//Limit item value string length for better table performance
	if (Array.isArray(item.value))
		item.value = item.value.toString();
	if (typeof item.value === 'string' || item.value instanceof String) {
	    item.value = item.value.replace(/AGENT.ALARMING.Groups./g, "");
		if (item.value.length > 250) item.value = webMI.escapeHTML(item.value.substr(0, 250) + "...");
	}

	//set event text in case of filterType "aggregate"
	if (filterType == "aggregate") {
		if(item.aggregate && item.interval && item.unit)
			item.eventtext = item.aggregate + " (" + item.interval + " " + getUnitText(item.unit) + ")";
		else
			item.eventtext = filterAggregate + " (" + filterIntervalValue + " " + getUnitText(filterIntervalUnit) + ")";
	}
}

function createValueStatustext(item) {
	if (typeof item.status != "undefined") {
		if (item.status == 0)
			return "";

		if ((item.status & 0x80000000).toString(16) != 0)
			return "Bad: (0x" + item.status.toString(16) + ")";
		else if ((item.status & 0xC0000000).toString(16) == 0)
			return "Good: (0x" + item.status.toString(16) + ")";
		else if ((item.status & 0xC0000000).toString(16) == 40000000)
			return "Uncertain: (0x" + item.status.toString(16) + ")";

		return "Unknown: (0x" + item.status.toString(16) + ")";
	} else {
		return "";
	}
}

function formatString(obj, attribute) {
	if (obj[attribute]) {
		var text = typeof obj[attribute] === "string" ? obj[attribute] : obj[attribute]["T{}"];
		try {
			return webMI.sprintf(text, obj, "T{}");
		} catch (err) {
			console.error(attribute + ": " + text + "\n error: " + err);
		}
	}
	return "";
}


/**
* Functions for visualization of filters
*/
function getAggregateList(startAddress) {
	webMI.trigger.fire("setItems", {}, "combo_aggregate");
	webMI.trigger.fire("setSelectedItem", "", "combo_aggregate");

	if (typeof startAddress == "undefined" || startAddress == "")
		startAddress = "AGENT.HISTORY.AGGREGATETEMPLATES";

	webMI.data.call("BrowseNodes", {
		startAddress: startAddress,
		vTypes: ["i=61", "i=62", "i=2340", "ns=1;s=ObjectTypes.ATVISE.AggregateTemplate", "ns=1;s=ObjectTypes.ATVISE.AggregateFunction"]
	}, function (templates) {
		var confAggregate = false;
		for (var tmp in templates) {
			var template = templates[tmp];
			for (var agg in template.childs) {
				browseAggregate(template.childs[agg]);
			}
		}

		function browseAggregate(aggregate) {
			var childs = aggregate.childs;
			var aggregateAddress = aggregate.name;
			for (var prop in childs) {
				if (childs[prop].childs !== null) {
					browseAggregate(childs[prop]);
				} else if ((aggregateFunctions.indexOf(childs[prop].text) > -1) || (childs["interval_value"].value && childs["interval_unit"].value)) {
					var aggregateType = childs[prop].text;
					if (childs["interval_value"].value && childs["interval_unit"].value) {
						addAggregate(aggregateAddress, aggregateType, childs["interval_value"].value, childs["interval_unit"].value);
					} else {
						webMI.data.read([aggregateAddress + ".interval_value", aggregateAddress + ".interval_unit"], function (e) {
							addAggregate(aggregateAddress, aggregateType, e[0].value, e[1].value);
						});
					}
				}
			}
		}

		function addAggregate(aggregateAddress, aggregateType, intervalValue, intervalUnit) {
			var unitText = (intervalUnit == "s") ? "T{sec.}" : ((intervalUnit == "m") ? "T{min.}" : ((intervalUnit == "h") ? "T{hour(s)}" : ((intervalUnit == "d") ? "T{day(s)}" : "T{month(s)}")));
			var text = aggregateAddress.replace("AGENT.HISTORY.AGGREGATETEMPLATES.", "") + " (" + aggregateType + " " + intervalValue + "	 " + unitText + ")";
			var aggregate = {
				"aggregateType": aggregateType,
				"intervalValue": intervalValue,
				"intervalUnit": intervalUnit
			};
			webMI.trigger.fire("addItem", { text: text, value: aggregate }, "combo_aggregate");

			//Select first aggregate of combobox						
			if (!confAggregate) {
				webMI.trigger.fire("setSelectedItem", text, "combo_aggregate");
			}
			confAggregate = true;

			// ie11 hack for endsWith
            if (!String.prototype.endsWith) {
              String.prototype.endsWith = function(searchString, position) {
                  var subjectString = this.toString();
                  if (typeof position !== 'number' || !isFinite(position) || Math.floor(position) !== position || position > subjectString.length) {
                    position = subjectString.length;
                  }
                  position -= searchString.length;
                  var lastIndex = subjectString.indexOf(searchString, position);
                  return lastIndex !== -1 && lastIndex === position;
              };
            }
			//If a filterAggregate is set at the display's parameter, select it
			if (aggregateAddress.endsWith(defaultFilterAggregate.trim())) {
				webMI.trigger.fire("setSelectedItem", text, "combo_aggregate");
			}
		}
	});
}

function setPredefinedAggregates(selectedItem) {
	for (var i = 0; i < aggregateFunctions.length; i++) {
		webMI.trigger.fire("addItem", {
			text: aggregateFunctions[i],
			value: aggregateFunctions[i]
		}, "combo_predefined_aggregate");
	}
	if (selectedItem == null || selectedItem.trim() == "") {
		webMI.trigger.fire("setSelectedItem", aggregateFunctions[0], "combo_predefined_aggregate");
	} else {
		webMI.trigger.fire("setSelectedItem", selectedItem, "combo_predefined_aggregate");
	}
}

function getArchives(filterType) {
	webMI.trigger.fire("setItems", [{ text: "T{[none]}", value: "none" }], "combo_archive");
	var vBase = "ns=1;s=ObjectTypes.ATVISE.ArchiveGroup";
	var vTypes = [vBase + ".Data", vBase + ".Event"];
	if (filterType == "value")
		vTypes = [vBase + ".Data"];
	else if (filterType == "alarm" || filterType == "event")
		vTypes = [vBase + ".Event"];
	else if (filterType == "aggregate")
		vTypes = [vBase + ".Aggregate"];

	webMI.data.call("BrowseNodes", {
		startAddress: "AGENT.HISTORY",
		vTypes: vTypes
	}, function (archives) {
		var isArchiveSet = false;
		for (var n in archives) {
			webMI.trigger.fire("addItem", { text: archives[n].text, value: archives[n].text }, "combo_archive");
			if (archives[n].text == defaultFilterArchive) {
				webMI.trigger.fire("setSelectedItem", defaultFilterArchive, "combo_archive");
				isArchiveSet = true;
			}
		}
		if (!isArchiveSet)
			webMI.trigger.fire("setSelectedItem", "T{[none]}", "combo_archive");
	});
}

function toggleFilter(force) {
	if (showFilter === false && (typeof force == "undefined" || force)) {
		webMI.gfx.setHeight("filters_bg", yOffset);
		tableLayer.style.top = PanelTopPositionExpandedTransformed + "px";
		tableLayer.style.height = PanelHeightExpandedTransformed + "px";
		webMI.gfx.setText("showFilter_button_label", "T{Hide advanced}");
		webMI.gfx.setVisible("adv_1", true);
		if (filterType == "aggregate")
			webMI.gfx.setVisible("adv_3", true);
		else
			webMI.gfx.setVisible("adv_2", true);
		webMI.gfx.setVisible("adv_6", filterType == "alarm" || filterType == "all"); //Filters for severity, comment and alarm group 
		showFilter = true;
	} else if (showFilter === true && (typeof force == "undefined" || !force)) {
		webMI.gfx.setText("showFilter_button_label", "T{Advanced filters}");
		webMI.gfx.setVisible("adv_1", false);
		webMI.gfx.setVisible("adv_2", false);
		webMI.gfx.setVisible("adv_3", false);
		webMI.gfx.setVisible("adv_6", false);
		webMI.gfx.setHeight("filters_bg", yOffset - yMove);
		tableLayer.style.top = PanelTopPositionCollapsedTransformed + "px";
		tableLayer.style.height = PanelHeightCollapsedTransformed + "px";
		showFilter = false;
	}
	tableController.grid.resizeCanvas();
}

function setDefaultFilters() {

	filterPriority = parseFloat(webMI.query["severity"]);
	if (isNaN(filterPriority)) filterPriority = 0;
	filterSource = webMI.query["source"];
	filterUsername = webMI.query["user"];
	filterEventText = webMI.query["message"];
	filterValue = webMI.query["value"];
	defaultFilterArchive = webMI.query["archive"];
	filterType = typeTexts[filterTypeNum];
	filterComment = webMI.query["comment"];
	filterGroup = webMI.query["group"];
	filterAggregate = webMI.query["aggregate"];
	filterIntervalValue = parseInt(webMI.query["interval_value"]);
	filterIntervalUnit = webMI.query["interval_unit"];
	filterNumRows = parseInt(webMI.query["num_rows"], 10);

	webMI.trigger.fire("com.atvise.datepicker_from", filterFrom, "date_from");
	webMI.trigger.fire("com.atvise.datepicker_to", filterTo, "date_to");
	webMI.trigger.fire("setValue", filterUsername, "inout_username");
	webMI.trigger.fire("setValue", filterEventText, "inout_event");
	webMI.trigger.fire("setValue", filterValue, "inout_value");
	webMI.trigger.fire("setSelectedItem", filterType, "combo_type"); //this trigger calls getArchives()
	webMI.trigger.fire("setValue", filterPriority, "picker_priority");
	webMI.trigger.fire("setValue", filterSource, "address_source"); // this trigger calls getAggregateList(filterSource)
	webMI.trigger.fire("setValue", filterIntervalValue, "picker_intervalvalue");
	webMI.trigger.fire("setValue", filterComment, "inout_comment");
	webMI.trigger.fire("setValue", filterGroup, "inout_group");
	webMI.trigger.fire("setValue", filterNumRows, "picker_number_of_rows");

	if (!hasBrowseNodes) {
		var unitText = getUnitText(filterIntervalUnit);
		webMI.trigger.fire("setSelectedItem", filterAggregate, "combo_predefined_aggregate");
		webMI.trigger.fire("setSelectedItem", unitText, "combo_intervalunit");
		webMI.trigger.fire("setValue", filterIntervalValue, "picker_intervalvalue");
	}

	setRangeFilterMode(parseInt(webMI.query["range_filter_mode"]), 10);
}

function setRangeFilterMode(mode) {
	currentRangeFilterMode = mode;
	switch (mode) {
	default: 
		currentRangeFilterMode = RangeFilterModes.FROM_TO;
		//falls through to RangeFilterModes.FROM_TO
	case RangeFilterModes.FROM_TO:
		webMI.gfx.setText("lbl_from", "T{From}:");
		webMI.trigger.fire("com.atvise.datepicker_from", rangeFrom, "date_from");
		webMI.gfx.setVisible("group_to", true);
		webMI.gfx.setVisible("group_number_of_rows", false);
		break;
	case RangeFilterModes.FROM_NUMROWS:
		webMI.gfx.setText("lbl_from", "T{From}:");
		webMI.trigger.fire("com.atvise.datepicker_from", rangeFrom, "date_from");
		webMI.gfx.setVisible("group_to", false);
		webMI.gfx.setVisible("group_number_of_rows", true);
		break;
	case RangeFilterModes.TO_NUMROWS:
		webMI.gfx.setText("lbl_from", "T{To}:");
		webMI.trigger.fire("com.atvise.datepicker_from", rangeTo, "date_from");
		webMI.gfx.setVisible("group_to", false);
		webMI.gfx.setVisible("group_number_of_rows", true);
		break;
	}
}

function getUnitText(unitValue) {
	for (var i = 0; i < units.length; i++) {
		if (units[i].value == unitValue)
			return units[i].text;
	}
	return "";
}

function translateErrorCode(errorstring) {
console.log(errorstring + " | " + typeof(errorstring));
	switch(errorstring) {
		case 2152333312:
			return "T{Continuation Point Invalid}. T{The filter result might be incomplete.}";
		case 2152398848:
			return "T{No Continuation Points}. T{The filter result might be incomplete.}";
		default:
			return errorstring;
	}
}

/**
 * Table Callback Functions
 */
function dataRequestFunction(continuation) {
	webMI.gfx.setVisible("label_loading", "inherit");
	webMI.gfx.setText("label_loading", "T{loading...}");

	var that = this;
	var filter = createQueryFilter();

	if (typeof continuation != "undefined" && continuation.CP != null) {
		webMI.data.queryNext(
			continuation.CP.value,
			addDataToController
		);
	} else {
		webMI.data.queryFilter(
			filter,
			addDataToController
		);
	}

    function addDataToController(e) {
			if (typeof e.More != "undefined" && e.More != false && e.continuationpoint > 0) {
				e.CP = {value: e.continuationpoint};
			}

			if (typeof e.error != "undefined") {
				var errorstring = e.errorstring ? e.error + " (" + e.errorstring + ")" : e.error;
				errorstring = e.address ? (errorstring + " T{for node} " + e.address) : errorstring;
				tableController.setMessage("T{Error} @ queryFilter: " + translateErrorCode(errorstring));
			}


			if (typeof e.errors != "undefined") {
				for (var i = 0; i < e.errors.length; i++) {
					var hex = (typeof e.errors[i].error == "number") ? " (0x" + e.errors[i].error.toString(16) + ")" : "";
					tableController.setMessage("T{Error} @ queryFilter: " + e.errors[i].error + hex + " T{for node} " + e.errors[i].node);
				}
			}

			if(typeof e.result != "undefined") {
				for (var i = 0; i < e.result.length; i++) {
					prepareData(e.result[i]);
				}
				if(typeof that.addData == "function")
					that.addData(e);
			}
			webMI.gfx.setVisible("label_loading", false);
			enableApplyButton = true;
		}
}

function dataReleaseFunction(continuation) {
	if (typeof continuation != "undefined" && continuation.CP != null) {
		webMI.data.queryRelease(continuation.CP.value);
	}
}

function shelveIconFormatter(row, cell, value, columnDef, dataContext) {
	if(value == "OneShotShelved")
		return iconOneshotshelved.outerHTML;
	else if(value == "TimedShelved")
		return iconTimeshelved.outerHTML;	
	else if(value == "Unshelved")
		return iconUnshelved.outerHTML;
}

function suppressIconFormatter(row, cell, value, columnDef, dataContext) {
	if(value !== undefined){
		if(value)
			return iconSuppressed.outerHTML;
		else
			return iconUnsuppressed.outerHTML; 
	}
}

function confirmIconFormatter(row, cell, value, columnDef, dataContext) {
	if(value !== undefined){
		if(value)
			return iconConfirmed.outerHTML;
		else
			return iconUnconfirmed.outerHTML; 
	}
}

function enableIconFormatter(row, cell, value, columnDef, dataContext) {
	if(value !== undefined){
		if(value)
			return iconEnabled.outerHTML;
		else
			return iconDisabled.outerHTML; 
	}
}

function rowFormatter(item, rowIndex) {
	if ((item.status & 0xC0000000).toString(16) == 0)
		return [];
	else 
		return [badStatusRowStyle];
}


/* Formatting function for row details - modify as you need */
function createSubTable(item) {
	var tableStyle = 'height:' + parseInt(webMI.query["detail_text_size"] / currentScaleFactor) * 1.15 + 'px;font-size:' + (webMI.query["detail_text_size"] / currentScaleFactor)+'px';

	var output = '<table cellpadding="5" cellspacing="0" border="0" style="margin-left:74px;min-width:70%">' +
		'<tr>' +
		'<td class="detail_head" style="'+tableStyle+'"><strong>T{Parameter}</strong></td>'+
		'<td class="detail_head" style="'+tableStyle+'"><strong>T{Value}</strong></td>' +
		'</tr>';

	for (var i = 0; i < columns.detailTableColumns.length; i++) {
		var field = columns.detailTableColumns[i].field;
		// Fields containing a value are shown
		if (item[field]) {
			output += '<tr>' +
				'<td class="detail_line" style="'+tableStyle+'">' + columns.detailTableColumns[i].name + '</td>'+
				'<td class="detail_line" style="'+tableStyle+'">';
			var type = columns.detailTableColumns[i].type;
			
			if (type.startsWith("datetime"))
				output += formatTimestamp(item[field]);
			else
				output += item[field];
				
			output += '</td></tr>';
		}
	}

	output += '</table>';
	return output;
}

function formatTimestamp(timestamp) {
	if (!timestamp)
		return "";
	var date = new Date(parseInt(timestamp, 10));
	return webMI.sprintf("%d-%02d-%02d %02d:%02d:%02d.%03d", date.getFullYear(), date.getMonth() + 1, date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds());
}

/*
 * SimpleDynamics
 */
webMI.addEvent("showFilter", "click", function (e) {
	toggleFilter();
});

/*
 * Triggers
 */
webMI.trigger.connect("clicked", function (e) {
	if (filterType == "aggregate" && filterAggregate == "") {
		webMI.gfx.setVisible("label_loading", "inherit");
		webMI.gfx.setText("label_loading", "T{No aggregate selected}!");
		return;
	}

	if (!isLive && enableApplyButton) {
		requestHistoricalData();
		enableApplyButton = false;
	}
}, "btn_apply");

webMI.trigger.connect("valuechanged", function (e) {

	if (isLive = e.value == true) {
		rangeFrom = rangeTo = null;
		filterFrom = filterTo = null;
	} else {
		rangeTo = filterTo = (new Date()).getTime();
		rangeFrom = filterFrom = filterTo - filterStart;
	}

	if (isLive) {
		subscribeLiveData();
	} else {
		unsubscribeLiveData();
		requestHistoricalData();
	}

	webMI.trigger.fire("com.atvise.datepicker_from", filterFrom, "date_from");
	webMI.trigger.fire("com.atvise.datepicker_to", filterTo, "date_to");
	webMI.trigger.fire("com.atvise.setActive", !isLive, "inout_username");
	webMI.trigger.fire("com.atvise.setActive", !isLive, "inout_event");
	webMI.trigger.fire("com.atvise.setActive", !isLive, "inout_value");
	webMI.trigger.fire("com.atvise.setActive", !isLive, "inout_comment");
	webMI.trigger.fire("com.atvise.setActive", !isLive, "inout_group");
	webMI.trigger.fire("com.atvise.setActive", !isLive, "date_from");
	webMI.trigger.fire("com.atvise.setActive", !isLive, "date_to");
	webMI.trigger.fire("com.atvise.setActive", !isLive, "picker_priority");
	webMI.trigger.fire("com.atvise.setActive", !isLive, "address_source");
	webMI.trigger.fire("com.atvise.setActive", !isLive, "combo_type");
	webMI.trigger.fire("com.atvise.setActive", !isLive, "combo_archive");
	webMI.trigger.fire("com.atvise.setActive", !isLive, "combo_aggregate");
	webMI.trigger.fire("com.atvise.setActive", !isLive, "combo_predefined_aggregate");
	webMI.trigger.fire("com.atvise.setActive", !isLive, "combo_intervalunit");
	webMI.trigger.fire("com.atvise.setActive", !isLive, "picker_intervalvalue");
	webMI.trigger.fire("com.atvise.setActive", !isLive, "picker_number_of_rows");

	if (!isLive)
		setSupportedFilters();

	toggleAppendLiveData(isLive);

}, "cb_live");

webMI.trigger.connect("valuechanged", function (e) {
	filterType = e.value;
	if (hasBrowseNodes)
		getArchives(filterType);
	webMI.gfx.setVisible("adv_6", showFilter && (filterType == "alarm" || filterType == "all")); //Filters for priority, comment and alarm group 

	if (filterType == "aggregate") {
		toggleFilter(true);
		if (showFilter) {
			webMI.gfx.setVisible("adv_2", false);
			webMI.gfx.setVisible("adv_3", true);
		}
	} else if (showFilter) {
		webMI.gfx.setVisible("cb_live", true);
		webMI.gfx.setVisible("adv_2", true);
		webMI.gfx.setVisible("adv_3", false);
	}
}, "combo_type");

webMI.trigger.connect("valuechanged", function (e) {
	if (currentRangeFilterMode != RangeFilterModes.TO_NUMROWS) {
		rangeFrom = e.value;
	} else {
		rangeTo = e.value;
	}
}, "date_from");

webMI.trigger.connect("valuechanged", function (e) {
	rangeTo = e.value;
}, "date_to");

webMI.trigger.connect("valuechanged", function (e) {
	filterPriority = e.value;
}, "picker_priority");

webMI.trigger.connect("valuechanged", function (e) {
	filterSource = e.value;
	if (hasBrowseNodes)
		getAggregateList(filterSource);
}, "address_source");

webMI.trigger.connect("valuechanged", function (e) {
	filterUsername = e.value;
}, "inout_username");

webMI.trigger.connect("valuechanged", function (e) {
	filterEventText = e.value;
}, "inout_event");

webMI.trigger.connect("valuechanged", function (e) {
	filterValue = e.value;
}, "inout_value");

webMI.trigger.connect("valuechanged", function (e) {
	filterComment = e.value;
}, "inout_comment");

webMI.trigger.connect("valuechanged", function (e) {
	filterGroup = e.value;
}, "inout_group");

webMI.trigger.connect("valuechanged", function (e) {
	filterAggregate = e.value.aggregateType;
	filterIntervalUnit = e.value.intervalUnit;
	filterIntervalValue = e.value.intervalValue;
}, "combo_aggregate");

webMI.trigger.connect("valuechanged", function (e) {
	filterAggregate = e.value;
	if (filterAggregate == "Sampled") {
		webMI.trigger.fire("setItems", units, "combo_intervalunit");
	} else {
		webMI.trigger.fire("setItems", units.slice(1), "combo_intervalunit");
		if (filterIntervalUnit == "s")
			webMI.trigger.fire("setSelectedItem", "T{minute(s)}", "combo_intervalunit");
	}
}, "combo_predefined_aggregate");

webMI.trigger.connect("valuechanged", function (e) {
	filterIntervalUnit = e.value;
}, "combo_intervalunit");

webMI.trigger.connect("valuechanged", function (e) {
	filterIntervalValue = e.value;
}, "picker_intervalvalue");

webMI.trigger.connect("valuechanged", function (e) {
	filterArchive = e.value;
	defaultFilterArchive = e.value;
}, "combo_archive");

webMI.trigger.connect("clicked", function (e) {
	setDefaultFilters();
}, "btn_reset");

webMI.trigger.connect("valuechanged", function (e) {
	filterNumRows = e.value;
}, "picker_number_of_rows");


var contextMenuStyle = { maxRows: 10, fontFamily: "Verdana", fontSize: 11, fontFill: webMI.query["globalFontColor"], width: 150, fill: "#ffffff", stroke: webMI.query["globalBorderColor"], strokeWidth: 1, hoverFill: "#e5e5e5", closeTime: 0, zIndex: 100, showType: "right" };
webMI.callExtension("SYSTEM.LIBRARY.ATVISE.QUICKDYNAMICS.Open Context Menu", {
	"id": "btn_show_settings_menu",
	"closeOnMouseout":"false",
	"itemsCount": 4,
	"menuObj": {
		0: { text: "____T{Range filters}___", value: function () { } },
		1: { text: "T{From - To}", value: function () { setRangeFilterMode(RangeFilterModes.FROM_TO); } },
		2: { text: "T{From - Number of rows}", value: function () { setRangeFilterMode(RangeFilterModes.FROM_NUMROWS); } },
		3: { text: "T{Number of rows - To}", value: function () { setRangeFilterMode(RangeFilterModes.TO_NUMROWS); } },
	},
	"onEvent": ["click", "touchstart"],
	"outputNode": "",
	"minWidth": 150,
	"style": contextMenuStyle,
	"x": 829,
	"y": 40
});


/**
 * simple open dialogs
 * @param parameter
 * @returns {Promise<WindowClient> | *}
 * @private
 */
function _openDialog(parameter) {
    var w = 400;
    var h = 250;
    var id = webMI.display.openWindow(
        {
            display: parameter.display, // "SYSTEM.LIBRARY.ATVISE.OBJECTDISPLAYS.Advanced.dialogs.message_dialog",
            height: h, width: w,
            modal: true,
            resizable: false,
            movable: true,
            scrollbars: false,
            menubar: false,
            status: false,
            toolbar: false,
            query: {
                headline: parameter.headline,
                msg1: parameter.msg1,
                msg2: parameter.msg2,
                btn1: parameter.btn1,
                btn2: parameter.btn2,
                action_btn2: parameter.action_btn2
            }
        });
    return id;
}

webMI.addOnresize(function () {

	if (webMI.getConfig("frame.scaletype") != "native") return;

	setPanelHeightAndTop();

	if (showFilter == true) {
		tableLayer.style.top = PanelTopPositionExpandedTransformed + "px";
		tableLayer.style.height = PanelHeightExpandedTransformed + "px";
	} else {
		tableLayer.style.top = PanelTopPositionCollapsedTransformed + "px";
		tableLayer.style.height = PanelHeightCollapsedTransformed + "px";
	}

	tableController.grid.resizeCanvas();

});]]></script>
</svg>
