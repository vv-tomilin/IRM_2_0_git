<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<svg width="80" xmlns:atv="http://webmi.atvise.com/2007/svgext" version="1.2" height="30" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://www.w3.org/2000/svg">
 <defs/>
 <desc>Same behaviour as "Button Set Address".</desc>
 <title>Clickarea</title>
 <metadata>
  <atv:parameter behavior="mandatory" desc="base" valuetype="address" name="base"/>
  <atv:parameter behavior="mandatory" desc="value" valuetype="string" name="value"/>
  <atv:parameter behavior="optional" desc="fill color when inactive" defaultvalue="SYSTEM.GLOBALS.atvInactiveColor" valuetype="global" group="Appearance" name="fillColorInactive"/>
  <atv:parameter behavior="optional" desc="focus stroke color" defaultvalue="#FFFFFF" substitute="$FOCUSSTROKECOLOR$" valuetype="color" group="Appearance" name="focusStrokeColor"/>
  <atv:parameter behavior="optional" defaultvalue="SYSTEM.GLOBALS.atvBorderColor" desc="border color" substitute="$BORDERCOLOR$" group="Appearance" name="borderColor" valuetype="global"/>
  <atv:parameter behavior="optional" desc="address to set at MouseDown" valuetype="address" group="Options" name="onMouseDownNode"/>
  <atv:parameter behavior="optional" desc="value MouseDown" valuetype="string" group="Options" name="onMouseDownValue"/>
  <atv:parameter behavior="optional" desc="address to set at MouseUp" valuetype="address" group="Options" name="onMouseUpNode"/>
  <atv:parameter behavior="optional" desc="value MouseUp" valuetype="string" group="Options" name="onMouseUpValue"/>
  <atv:parameter behavior="optional" desc="tab index" valuetype="number" group="Options" name="tabIndex"/>
  <atv:parameter behavior="optional" desc="tooltip" valuetype="trstring" group="Options" name="tooltip"/>
  <atv:parameter behavior="optional" desc="necessary right" config="SYSTEM.SECURITY.RIGHTS" valuetype="address" group="Security" name="right"/>
  <atv:parameter behavior="optional" desc="activation address" valuetype="address" group="Security" name="activeNode"/>
  <atv:parameter behavior="optional" desc="activation value" valuetype="address" group="Security" name="activeValue"/>
  <atv:gridconfig width="20" enabled="false" height="20" gridstyle="lines"/>
  <atv:snapconfig width="10" enabled="true" height="10"/>
 </metadata>
 <rect visibility="hidden" width="80" stroke="$FOCUSSTROKECOLOR$" fill-opacity="0" stroke-width="1" atv:refpx="40" atv:refpy="16" id="button_stroke_focus" height="30" x="0" y="0" fill="none"/>
 <rect width="80" stroke="$BORDERCOLOR$" fill-opacity="0" stroke-width="1" atv:refpx="40" atv:refpy="15" id="button_clickarea" height="30" x="0" y="0" fill="#ffffff"/>
 <script type="text/ecmascript"><![CDATA[var base = (webMI.query["base"] == undefined) ? "" : webMI.query["base"];
var newValue = webMI.query["value"];
var fillColorInactive = webMI.query["fillColorInactive"];
var tabHandler = webMI.callExtension("SYSTEM.LIBRARY.ATVISE.QUICKDYNAMICS.Tab Handler");
var tabIndex = (webMI.query["tabIndex"] == undefined) ? "" : webMI.query["tabIndex"];
var tooltip = (webMI.query["tooltip"] == undefined) ? "" : webMI.query["tooltip"];

webMI.gfx.setStroke("button_clickarea","");

if (newValue == "true") {
	newValue = true;
} else if (newValue == "false") {
	newValue = false;
} else {
	try {
		var temp = parseFloat(newValue);
		if (!isNaN(temp)) {
			newValue = temp;
		}
	} catch(e) {}
}

var onMouseDownValue = webMI.query["onMouseDownValue"];
var onMouseDownNode = (webMI.query["onMouseDownNode"] == undefined) ? "" : webMI.query["onMouseDownNode"];
var onMouseUpValue = webMI.query["onMouseUpValue"];
var onMouseUpNode = (webMI.query["onMouseUpNode"] == undefined) ? "" : webMI.query["onMouseUpNode"];
var strokeNormal = "none";

var right = (webMI.query["right"] == undefined) ? "" : webMI.query["right"];
if (right.search(/SYSTEM\.SECURITY\.RIGHTS\./) != -1) {
	right = right.substring(23,right.length); //remove "prefix" SYSTEM.SECURITY.RIGHTS.
}

var active = false;
var hasRight = false;

if (right != "") {
	webMI.addEvent(webMI.data, "clientvariableschange", function(e) {
		hasRight=false;
		if (("username" in e) && (e.username != "")) {
				hasRight = webMI.hasRight(right);
		}
		deActivate();
	});
}

var activeValue = (webMI.query["activeValue"] == undefined) ? "" :webMI.query["activeValue"];
var activeNode = (webMI.query["activeNode"] == undefined) ? "" : webMI.query["activeNode"];
var nodeIsActive = false;

if ((activeNode != "") && (String(activeValue) != "")) {
	webMI.data.subscribe(activeNode, function(e) {
		var nodeActiveValue = e.value;
		if (typeof nodeActiveValue == "boolean") {
			nodeIsActive = (String(nodeActiveValue) == activeValue);
		} else if (typeof nodeActiveValue == "number") {
			try {
				var temp = parseFloat(activeValue);
				nodeIsActive = (nodeActiveValue == temp);
			} catch(e) {
				nodeIsActive = false;
			}
		} else {
			nodeIsActive = (nodeActiveValue == activeValue);
		}
		deActivate();
	});
} else {
	deActivate();
}

function deActivate() {
	if (right != "") {
		if ((String(activeValue) != "") && (activeNode != "")) {
			active=(nodeIsActive && hasRight);
		} else {
			active=hasRight;
		}
	} else {
		if ((String(activeValue) != "") && (activeNode != "")) {
			active=nodeIsActive;
		} else {
			active=true;
		}
	}
	if (active) {
		webMI.gfx.setFillOpacity("button_clickarea", 0);
	} else {
		webMI.gfx.setFillOpacity("button_clickarea", 100);
		webMI.gfx.setFill("button_clickarea", fillColorInactive);
	}
}

function focusTH(){
	if (active) {
		webMI.gfx.setVisible("button_stroke_focus", null);
	}
}
function blurTH(){
	if (active) {
		webMI.gfx.setVisible("button_stroke_focus", false);
	}
}
function applyTH(){
	if (active) {
		if (base != "") {
			webMI.data.write(base, newValue);
		}
		webMI.trigger.fire("valuechanged", newValue, "");
	}
}
function backTH(){}
function arrowTH(dir){}
function keyHandler(keyTH,param2){
	if (keyTH == "focus"){
		focusTH();
	} else if (keyTH == "blur"){
		blurTH();
	} else if (keyTH == "apply"){
		applyTH();
	} else if (keyTH == "back"){
		backTH();
	} else if (keyTH == "arrow"){
		arrowTH(param2);
	} else if (keyTH == "isActive"){
		return active && param2(document.getElementById("button_clickarea").parentNode);
	}
}
webMI.addEvent("button_clickarea", "mousedown", function(e) {
	var id = "id_0";
	var value = true;
	return function(value) {
		if (active) {
			if (onMouseDownNode != "") {
				webMI.data.write(onMouseDownNode, onMouseDownValue);
			}
			webMI.trigger.fire("valuechangedMouseDown", onMouseDownValue, "");
		}
	} (value);
});


webMI.addEvent("button_clickarea", "mouseup", function(e) {
	var id = "id_0";
	var value = true;
	return function(value) {
		if (active) {
			if (onMouseUpNode != "") {
				webMI.data.write(onMouseUpNode, onMouseUpValue);
			}
			webMI.trigger.fire("valuechangedMouseUp", onMouseUpValue, "");
		}
	} (value);
});

webMI.addEvent("button_clickarea", "click", function(e) {
	if (active) {
		tabHandler.setCurrentIndex(keyHandler);
		if (base != "") {
			webMI.data.write(base, newValue);
		}
		webMI.trigger.fire("valuechanged", newValue, "");
	}
});

webMI.addEvent("button_clickarea", "dragstart", function(e) {
	if (e.preventDefault) {
		e.preventDefault();
	}
});
webMI.addOnload(function() {
	var doc = document.getElementById("button_clickarea").ownerDocument;
	tabHandler.register(tabIndex,keyHandler,doc);
});

if (tooltip != ""){
	webMI.callExtension("SYSTEM.LIBRARY.ATVISE.QUICKDYNAMICS.Tooltip", {"auto":"true", "id":"button_clickarea", "text":tooltip});
}]]></script>
</svg>
