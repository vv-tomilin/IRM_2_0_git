<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<svg version="1.2" xmlns:atv="http://webmi.atvise.com/2007/svgext" width="80" height="30" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
 <defs>
  <linearGradient id="linear_1" y1="0" y2="1" x1="1" x2="1">
   <stop offset="0" stop-color="#ffffff" stop-opacity="0"/>
   <stop offset="1" stop-color="#ffffff" stop-opacity="0"/>
  </linearGradient>
  <linearGradient id="linear_2" y1="0" y2="1" x1="1" x2="1">
   <stop offset="0" stop-color="#ffffff" stop-opacity="0.35"/>
   <stop offset="1" stop-color="#ffffff" stop-opacity="0.35"/>
  </linearGradient>
 </defs>
 <desc>Opens the specified display.</desc>
 <title>Button Open Display</title>
 <metadata>
  <atv:parameter valuetype="address" name="base" behavior="hidden" desc="base"/>
  <atv:parameter substitute="$LABEL$" valuetype="trstring" name="label" behavior="optional" defaultvalue="T{Display}" desc="label"/>
  <atv:parameter valuetype="display" name="display" behavior="mandatory" desc="target display"/>
  <atv:parameter valuetype="display" name="smallDisplay" behavior="optional" desc="target display small"/>
  <atv:parameter valuetype="string" name="frame" behavior="mandatory" defaultvalue="content" desc="target frame"/>
  <atv:parameter substitute="$FONTFAMILY$" valuetype="enum" name="fontFamily" behavior="optional" config="Times New Roman=Times New Roman,Bodoni,Garamond,Minion Web,ITC Stone Serif,MS Georgia,Bitstream Cyberbit,serif;Arial=MS Trebuchet,ITC Avant Garde Gothic,MS Arial,MS Verdana,Univers,Futura,ITC Stone Sans,Gill Sans,Akzidenz Grotesk,Helvetica,sans-serif;Courier=Courier,MS Courier New,Prestige,Everson Mono,monospace;Zapf-Chancery=Caflisch Script,Adobe Poetica,Sanvito,Ex Ponto,Snell Roundhand,Zapf-Chancery,cursive;Alpha Geometrique=Alpha Geometrique,Critter,Cottonwood,FB Reactor,Studz,fantasy" group="Font" defaultvalue="Arial" desc="family"/>
  <atv:parameter substitute="$FONTSIZE$" valuetype="enum" name="fontSize" behavior="optional" config="6;7;8;9;10;11;12;14;16;18;20;22;24;26;28;36;48;72" group="Font" defaultvalue="12" desc="size"/>
  <atv:parameter substitute="$FONTCOLOR$" valuetype="global" name="fontColor" behavior="optional" group="Font" defaultvalue="SYSTEM.GLOBALS.atvFontColor" desc="color"/>
  <atv:parameter substitute="$VISIBILITYLABEL$" valuetype="enum" name="visibilityLabel" behavior="optional" config="visible=inherit;hidden=hidden" group="Appearance" defaultvalue="inherit" desc="visibility label"/>
  <atv:parameter substitute="$VISIBILITYSYMBOL$" valuetype="enum" name="visibilitySymbol" behavior="optional" config="visible=inherit;hidden=hidden" group="Appearance" defaultvalue="hidden" desc="visibility symbol"/>
  <atv:parameter substitute="$SYMBOL$" valuetype="display" name="symbol" behavior="optional" config="SYSTEM.LIBRARY.ATVISE.OBJECTDISPLAYS.Symbols.20x20" group="Appearance" defaultvalue="SYSTEM.LIBRARY.ATVISE.OBJECTDISPLAYS.Symbols.20x20.display" desc="symbol"/>
  <atv:parameter valuetype="global" name="symbolColor" behavior="optional" group="Appearance" defaultvalue="SYSTEM.GLOBALS.atvSymbolColor" desc="symbol color"/>
  <atv:parameter substitute="$FILLCOLOR$" valuetype="global" name="fillColor" behavior="optional" group="Appearance" defaultvalue="SYSTEM.GLOBALS.atvFillColor" desc="fill color"/>
  <atv:parameter valuetype="global" name="fillColorInactive" behavior="optional" group="Appearance" defaultvalue="SYSTEM.GLOBALS.atvInactiveColor" desc="fill color when inactive"/>
  <atv:parameter valuetype="color" name="strokePressed" behavior="optional" group="Appearance" defaultvalue="#ffffff" desc="stroke color pressed"/>
  <atv:parameter valuetype="color" name="focusStrokeColor" behavior="optional" group="Appearance" defaultvalue="#FFFFFF" desc="focus stroke color"/>
  <atv:parameter substitute="$BORDERCOLOR$" valuetype="global" name="borderColor" behavior="optional" group="Appearance" defaultvalue="SYSTEM.GLOBALS.atvBorderColor" desc="border color"/>
  <atv:parameter valuetype="color" name="extraBorderColor" behavior="optional" group="Appearance" defaultvalue="none" desc="extra border color"/>
  <atv:parameter valuetype="address" name="right" behavior="optional" config="SYSTEM.SECURITY.RIGHTS" group="Security" desc="necessary right"/>
  <atv:parameter valuetype="address" name="activeNode" behavior="optional" group="Security" desc="activation address"/>
  <atv:parameter valuetype="string" name="activeValue" behavior="optional" group="Security" desc="activation value"/>
  <atv:parameter valuetype="number" name="tabIndex" behavior="optional" group="Options" desc="tab index"/>
  <atv:parameter valuetype="trstring" name="tooltip" behavior="optional" group="Options" desc="tooltip"/>
  <atv:gridconfig enabled="true" gridstyle="lines" height="2" width="2"/>
  <atv:snapconfig enabled="true" height="2" width="2"/>
 </metadata>
 <g id="button_clickarea" atv:refpy="15" atv:refpx="40">
  <rect id="outer_frame" ry="2.8" width="80" atv:bindbr="1,1" fill="$BORDERCOLOR$" stroke="none" atv:refpy="16.017" height="30" atv:refpx="40.252" stroke-width="4" x="0" y="0" rx="2.8" atv:bindtl="0,0" atv:dynamic="true"/>
  <rect id="button_bg" ry="2.1" width="78" atv:bindbr="1,1" fill="$FILLCOLOR$" stroke="none" atv:refpy="15.948" height="28" atv:refpx="40.245" stroke-width="4" x="1" y="1" rx="2.1" atv:bindtl="0,0" atv:dynamic="true"/>
  <rect id="button_stroke" ry="2.1" width="76" atv:bindbr="1,1" fill="url(#linear_1)" stroke="none" atv:refpy="15.881" height="26" atv:refpx="40.238" stroke-width="1" x="2" y="2" fill-opacity="1" rx="2.1" atv:bindtl="0,0" atv:dynamic="true"/>
  <svg id="button_symbol" width="20" atv:bindbr="0.5,0.5" atv:refpy="15" height="20" atv:refpx="70" x="30" y="5" atv:bindtl="0.5,0.5" visibility="$VISIBILITYSYMBOL$" xlink:href="$SYMBOL$">
   <atv:argument prefix="symbolColor" name="symbolColor"/>
  </svg>
  <text id="button_label" font-size="$FONTSIZE$" atv:bindbr="0.5,0.5" fill="$FONTCOLOR$" atv:refpy="15" atv:refpx="61" font-family="$FONTFAMILY$" x="40" y="19.5" atv:bindtl="0.5,0.5" visibility="$VISIBILITYLABEL$" text-anchor="middle">$LABEL$</text>
  <rect id="id_6" ry="2.1" width="78" atv:bindbr="1,1" fill="#d6d6d6" stroke="none" atv:refpy="16" height="28" atv:refpx="40" stroke-width="4" x="1" y="1" fill-opacity="0.001" rx="2.1" atv:bindtl="0,0" atv:dynamic="true"/>
 </g>
 <script type="text/ecmascript"><![CDATA[var targetFrame = webMI.query["frame"];
var strokeNormal = "none";
var strokePressed = webMI.query["strokePressed"];
var extraBorderColor = webMI.query["extraBorderColor"];
var focusStrokeColor = webMI.query["focusStrokeColor"];
var fillColor = webMI.query["fillColor"];
var fillColorInactive = webMI.query["fillColorInactive"];
var display = (webMI.query["display"] == undefined) ? "" : webMI.query["display"];
var smallDisplay = (webMI.query["smallDisplay"] == undefined) ? "" : webMI.query["smallDisplay"];
display = webMI.getClientInfo() ? (webMI.getClientInfo().isDesktop ? display : (smallDisplay ? smallDisplay : display)) : display;
var tabHandler = webMI.callExtension("SYSTEM.LIBRARY.ATVISE.QUICKDYNAMICS.Tab Handler");
var tabIndex = (webMI.query["tabIndex"] == undefined) ? "" : webMI.query["tabIndex"];
var tooltip = (webMI.query["tooltip"] == undefined) ? "" : webMI.query["tooltip"];

var right = (webMI.query["right"] == undefined) ? "" : webMI.query["right"];
if (right.search(/SYSTEM\.SECURITY\.RIGHTS\./) != -1) {
	right = right.substring(23,right.length); //remove "prefix" SYSTEM.SECURITY.RIGHTS.
}

var active = false;
var hasRight = false;

if (right != "") {
	webMI.addEvent(webMI.data, "clientvariableschange", function(e) {
		hasRight=false;
		if (("username" in e) && (e.username != "")) {
				hasRight = webMI.hasRight(right);
		}
		deActivate();
	});
}

var activeValue = (webMI.query["activeValue"] == undefined) ? "" :webMI.query["activeValue"];
var activeNode = (webMI.query["activeNode"] == undefined) ? "" : webMI.query["activeNode"];
var nodeIsActive = false;

if ((activeNode != "") && (String(activeValue) != "")) {
	webMI.data.subscribe(activeNode, function(e) {
		var nodeActiveValue = e.value;
		if (typeof nodeActiveValue == "boolean") {
			nodeIsActive = (String(nodeActiveValue) == activeValue);
		} else if (typeof nodeActiveValue == "number") {
			try {
				var temp = parseFloat(activeValue);
				nodeIsActive = (nodeActiveValue == temp);
			} catch(e) {
				nodeIsActive = false;
			}
		} else {
			nodeIsActive = (nodeActiveValue == activeValue);
		}
		deActivate();
	});
} else {
	deActivate();
}

if (extraBorderColor != "none" && extraBorderColor != "") {
	webMI.gfx.setStroke("button_stroke", extraBorderColor);
}

function deActivate() {
	if (right != "") {
		if ((String(activeValue) != "") && (activeNode != "")) {
			active=(nodeIsActive && hasRight);
		} else {
			active=hasRight;
		}
	} else {
		if ((String(activeValue) != "") && (activeNode != "")) {
			active=nodeIsActive;
		} else {
			active=true;
		}
	}
	if (active) {
		webMI.gfx.setFill("button_bg", fillColor);
		webMI.gfx.setVisible("button_stroke", null);
	} else {
		webMI.gfx.setFill("button_bg", fillColorInactive);
		webMI.gfx.setVisible("button_stroke", false);
	}
}

function release(stayFocued) {
	if (active) {
		webMI.gfx.setFill("button_stroke", "url(#linear_1)");
	}
	if (extraBorderColor == "none" || extraBorderColor == "") {
		if (stayFocued == false) webMI.gfx.setStroke("button_stroke", strokeNormal);
	} else {
		webMI.gfx.setStroke("button_stroke", extraBorderColor);
		webMI.gfx.setStrokeWidth("button_stroke", 1);
	}
}

function focusTH(){
	if (active) {
		webMI.gfx.setStroke("button_stroke", focusStrokeColor);
		if (extraBorderColor != "none" && extraBorderColor != "") {
			webMI.gfx.setStrokeWidth("button_stroke", 2);
		}
	}
}
function applyTH(){
	if (active && display != "") {
		if (targetFrame == "")
			webMI.display.openDisplay(display,webMI.query);
		else
			webMI.display.openDisplay(display,webMI.query,targetFrame);
	}
}
function backTH(){}
function arrowTH(dir){}
function keyHandler(keyTH,param2){
	if (keyTH == "focus"){
		focusTH();
	} else if (keyTH == "blur"){
		release(false);
	} else if (keyTH == "apply"){
		webMI.gfx.setFill("button_stroke", "url(#linear_2)");
		applyTH();
	} else if (keyTH == "releaseClick"){
		webMI.gfx.setFill("button_stroke", "url(#linear_1)");
	} else if (keyTH == "back"){
		backTH();
	} else if (keyTH == "arrow"){
		arrowTH(param2);
	} else if (keyTH == "isActive"){
		return active && param2(document.getElementById("button_clickarea").parentNode);
	}
}

webMI.addEvent("button_clickarea", "click", function(e) {
var id = "button_clickarea";
var value = true;
return function(value) {
		if (active && display != "") {
			tabHandler.setCurrentIndex(keyHandler);
			if (targetFrame == "")
				webMI.display.openDisplay(display,webMI.query);
			else
				webMI.display.openDisplay(display,webMI.query,targetFrame);
		}
} (value);
});webMI.addEvent("button_clickarea", "mousedown", function(e) {
var id = "button_clickarea";
var value = true;
return function(value) {
		if (active) {
			webMI.gfx.setFill("button_stroke", "url(#linear_2)");
			webMI.gfx.setStroke("button_stroke", strokePressed);
		}
} (value);
});webMI.addEvent("button_clickarea", "mouseup", function(e) {
var id = "button_clickarea";
var value = true;
return function(value) {
	release(true);
} (value);
});webMI.addEvent("button_clickarea", "mouseout", function(e) {
var id = "button_clickarea";
var value = true;
return function(value) {
	release(false);
} (value);
});

webMI.addEvent("button_clickarea", "dragstart", function(e) {
	if (e.preventDefault) {
		e.preventDefault();
	}
});
webMI.addOnload(function() {
	var doc = document.getElementById("button_clickarea").ownerDocument;
	tabHandler.register(tabIndex,keyHandler,doc);
});

if (tooltip != ""){
	webMI.callExtension("SYSTEM.LIBRARY.ATVISE.QUICKDYNAMICS.Tooltip", {"auto":"true", "id":"button_clickarea", "text":tooltip});
}]]></script>
</svg>
