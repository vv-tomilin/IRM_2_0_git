<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<svg xmlns:xlink="http://www.w3.org/1999/xlink" width="80" xmlns:atv="http://webmi.atvise.com/2007/svgext" height="30" xmlns="http://www.w3.org/2000/svg" version="1.2">
 <defs>
  <linearGradient y2="1" x2="1" y1="0" gradientUnits="objectBoundingBox" id="linear_1" x1="1">
   <stop stop-color="#ffffff" offset="0" stop-opacity="0"/>
   <stop stop-color="#ffffff" offset="1" stop-opacity="0"/>
  </linearGradient>
  <linearGradient y2="1" x2="1" y1="0" gradientUnits="objectBoundingBox" id="linear_2" x1="1">
   <stop stop-color="#ffffff" offset="0" stop-opacity="0.35"/>
   <stop stop-color="#ffffff" offset="1" stop-opacity="0.35"/>
  </linearGradient>
 </defs>
 <desc>Button for alarm list actions.</desc>
 <title>Button Alarmlist</title>
 <metadata>
  <atv:parameter behavior="hidden" name="base" valuetype="address" desc="base"/>
  <atv:parameter behavior="mandatory" name="tableID" valuetype="string" substitute="" defaultvalue="" desc="table ID"/>
  <atv:parameter behavior="optional" name="action" valuetype="enum" substitute="$ACTION$" defaultvalue="Acknowledge" desc="action" config="Acknowledge;Acknowledge with comment;Confirm;Confirm with comment;One shot shelve;Timed shelve;Unshelve;Unsuppress;Disable;Enable"/>
  <atv:parameter behavior="optional" name="label" valuetype="trstring" substitute="$LABEL$" defaultvalue="T{Action}" desc="label"/>
  <atv:parameter behavior="hidden" name="fontFamily" valuetype="enum" substitute="$FONTFAMILY$" defaultvalue="Arial" group="Font" desc="family" config="Times New Roman=Times New Roman,Bodoni,Garamond,Minion Web,ITC Stone Serif,MS Georgia,Bitstream Cyberbit,serif;Arial=MS Trebuchet,ITC Avant Garde Gothic,MS Arial,MS Verdana,Univers,Futura,ITC Stone Sans,Gill Sans,Akzidenz Grotesk,Helvetica,sans-serif;Courier=Courier,MS Courier New,Prestige,Everson Mono,monospace;Zapf-Chancery=Caflisch Script,Adobe Poetica,Sanvito,Ex Ponto,Snell Roundhand,Zapf-Chancery,cursive;Alpha Geometrique=Alpha Geometrique,Critter,Cottonwood,FB Reactor,Studz,fantasy"/>
  <atv:parameter behavior="optional" name="fontSize" valuetype="enum" substitute="$FONTSIZE$" defaultvalue="12" group="Font" desc="size" config="6;7;8;9;10;11;12;14;16;18;20;22;24;26;28;36;48;72"/>
  <atv:parameter behavior="optional" name="fontColor" valuetype="global" substitute="$FONTCOLOR$" defaultvalue="SYSTEM.GLOBALS.atvFontColor" group="Font" desc="color"/>
  <atv:parameter behavior="optional" name="visibilityLabel" valuetype="enum" substitute="$VISIBILITYLABEL$" defaultvalue="inherit" group="Appearance" desc="visibility label" config="visible=inherit;hidden=hidden"/>
  <atv:parameter behavior="optional" name="visibilitySymbol" valuetype="enum" substitute="$VISIBILITYSYMBOL$" defaultvalue="hidden" group="Appearance" desc="visibility symbol" config="visible=inherit;hidden=hidden"/>
  <atv:parameter behavior="optional" name="symbol" valuetype="display" substitute="$SYMBOL$" defaultvalue="SYSTEM.LIBRARY.ATVISE.OBJECTDISPLAYS.Symbols.20x20.check" group="Appearance" desc="symbol" config="SYSTEM.LIBRARY.ATVISE.OBJECTDISPLAYS.Symbols.20x20"/>
  <atv:parameter behavior="optional" name="symbolColor" valuetype="global" defaultvalue="SYSTEM.GLOBALS.atvSymbolColor" group="Appearance" desc="symbol color"/>
  <atv:parameter behavior="optional" name="fillColor" valuetype="global" substitute="$FILLCOLOR$" defaultvalue="SYSTEM.GLOBALS.atvFillColor" group="Appearance" desc="fill color"/>
  <atv:parameter behavior="optional" name="fillColorInactive" valuetype="global" defaultvalue="SYSTEM.GLOBALS.atvInactiveColor" group="Appearance" desc="fill color when inactive"/>
  <atv:parameter behavior="optional" name="strokePressed" valuetype="color" defaultvalue="#FFFFFF" group="Appearance" desc="stroke color pressed"/>
  <atv:parameter behavior="optional" name="focusStrokeColor" valuetype="color" defaultvalue="#FFFFFF" group="Appearance" desc="focus stroke color"/>
  <atv:parameter behavior="optional" name="borderColor" valuetype="global" substitute="$BORDERCOLOR$" defaultvalue="SYSTEM.GLOBALS.atvBorderColor" group="Appearance" desc="border color"/>
  <atv:parameter behavior="optional" name="extraBorderColor" valuetype="color" defaultvalue="none" group="Appearance" desc="extra border color"/>
  <atv:parameter behavior="optional" name="right" valuetype="address" group="Security" desc="necessary right" config="SYSTEM.SECURITY.RIGHTS"/>
  <atv:parameter behavior="optional" name="activeNode" valuetype="address" group="Security" desc="activation address"/>
  <atv:parameter behavior="optional" name="activeValue" valuetype="string" group="Security" desc="activation value"/>
  <atv:parameter behavior="optional" name="consistencyGroup" valuetype="string" group="Consistency" desc="group"/>
  <atv:parameter behavior="optional" name="consistencyFunction" valuetype="enum" defaultvalue="write" group="Consistency" desc="function" config="write;read"/>
  <atv:parameter behavior="optional" name="tabIndex" valuetype="number" group="Options" desc="tab index"/>
  <atv:parameter behavior="optional" name="tooltip" valuetype="trstring" group="Options" desc="tooltip"/>
  <atv:gridconfig enabled="true" width="2" height="2" gridstyle="lines"/>
  <atv:snapconfig enabled="true" width="1" height="1"/>
 </metadata>
 <g atv:refpx="40" atv:refpy="15" id="button_clickarea">
  <rect ry="2.8" width="80" x="0" y="0" stroke="none" atv:refpx="40.252" atv:refpy="16.017" atv:dynamic="true" height="30" atv:bindtl="0,0" fill="$BORDERCOLOR$" rx="2.8" id="outer_frame" stroke-width="4" atv:bindbr="1,1"/>
  <rect ry="2.1" width="78" x="1" y="1" stroke="none" atv:refpx="40.245" atv:refpy="15.948" atv:dynamic="true" height="28" atv:bindtl="0,0" fill="$FILLCOLOR$" rx="2.1" id="button_bg" stroke-width="4" atv:bindbr="1,1"/>
  <rect ry="2.1" width="76" x="2" y="2" stroke="none" atv:refpx="40.238" atv:refpy="15.881" fill-opacity="1" atv:dynamic="true" height="26" atv:bindtl="0,0" fill="url(#linear_1)" rx="2.1" id="button_stroke" stroke-width="1" atv:bindbr="1,1"/>
  <text font-family="$FONTFAMILY$" text-anchor="middle" x="40" y="19.5" visibility="$VISIBILITYLABEL$" atv:refpx="40" atv:refpy="14.5" fill="$FONTCOLOR$" atv:bindtl="0.5,0.5" id="button_label" font-size="$FONTSIZE$" atv:bindbr="0.5,0.5">$LABEL$</text>
  <svg xlink:href="$SYMBOL$" width="20" x="30" y="5" visibility="$VISIBILITYSYMBOL$" atv:refpx="130" atv:refpy="20" height="20" atv:bindtl="0.5,0.5" id="button_symbol" atv:bindbr="0.5,0.5">
   <atv:argument name="symbolColor" prefix="symbolColor"/>
  </svg>
  <rect ry="2.1" width="78" x="1" y="1" stroke="none" atv:refpx="40.246" atv:refpy="15.949" fill-opacity="0.001" atv:dynamic="true" height="28" atv:bindtl="0,0" fill="#d6d6d6" rx="2.1" id="id_6" stroke-width="4" atv:bindbr="1,1"/>
 </g>
 <script type="text/ecmascript"><![CDATA[/* ============================= */
/* STANDARD BUTTON FUNCTIONALITY */
/* ============================= */

var strokeNormal = "none";
var strokePressed = webMI.query["strokePressed"];
var extraBorderColor = webMI.query["extraBorderColor"];
var focusStrokeColor = webMI.query["focusStrokeColor"];
var fillColor = webMI.query["fillColor"];
var fillColorInactive = webMI.query["fillColorInactive"];
var display = webMI.query["display"];
var consistencyGroup = webMI.query["consistencyGroup"];
var consistencyFunction = webMI.query["consistencyFunction"];

if (consistencyGroup)
	var consistencyHandler = webMI.callExtension("SYSTEM.LIBRARY.ATVISE.QUICKDYNAMICS.Consistency Handler");

var tabHandler = webMI.callExtension("SYSTEM.LIBRARY.ATVISE.QUICKDYNAMICS.Tab Handler");
var tabIndex = (webMI.query["tabIndex"] == undefined) ? "" : webMI.query["tabIndex"];
var tooltip = (webMI.query["tooltip"] == undefined) ? "" : webMI.query["tooltip"];

var contextMenuStyle = {
    maxRows: 10,
    fontFamily: "Arial",
    fontSize: 11,
    fontFill: "#575757",
    width: 174,
    fill: "#ffffff",
    stroke: "#575757",
    strokeWidth: 1,
    hoverFill: "#e5e5e5",
    closeTime: 0,
    zIndex: 100,
    showType: "right"
};

var right = (webMI.query["right"] == undefined) ? "" : webMI.query["right"];
if (right.search(/SYSTEM\.SECURITY\.RIGHTS\./) != -1) {
	right = right.substring(23,right.length); //remove "prefix" SYSTEM.SECURITY.RIGHTS.
}

var active = false;
var hasRight = false;

if (right != "") {
	webMI.addEvent(webMI.data, "clientvariableschange", function(e) {
		hasRight=false;
		if (("username" in e) && (e.username != "")) {
				hasRight = webMI.hasRight(right);
		}
		deActivate();
	});
}

var activeValue = (webMI.query["activeValue"] == undefined) ? "" :webMI.query["activeValue"];
var activeNode = (webMI.query["activeNode"] == undefined) ? "" : webMI.query["activeNode"];
var nodeIsActive = false;

if ((activeNode != "") && (String(activeValue) != "")) {
	webMI.data.subscribe(activeNode, function(e) {
		var nodeActiveValue = e.value;
		if (typeof nodeActiveValue == "boolean") {
			nodeIsActive = (String(nodeActiveValue) == activeValue);
		} else if (typeof nodeActiveValue == "number") {
			try {
				var temp = parseFloat(activeValue);
				nodeIsActive = (nodeActiveValue == temp);
			} catch(e) {
				nodeIsActive = false;
			}
		} else {
			nodeIsActive = (nodeActiveValue == activeValue);
		}
		deActivate();
	});
} else {
	deActivate();
}

if (extraBorderColor != "none" && extraBorderColor != "") {
	webMI.gfx.setStroke("button_stroke", extraBorderColor);
}

function deActivate(forceDeActivate) {
	if (typeof forceDeActivate !== "undefined" && forceDeActivate){
		active = false;
	} else if (right != "") {
		if ((String(activeValue) != "") && (activeNode != "")) {
			active=(nodeIsActive && hasRight);
		} else {
			active=hasRight;
		}
	} else {
		if ((String(activeValue) != "") && (activeNode != "")) {
			active=nodeIsActive;
		} else {
			active=true;
		}
	}
	if (active) {
		webMI.gfx.setFill("button_bg", fillColor);
		webMI.gfx.setVisible("button_stroke", null);
	} else {
		webMI.gfx.setFill("button_bg", fillColorInactive);
		webMI.gfx.setVisible("button_stroke", false);
	}
}

function release() {
	if (active) {
		webMI.gfx.setFill("button_stroke", "url(#linear_1)");
	}
	if (extraBorderColor == "none" || extraBorderColor == "") {
		webMI.gfx.setStroke("button_stroke", strokeNormal);
	} else {
		webMI.gfx.setStroke("button_stroke", extraBorderColor);
		webMI.gfx.setStrokeWidth("button_stroke", 1);
	}
}

function focusTH(){
	if (active) {
		webMI.gfx.setStroke("button_stroke", focusStrokeColor);
		if (extraBorderColor != "none" && extraBorderColor != "") {
			webMI.gfx.setStrokeWidth("button_stroke", 2);
		}
	}
}
function applyTH(){
	if (active){
		webMI.trigger.fire("clicked", true, "");
	}
	if (consistencyGroup)
		consistencyFunction == "write" ? consistencyHandler.write(consistencyGroup) : consistencyHandler.read(consistencyGroup);
}
function backTH(){}
function arrowTH(dir){}
function keyHandler(keyTH,param2){
	if (keyTH == "focus"){
		focusTH();
	} else if (keyTH == "blur"){
		release();
	} else if (keyTH == "apply"){
		webMI.gfx.setFill("button_stroke", "url(#linear_2)");
		applyTH();
	} else if (keyTH == "releaseClick"){
		webMI.gfx.setFill("button_stroke", "url(#linear_1)");
	} else if (keyTH == "back"){
		backTH();
	} else if (keyTH == "arrow"){
		arrowTH(param2);
	} else if (keyTH == "isActive"){
		return active && param2(document.getElementById("button_clickarea").parentNode);
	}
}

webMI.addEvent("button_clickarea", "mousedown", function(e) {
	var id = "button_clickarea";
	var value = true;
	return function(value) {
		if (active) {
			webMI.gfx.setFill("button_stroke", "url(#linear_2)");
			webMI.gfx.setStroke("button_stroke", strokePressed);
		}
	} (value);
});

webMI.addEvent("button_clickarea", "mouseup", function(e) {
	var id = "button_clickarea";
	var value = true;
	return function(value) {
		release();
	} (value);
});

webMI.addEvent("button_clickarea", "mouseout", function(e) {
	var id = "button_clickarea";
	var value = true;
	return function(value) {
		release();
	} (value);
});

webMI.addEvent("button_clickarea", "click", function(e) {
	if (active){
		tabHandler.setCurrentIndex(keyHandler, function(){
			webMI.trigger.fire("clicked", true, "")
		});
	}
	if (consistencyGroup)
		consistencyFunction == "write" ? consistencyHandler.write(consistencyGroup) : consistencyHandler.read(consistencyGroup);
});

webMI.addEvent("button_clickarea", "dragstart", function(e) {
	if (e.preventDefault) {
		e.preventDefault();
	}
});
webMI.addOnload(function() {
	var doc = document.getElementById("button_clickarea").ownerDocument;
	tabHandler.register(tabIndex,keyHandler,doc);
});

webMI.trigger.connect("com.atvise.setActive",function(e){
	if (e.value){
		deActivate();
	}  else {
		deActivate(true);
	}
});

if (tooltip != ""){
	webMI.callExtension("SYSTEM.LIBRARY.ATVISE.QUICKDYNAMICS.Tooltip", {"auto":"true", "id":"button_clickarea", "text":tooltip});
}


/* ================================= */
/* ALARM ACTION BUTTON FUNCTIONALITY */
/* ================================= */

var tableID = webMI.query["tableID"];
var action = webMI.query["action"];
if (action) webMI.gfx.setText("button_label", action);
var tableController = null;

function formatAddress(address) {
    if (webMI.getMethodSupport().indexOf("AlarmAcknowledge") == -1 && address != undefined && address.indexOf("/") > -1)
        address = "./" + address;
    return address;
}

function getAlarmIds() {
    var alarmIds = [];
    tableController.grid.getSelectedRows().forEach(function(rowIndex) {
        var dataItem = tableController.grid.getDataItem(rowIndex);
        alarmIds.push(dataItem.AlarmId);
    });
    return alarmIds;
}

function getAddresses() {
    var addresses = [];
    tableController.grid.getSelectedRows().forEach(function(rowIndex) {
        var dataItem = tableController.grid.getDataItem(rowIndex);
        addresses.push(dataItem.address);
    });
    return addresses;
}

function getAlarmIdsAndAddresses() {
    var alarmIdsAndAddresses = [];
    tableController.grid.getSelectedRows().forEach(function(rowIndex) {
        var dataItem = tableController.grid.getDataItem(rowIndex);
        alarmIdsAndAddresses.push({address: dataItem.address, AlarmId: dataItem.AlarmId});
    });
    return alarmIdsAndAddresses;
}

webMI.addEvent("button_clickarea", "click", function(e) {

	if (tableController == null) tableController = webMI.table.request(tableID, "controller");

    if (action == "Acknowledge" && Object.keys(tableController.allAcknowledgeable).length > 0) {
		var idsOrAddresses = webMI.getMethodSupport().indexOf("AlarmAcknowledge") != -1 ? getAlarmIds() : getAddresses();
		tableController.Acknowledge(idsOrAddresses, typeof username != "undefined" ? username : "");
	}

	if (action == "Acknowledge with comment" && Object.keys(tableController.allAcknowledgeable).length > 0 && webMI.getMethodSupport().indexOf("AlarmAcknowledge") != -1) {
		tableController.AcknowledgeWithComment(getAlarmIdsAndAddresses());
	}

    if (action == "Confirm" && Object.keys(tableController.allConfirmable).length > 0 && webMI.getMethodSupport().indexOf("AlarmConfirm") != -1) {
		tableController.Confirm(getAlarmIds());
	}

	if (action == "Confirm with comment" && Object.keys(tableController.allConfirmable).length > 0 && webMI.getMethodSupport().indexOf("AlarmConfirm") != -1) {
		tableController.ConfirmWithComment(getAlarmIdsAndAddresses());
    }

    if (action == "One shot shelve" && Object.keys(tableController.allShelveableOnce).length > 0 && webMI.getMethodSupport().indexOf("AlarmShelve") != -1) {
		tableController.Shelve(getAlarmIdsAndAddresses(), null);
    }

    if (action == "Timed shelve" && Object.keys(tableController.allShelveableTime).length > 0 && webMI.getMethodSupport().indexOf("AlarmShelve") != -1) {
		tableController.Shelve(getAlarmIdsAndAddresses(), null, true);
    }

    if (action == "Unshelve" && Object.keys(tableController.allUnshelveable).length > 0 && webMI.getMethodSupport().indexOf("AlarmUnshelve") != -1) {
		tableController.Unshelve(getAlarmIdsAndAddresses());
    }

    if (action == "Unsuppress" && Object.keys(tableController.allUnsuppressable).length > 0 && webMI.getMethodSupport().indexOf("AlarmUnsuppress") != -1) {
		tableController.Unsuppress(getAlarmIdsAndAddresses());
    }

    if (action == "Disable" && Object.keys(tableController.allDisableable).length > 0 && webMI.getMethodSupport().indexOf("AlarmDisable") != -1) {
		tableController.Disable(getAlarmIdsAndAddresses());
    }

    if (action == "Enable" && Object.keys(tableController.allEnableable).length > 0 && webMI.getMethodSupport().indexOf("AlarmEnable") != -1) {
		tableController.Enable(getAddresses());
    }

});]]></script>
</svg>
