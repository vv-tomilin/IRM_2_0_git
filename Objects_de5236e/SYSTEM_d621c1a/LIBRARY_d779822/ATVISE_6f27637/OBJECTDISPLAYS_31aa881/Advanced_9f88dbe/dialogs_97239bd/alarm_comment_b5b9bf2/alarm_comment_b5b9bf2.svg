<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<svg width="400" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://www.w3.org/2000/svg" xmlns:atv="http://webmi.atvise.com/2007/svgext" version="1.2" height="205">
 <desc>Provides the possibility to acknowledge or confirm alarms with comment.</desc>
 <title>Alarm comment dialog</title>
 <defs/>
 <metadata>
  <atv:gridconfig width="20" enabled="false" height="20" gridstyle="lines"/>
  <atv:snapconfig width="10" enabled="false" height="10"/>
 </metadata>
 <rect stroke="none" id="background" width="400" stroke-width="0" fill="none" atv:refpx="200" x="0" height="205" y="0" atv:refpy="102.5"/>
 <text font-weight="bold" id="alarm_id_label" fill="#000000" atv:refpx="41.5" font-family="Arial" x="19.5" y="26" font-size="12" atv:refpy="21.5">T{Alarm ID}:</text>
 <text id="alarm_id" fill="#000000" atv:refpx="41.5" font-family="Arial" x="19.5" y="46" font-size="12" atv:refpy="41.5">AlarmId</text>
 <text font-weight="bold" id="condition_address_label" fill="#000000" atv:refpx="41.5" font-family="Arial" x="19.5" y="71" font-size="12" atv:refpy="66.5">T{Condition address}:</text>
 <text id="condition_address" fill="#000000" atv:refpx="41.5" font-family="Arial" x="19.5" y="91" font-size="12" atv:refpy="86.5">Condition address</text>
 <svg id="comment" transform="matrix(2.2625,0,0,1,0,0)" width="160" xlink:href="SYSTEM.LIBRARY.ATVISE.OBJECTDISPLAYS.Advanced.in_out_value" atv:refpx="200" x="8.398" height="30" y="125" atv:refpy="140">
  <atv:argument name="validation" value="String"/>
  <atv:overwrite id="input_label" transform="matrix(0.442,0,0,1,0,0)" x="354.055"/>
  <atv:overwrite id="blinking_frame" transform="matrix(0.442,0,0,1,0,0)" width="354"/>
  <atv:overwrite id="focus_frame" transform="matrix(0.442,0,0,1,0,0)" width="358"/>
  <atv:overwrite id="input_bg" transform="matrix(0.442,0,0,1,0,0)" width="354"/>
  <atv:overwrite id="id_1" transform="matrix(0.442,0,0,1,0,0)" width="360"/>
  <atv:overwrite id="id_0" transform="matrix(0.442,0,0,1,0,0)" width="362"/>
 </svg>
 <text font-weight="bold" id="comment_label" fill="#000000" atv:refpx="41.5" font-family="Arial" x="19.5" y="116" font-size="12" atv:refpy="111.5">T{Comment}:</text>
 <svg id="button" transform="matrix(1.3125,0,0,1,0,0)" width="80" xlink:href="SYSTEM.LIBRARY.ATVISE.OBJECTDISPLAYS.Advanced.button" atv:refpx="326.5" x="208.762" height="30" y="165" atv:refpy="180">
  <atv:argument name="label" value="T{ACKNOWLEDGE}"/>
  <atv:overwrite id="id_6" transform="matrix(0.7619,0,0,1,0,0)" width="103"/>
  <atv:overwrite id="button_symbol" transform="matrix(0.7619,0,0,1,0,0)" x="42.5"/>
  <atv:overwrite id="button_label" transform="matrix(0.7619,0,0,1,0,0)" x="52.5"/>
  <atv:overwrite id="button_stroke" transform="matrix(0.7619,0,0,1,0,0)" width="101"/>
  <atv:overwrite id="button_bg" transform="matrix(0.7619,0,0,1,0,0)" width="103"/>
  <atv:overwrite id="outer_frame" transform="matrix(0.7619,0,0,1,0,0)" width="105"/>
 </svg>
 <text visibility="hidden" id="error" fill="#ff0000" atv:refpx="43.5" font-family="Arial" x="21.5" y="185.239" font-size="12" atv:refpy="180.739">T{Error}:</text>
 <script type="text/ecmascript"><![CDATA[var tableID = webMI.query["tableID"];
var addressesAndIds = JSON.parse(webMI.query["addressesAndIds"]);
var action = webMI.query["action"];
var comment;
var tableController;

var alarmid_text, condition_address_text;
if (addressesAndIds.length == 1 && addressesAndIds[0].address.indexOf(",") == -1) {
	alarmid_text = addressesAndIds[0].AlarmId.replace(/AGENT.OBJECTS./g,"");
	condition_address_text = addressesAndIds[0].address.replace(/AGENT.OBJECTS./g,"");
} else {
	alarmid_text = "T{multiple selection}";
	condition_address_text = "T{multiple selection}";
}

webMI.gfx.setFill("background", webMI.query["bgColor"]);
webMI.gfx.setFill("alarm_id_label", webMI.query["fontColor"]);
webMI.gfx.setFill("alarm_id", webMI.query["fontColor"]);
webMI.gfx.setFill("condition_address_label",  webMI.query["fontColor"]);
webMI.gfx.setFill("condition_address", webMI.query["fontColor"]);
webMI.gfx.setFill("comment_label", webMI.query["fontColor"]);
webMI.gfx.setText("alarm_id", alarmid_text);
webMI.gfx.setText("condition_address", condition_address_text);
webMI.gfx.setText("button", webMI.query["action"]);

function Acknowledge(addressesAndIds, comment) {

	var buffer = [];
	for (var i = 0; i < addressesAndIds.length; i++) {
		buffer.push(addressesAndIds[i]);
		webMI.data.call("AlarmAcknowledge", {"address": addressesAndIds[i].AlarmId, "comment": comment}, function(e) {
			if (typeof e.result[0].errorstring != "undefined") {
				tableController.setMessage("T{Error}: " + e.result[0].errorstring + " [T{Confirm}: " + buffer[0].AlarmId + "]");
				buffer.shift();
			} else {
				delete tableController.allAcknowledgeable[buffer[0].AlarmId];
				buffer.shift();
			}
		});
	}

	setTimeout(function() {webMI.display.closeWindow()},50);
}

function Confirm(addressesAndIds, comment) {

	var buffer = [];
	for (var i = 0; i < addressesAndIds.length; i++) {
		buffer.push(addressesAndIds[i]);
		webMI.data.call("AlarmConfirm", {"address": addressesAndIds[i].AlarmId, "comment": comment}, function(e) {
			if (typeof e.result[0].errorstring != "undefined") {
				tableController.setMessage("T{Error}: " + e.result[0].errorstring + " [T{Confirm}: " + buffer[0].AlarmId + "]");
				buffer.shift();
			} else {
				delete tableController.allConfirmable[buffer[0].AlarmId];
				buffer.shift();
			}
		});
	}

	setTimeout(function() {webMI.display.closeWindow()},50);
}

function onButtonClick() {
	if (comment == "") {
		webMI.gfx.setVisible("error", true);
		webMI.gfx.setText("error", "T{Error}: T{Please enter a comment}!");
	} else {
		if (action == "acknowledge") {
			Acknowledge(addressesAndIds, comment);
		}
		if (action == "confirm") {
			Confirm(addressesAndIds, comment);
		}
	}
}

webMI.table.waitReady(tableID, "controller", function () {

	tableController = webMI.table.request(tableID, "controller");

	webMI.trigger.connect("valuechanged", function(e) {
		webMI.gfx.setVisible("error", false);
		comment = e.value;
	}, "comment");
	
	webMI.trigger.connect("clicked", function(e) {
		onButtonClick();
	}, "button");

});]]></script>
</svg>
