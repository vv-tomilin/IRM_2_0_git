<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<svg version="1.2" xmlns:atv="http://webmi.atvise.com/2007/svgext" height="205" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://www.w3.org/2000/svg" width="400">
 <defs/>
 <desc>Dialog for entering shelving time.</desc>
 <title>Timed shelve dialog</title>
 <metadata>
  <atv:gridconfig height="20" gridstyle="lines" enabled="true" width="20"/>
  <atv:snapconfig height="10" enabled="false" width="10"/>
 </metadata>
 <rect fill="none" id="background" height="205" stroke="none" y="0" atv:refpy="102.5" stroke-width="0" x="0" atv:refpx="200" width="400"/>
 <text fill="#000000" id="alarm_id_label" font-weight="bold" font-size="12" y="26" atv:refpy="21.5" x="19.5" atv:refpx="41.5" font-family="Arial">T{Alarm ID}:</text>
 <text fill="#000000" id="alarm_id" font-size="12" y="46" atv:refpy="41.5" x="19.5" atv:refpx="41.5" font-family="Arial">AlarmId</text>
 <text fill="#000000" id="condition_address_label" font-weight="bold" font-size="12" y="71" atv:refpy="66.5" x="19.5" atv:refpx="41.5" font-family="Arial">T{Condition address}:</text>
 <text fill="#000000" id="condition_address" font-size="12" y="91" atv:refpy="86.5" x="19.5" atv:refpx="41.5" font-family="Arial">Condition address</text>
 <text fill="#000000" id="time_label" font-weight="bold" font-size="12" y="116" atv:refpy="111.5" x="19.5" atv:refpx="32.793" font-family="Arial">T{Shelving duration}:</text>
 <svg id="time" transform="matrix(1.3773,0,0,1,0,0)" height="30" y="125" atv:refpy="140" xlink:href="SYSTEM.LIBRARY.ATVISE.OBJECTDISPLAYS.Advanced.in_out_value" x="13.796" atv:refpx="129.183" width="160">
  <atv:argument value="String" name="validation"/>
  <atv:argument value="1" name="tabIndex"/>
  <atv:overwrite id="input_label" transform="matrix(0.7261,0,0,1,0,0)" x="212.42"/>
  <atv:overwrite id="blinking_frame" transform="matrix(0.7261,0,0,1,0,0)" width="212.365"/>
  <atv:overwrite id="focus_frame" transform="matrix(0.7261,0,0,1,0,0)" width="216.365"/>
  <atv:overwrite id="input_bg" transform="matrix(0.7261,0,0,1,0,0)" width="212.365"/>
  <atv:overwrite id="id_1" transform="matrix(0.7261,0,0,1,0,0)" width="218.365"/>
  <atv:overwrite id="id_0" transform="matrix(0.7261,0,0,1,0,0)" width="220.365"/>
 </svg>
 <svg id="shelve_button" transform="matrix(1.3125,0,0,1,0,0)" height="30" y="165" atv:refpy="180" xlink:href="SYSTEM.LIBRARY.ATVISE.OBJECTDISPLAYS.Advanced.button" x="209.524" atv:refpx="326.5" width="80">
  <atv:argument value="T{Shelve}" name="label"/>
  <atv:argument value="3" name="tabIndex"/>
  <atv:overwrite id="id_6" transform="matrix(0.7619,0,0,1,0,0)" width="103"/>
  <atv:overwrite id="button_symbol" transform="matrix(0.7619,0,0,1,0,0)" x="42.5"/>
  <atv:overwrite id="button_label" transform="matrix(0.7619,0,0,1,0,0)" x="52.5"/>
  <atv:overwrite id="button_stroke" transform="matrix(0.7619,0,0,1,0,0)" width="101"/>
  <atv:overwrite id="button_bg" transform="matrix(0.7619,0,0,1,0,0)" width="103"/>
  <atv:overwrite id="outer_frame" transform="matrix(0.7619,0,0,1,0,0)" width="105"/>
 </svg>
 <text fill="#ff0000" id="error" font-size="12" y="174.673" atv:refpy="170.173" x="21.5" visibility="hidden" atv:refpx="43.5" font-family="Arial">T{Error}:</text>
 <text fill="#ff0000" id="message" font-size="12" y="191.807" atv:refpy="187.307" x="21.5" visibility="hidden" atv:refpx="43.5" font-family="Arial">Message</text>
 <svg height="30" id="unit" transform="matrix(0.8409,0,0,1,0,0)" atv:refpy="139.827" y="124.827" xlink:href="SYSTEM.LIBRARY.ATVISE.OBJECTDISPLAYS.Advanced.combobox" x="292.166" atv:refpx="312.946" width="160">
  <atv:argument value="No" name="statusEnabled"/>
  <atv:argument value="2" name="tabIndex"/>
  <atv:overwrite id="focus_frame" transform="matrix(1.1892,0,0,1,0,0)" width="130.54"/>
  <atv:overwrite id="button_stroke" transform="matrix(1.1892,0,0,1,0,0)" x="109.54"/>
  <atv:overwrite id="id_7" transform="matrix(1.1892,0,0,1,0,0)" x="109.54"/>
  <atv:overwrite id="button_bg" transform="matrix(1.1892,0,0,1,0,0)" x="109.54"/>
  <atv:overwrite id="combobox_label" transform="matrix(1.1892,0,0,1,0,0)" x="100.04"/>
  <atv:overwrite id="blinking_frame" transform="matrix(1.1892,0,0,1,0,0)" width="102.54"/>
  <atv:overwrite id="combobox_bg" transform="matrix(1.1892,0,0,1,0,0)" width="102.54"/>
  <atv:overwrite id="id_1" transform="matrix(1.1892,0,0,1,0,0)" width="132.54"/>
  <atv:overwrite id="id_0" transform="matrix(1.1892,0,0,1,0,0)" width="134.54"/>
 </svg>
 <script type="text/ecmascript"><![CDATA[var tableID = webMI.query["tableID"];
var conditionAddress = JSON.parse(webMI.query["conditionAddress"]);
var alarmId = (webMI.query["alarmId"] == "undefined") ? "-" : webMI.query["alarmId"];
var action = webMI.query["action"];
var time, unit;
var tableController;
var maxTimeShelved;
var isClicked = false;

var timeSpanUnits = [
	{text: "T{second(s)}", value: "1"},
	{text: "T{minute(s)}", value: "60"},
	{text: "T{hour(s)}", value: "3600"},
	{text: "T{day(s)}", value: "86400"}
	//{text: "T{week(s)}", value: "604800"},
	//{text: "T{month(s)}", value: "2592000"}
];
webMI.trigger.fire("setItems", timeSpanUnits, "unit");
webMI.trigger.fire("setSelectedItem", timeSpanUnits[0].text, "unit")
unit = timeSpanUnits[0].value;

webMI.table.waitReady(tableID, "controller", function () {

	if (typeof conditionAddress == "string") getMaxTimeShelved(conditionAddress);

	var alarmid_text, condition_address_text;
	if (typeof conditionAddress == "string") {
		alarmid_text = alarmId;
		condition_address_text = conditionAddress.replace(/AGENT.OBJECTS./g,"");
	} else {
		alarmid_text = "T{multiple selection}";
		condition_address_text = "T{multiple selection}";
	}

	webMI.gfx.setFill("background", webMI.query["bgColor"]);
	webMI.gfx.setFill("alarm_id_label", webMI.query["fontColor"]);
	webMI.gfx.setFill("alarm_id", webMI.query["fontColor"]);
	webMI.gfx.setFill("condition_address_label",  webMI.query["fontColor"]);
	webMI.gfx.setFill("condition_address", webMI.query["fontColor"]);
	webMI.gfx.setFill("time_label", webMI.query["fontColor"]);
	webMI.gfx.setText("alarm_id", alarmid_text);
	webMI.gfx.setText("condition_address", condition_address_text);
	webMI.gfx.setText("shelve_button", webMI.query["action"]);

	tableController = webMI.table.request(tableID, "controller");

	webMI.trigger.connect("valuechanged", function(e) {
		webMI.gfx.setVisible("error", false);
		webMI.gfx.setVisible("message", false);
		time = e.value;
	}, "time");

	webMI.trigger.connect("valuechanged", function(e) {
		webMI.gfx.setVisible("error", false);
		webMI.gfx.setVisible("message", false);
		unit = e.value;
	}, "unit");

	webMI.trigger.connect("clicked", function(e) {
		if (isClicked == false) {
			isClicked = true;
			onShelveButtonClicked();
		} else {
			isClicked = false;
		}
	}, "shelve_button");

	webMI.addEvent("shelve_button", "click", function(e) {
		if (isClicked == false) {
			isClicked = true;
			onShelveButtonClicked();
		} else {
			isClicked = false;
		}
	});

});

function onShelveButtonClicked() {
	if (isNaN(time)) {		
		webMI.gfx.setVisible("error", true);
		webMI.gfx.setVisible("message", true);
		webMI.gfx.setText("message", "T{Entered value is not a number}.");
	} else if (typeof conditionAddress == "string" && (time * unit * 1000) > maxTimeShelved) {
		webMI.gfx.setVisible("error", true);
		webMI.gfx.setVisible("message", true);

		var unitname = "";
		for (var i = 0; i < timeSpanUnits.length; i++) {
			if (timeSpanUnits[i].value == unit)
				unitname = timeSpanUnits[i].text;
		}

		var text = (maxTimeShelved / 1000 / parseInt(unit)).toFixed(3) + " " + unitname;
		webMI.gfx.setText("message", "T{Max. time is} " + text);
	} else {
		var time_ms = time * unit * 1000;
		Timeshelve(conditionAddress, alarmId, time_ms);
	}
}

function Timeshelve(conditionAddress, alarmId, time) {
	if (time == "") time = 0;
	if (typeof conditionAddress == "string") {
		webMI.data.call("AlarmShelve", {"address": formatAddress(conditionAddress), time: time}, function(e) { 
			if (typeof e.result[0].errorstring != "undefined")	{
				tableController.setMessage("T{Error}: " + e.result[0].errorstring + " [T{Timed Shelve}: " + conditionAddress + "]");
			}
		});
	} else {
		var buffer = [];
		var AdressesAndIds = conditionAddress;
		for (var i = 0; i < AdressesAndIds.length; i++) {
			buffer.push(AdressesAndIds[i]);
			webMI.data.call("AlarmShelve", {"address": formatAddress(AdressesAndIds[i].address), time: time}, function(e) {
				if (typeof e.result[0].errorstring != "undefined") {
					tableController.setMessage("T{Error}: " + e.result[0].errorstring + " [T{Timed Shelve}: " + AdressesAndIds[i].address + "]");
					buffer.shift();
				}
			});
		}
	}
	setTimeout(function() {webMI.display.closeWindow()},50);
}

function formatAddress(address) {
    if (webMI.getMethodSupport().indexOf("AlarmAcknowledge") == -1 && address != undefined && address.indexOf("/") > -1)
        address = "./" + address;
    return address;
}

function atviseVersion3(item) {
	if (webMI.getMethodSupport().indexOf("AlarmConditions") != -1) {
		isAtviseVersion3 = true;
	} else {
		isAtviseVersion3 = typeof item.ParentId !== "undefined";
	}
	return isAtviseVersion3;
}

function removeAlarmItem(item) {
	var isAtviseVersion3 = atviseVersion3(item);

    if (isAtviseVersion3) {
        if (typeof item.AlarmId != "undefined") {
			var elementsHavingAddress = tableController.search("address", item.address, true);
			for (var i = 0; i < elementsHavingAddress.length; i++) {
				var hasAlarmId = typeof elementsHavingAddress[i].AlarmId != "undefined";
				var hasParentId = typeof elementsHavingAddress[i].ParentId != "undefined";
				var hasChild = typeof elementsHavingAddress[i].child != "undefined";
				if ( !(hasAlarmId && ( (hasParentId && elementsHavingAddress[i].ParentId == item.AlarmId) || (hasChild && elementsHavingAddress[i].child.AlarmId == item.AlarmId) ) ) ) {
					tableController.delete("id", elementsHavingAddress[i].id, true);
				}
			}
		} else {
			tableController.delete("address", item.address, true);
		}
    }
}

function getMaxTimeShelved(ConditionAddress) {
	return webMI.data.call("AlarmConfiguration", {"address": ConditionAddress}, function(e) { maxTimeShelved = e.result[0].maxTimeShelved; });
}]]></script>
</svg>
