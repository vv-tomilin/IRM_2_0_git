<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<svg width="80" height="30" xmlns:atv="http://webmi.atvise.com/2007/svgext" version="1.2" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
 <defs>
  <linearGradient y2="1" id="linear_1" y1="0" x1="1" x2="1">
   <stop stop-color="#ffffff" offset="0" stop-opacity="0"/>
   <stop stop-color="#ffffff" offset="1" stop-opacity="0"/>
  </linearGradient>
  <linearGradient y2="1" id="linear_2" y1="0" x1="1" x2="1">
   <stop stop-color="#ffffff" offset="0" stop-opacity="0.35"/>
   <stop stop-color="#ffffff" offset="1" stop-opacity="0.35"/>
  </linearGradient>
 </defs>
 <desc>Sets the specified value to an address.</desc>
 <title>Button Set Address</title>
 <metadata>
  <atv:parameter name="base" valuetype="address" desc="base" behavior="mandatory"/>
  <atv:parameter name="value" valuetype="string" desc="value" behavior="mandatory"/>
  <atv:parameter name="label" valuetype="trstring" substitute="$LABEL$" defaultvalue="T{Set address}" desc="label" behavior="optional"/>
  <atv:parameter name="fontFamily" config="Times New Roman=Times New Roman,Bodoni,Garamond,Minion Web,ITC Stone Serif,MS Georgia,Bitstream Cyberbit,serif;Arial=MS Trebuchet,ITC Avant Garde Gothic,MS Arial,MS Verdana,Univers,Futura,ITC Stone Sans,Gill Sans,Akzidenz Grotesk,Helvetica,sans-serif;Courier=Courier,MS Courier New,Prestige,Everson Mono,monospace;Zapf-Chancery=Caflisch Script,Adobe Poetica,Sanvito,Ex Ponto,Snell Roundhand,Zapf-Chancery,cursive;Alpha Geometrique=Alpha Geometrique,Critter,Cottonwood,FB Reactor,Studz,fantasy" group="Font" valuetype="enum" substitute="$FONTFAMILY$" defaultvalue="Arial" desc="family" behavior="optional"/>
  <atv:parameter name="fontSize" config="6;7;8;9;10;11;12;14;16;18;20;22;24;26;28;36;48;72" group="Font" valuetype="enum" substitute="$FONTSIZE$" defaultvalue="12" desc="size" behavior="optional"/>
  <atv:parameter name="fontColor" group="Font" valuetype="global" substitute="$FONTCOLOR$" defaultvalue="SYSTEM.GLOBALS.atvFontColor" desc="color" behavior="optional"/>
  <atv:parameter name="visibilityLabel" config="visible=inherit;hidden=hidden" group="Appearance" valuetype="enum" substitute="$VISIBILITYLABEL$" defaultvalue="inherit" desc="visibility label" behavior="optional"/>
  <atv:parameter name="visibilitySymbol" config="visible=inherit;hidden=hidden" group="Appearance" valuetype="enum" substitute="$VISIBILITYSYMBOL$" defaultvalue="hidden" desc="visibility symbol" behavior="optional"/>
  <atv:parameter name="symbol" config="SYSTEM.LIBRARY.ATVISE.OBJECTDISPLAYS.Symbols.20x20" group="Appearance" valuetype="display" substitute="$SYMBOL$" defaultvalue="SYSTEM.LIBRARY.ATVISE.OBJECTDISPLAYS.Symbols.20x20.disc" desc="symbol" behavior="optional"/>
  <atv:parameter name="symbolColor" group="Appearance" valuetype="global" defaultvalue="SYSTEM.GLOBALS.atvSymbolColor" desc="symbol color" behavior="optional"/>
  <atv:parameter name="fillColor" group="Appearance" valuetype="global" substitute="$FILLCOLOR$" defaultvalue="SYSTEM.GLOBALS.atvFillColor" desc="fill color" behavior="optional"/>
  <atv:parameter name="fillColorInactive" group="Appearance" valuetype="global" defaultvalue="SYSTEM.GLOBALS.atvInactiveColor" desc="fill color when inactive" behavior="optional"/>
  <atv:parameter name="strokePressed" group="Appearance" valuetype="color" defaultvalue="#ffffff" desc="stroke color pressed" behavior="optional"/>
  <atv:parameter name="focusStrokeColor" group="Appearance" valuetype="color" substitute="$STROKECOLORFOCUS$" defaultvalue="#FFFFFF" desc="focus stroke color" behavior="optional"/>
  <atv:parameter name="borderColor" group="Appearance" valuetype="global" substitute="$BORDERCOLOR$" defaultvalue="SYSTEM.GLOBALS.atvBorderColor" desc="border color" behavior="optional"/>
  <atv:parameter name="extraBorderColor" group="Appearance" valuetype="color" substitute="" defaultvalue="none" desc="extra border color" behavior="optional"/>
  <atv:parameter name="onMouseDownNode" group="Options" valuetype="address" defaultvalue="" desc="address to set at MouseDown" behavior="optional"/>
  <atv:parameter name="onMouseDownValue" group="Options" valuetype="string" desc="value MouseDown" behavior="optional"/>
  <atv:parameter name="onMouseUpNode" group="Options" valuetype="address" desc="address to set at MouseUp" behavior="optional"/>
  <atv:parameter name="onMouseUpValue" group="Options" valuetype="string" desc="value MouseUp" behavior="optional"/>
  <atv:parameter name="tabIndex" group="Options" valuetype="number" desc="tab index" behavior="optional"/>
  <atv:parameter name="tooltip" group="Options" valuetype="trstring" desc="tooltip" behavior="optional"/>
  <atv:parameter name="right" config="SYSTEM.SECURITY.RIGHTS" group="Security" valuetype="address" desc="necessary right" behavior="optional"/>
  <atv:parameter name="activeNode" group="Security" valuetype="address" desc="activation address" behavior="optional"/>
  <atv:parameter name="activeValue" group="Security" valuetype="string" desc="activation value" behavior="optional"/>
  <atv:gridconfig width="2" gridstyle="lines" height="2" enabled="true"/>
  <atv:snapconfig width="2" height="2" enabled="false"/>
 </metadata>
 <g id="button_clickarea" atv:refpy="15" atv:refpx="40">
  <rect width="80" x="0" id="id_1" y="0" atv:refpy="21.023" atv:bindbr="1,1" atv:dynamic="true" height="30" atv:bindtl="0,0" fill="$BORDERCOLOR$" stroke="none" atv:refpx="40.326" ry="2.8" rx="2.8" stroke-width="4"/>
  <rect width="78" x="1" id="button_bg" y="1" atv:refpy="15.954" atv:bindbr="1,1" atv:dynamic="true" height="28" atv:bindtl="0,0" fill="$FILLCOLOR$" stroke="none" atv:refpx="40.319" ry="2.1" rx="2.1" stroke-width="4"/>
  <rect width="76" x="2" id="button_stroke" y="2" atv:refpy="15.887" fill-opacity="1" atv:bindbr="1,1" atv:dynamic="true" height="26" atv:bindtl="0,0" fill="url(#linear_1)" stroke="none" atv:refpx="40.312" ry="2.1" rx="2.1" stroke-width="1"/>
  <svg width="20" x="30" id="button_symbol" y="4.532" atv:refpy="19.532" atv:bindbr="0.5,0.5" height="20" visibility="$VISIBILITYSYMBOL$" atv:bindtl="0.5,0.5" xlink:href="$SYMBOL$" atv:refpx="130">
   <atv:argument name="symbolColor" prefix="symbolColor"/>
  </svg>
  <text x="40" id="button_label" text-anchor="middle" font-size="$FONTSIZE$" y="19.5" atv:refpy="15" atv:bindbr="0.5,0.5" visibility="$VISIBILITYLABEL$" atv:bindtl="0.5,0.5" font-family="$FONTFAMILY$" fill="$FONTCOLOR$" atv:refpx="61.666">$LABEL$</text>
  <rect width="78" x="1" id="id_6" y="1" atv:refpy="16.006" fill-opacity="0.001" atv:bindbr="1,1" atv:dynamic="true" height="28" atv:bindtl="0,0" fill="#d6d6d6" stroke="none" atv:refpx="40.074" ry="2.1" rx="2.1" stroke-width="4"/>
 </g>
 <script type="text/ecmascript"><![CDATA[var base = (webMI.query["base"] == undefined) ? "" : webMI.query["base"];
var strokeNormal = "none";
var strokePressed = webMI.query["strokePressed"];
var extraBorderColor = webMI.query["extraBorderColor"];
var focusStrokeColor = webMI.query["focusStrokeColor"];
var fillColor = webMI.query["fillColor"];
var fillColorInactive = webMI.query["fillColorInactive"];
var onMouseDownValue = (webMI.query["onMouseDownValue"] == undefined) ? "" : webMI.query["onMouseDownValue"];
var onMouseDownNode = (webMI.query["onMouseDownNode"] == undefined) ? "" : webMI.query["onMouseDownNode"];
var onMouseUpValue = (webMI.query["onMouseUpValue"] == undefined) ? "" : webMI.query["onMouseUpValue"];
var onMouseUpNode = (webMI.query["onMouseUpNode"] == undefined) ? "" : webMI.query["onMouseUpNode"];
var newValue = (webMI.query["value"] == undefined) ? "" : webMI.query["value"];
var tabHandler = webMI.callExtension("SYSTEM.LIBRARY.ATVISE.QUICKDYNAMICS.Tab Handler");
var tabIndex = (webMI.query["tabIndex"] == undefined) ? "" : webMI.query["tabIndex"];
var tooltip = (webMI.query["tooltip"] == undefined) ? "" : webMI.query["tooltip"];

var right = (webMI.query["right"] == undefined) ? "" : webMI.query["right"];
if (right.search(/SYSTEM\.SECURITY\.RIGHTS\./) != -1) {
	right = right.substring(23,right.length); //remove "prefix" SYSTEM.SECURITY.RIGHTS.
}

var active = false;
var hasRight = false;

if (right != "") {
	webMI.addEvent(webMI.data, "clientvariableschange", function(e) {
		hasRight=false;
		if (("username" in e) && (e.username != "")) {
				hasRight = webMI.hasRight(right);
		}
		deActivate();
	});
}

var activeValue = (webMI.query["activeValue"] == undefined) ? "" :webMI.query["activeValue"];
var activeNode = (webMI.query["activeNode"] == undefined) ? "" : webMI.query["activeNode"];
var nodeIsActive = false;

if ((activeNode != "") && (String(activeValue) != "")) {
	webMI.data.subscribe(activeNode, function(e) {
		var nodeActiveValue = e.value;
		if (typeof nodeActiveValue == "boolean") {
			nodeIsActive = (String(nodeActiveValue) == activeValue);
		} else if (typeof nodeActiveValue == "number") {
			try {
				var temp = parseFloat(activeValue);
				nodeIsActive = (nodeActiveValue == temp);
			} catch(e) {
				nodeIsActive = false;
			}
		} else {
			nodeIsActive = (nodeActiveValue == activeValue);
		}
		deActivate();
	});
} else {
	deActivate();
}

if (extraBorderColor != "none" && extraBorderColor != "") {
	webMI.gfx.setStroke("button_stroke", extraBorderColor);
}

function deActivate() {
	if (right != "") {
		if ((String(activeValue) != "") && (activeNode != "")) {
			active=(nodeIsActive && hasRight);
		} else {
			active=hasRight;
		}
	} else {
		if ((String(activeValue) != "") && (activeNode != "")) {
			active=nodeIsActive;
		} else {
			active=true;
		}
	}
	if (active) {
		webMI.gfx.setFill("button_bg", fillColor);
		webMI.gfx.setVisible("button_stroke", null);
	} else {
		webMI.gfx.setFill("button_bg", fillColorInactive);
		webMI.gfx.setVisible("button_stroke", false);
	}
}

function release() {
	if (active) {
		webMI.gfx.setFill("button_stroke", "url(#linear_1)");
	}
	if (extraBorderColor == "none" || extraBorderColor == "") {
		webMI.gfx.setStroke("button_stroke", strokeNormal);
	} else {
		webMI.gfx.setStroke("button_stroke", extraBorderColor);
		webMI.gfx.setStrokeWidth("button_stroke", 1);
	}
}

function focusTH(){
	if (active) {
		webMI.gfx.setStroke("button_stroke", focusStrokeColor);
		if (extraBorderColor != "none" && extraBorderColor != "") {
			webMI.gfx.setStrokeWidth("button_stroke", 2);
		}
	}
}
function applyTH(){
	if (active) {
		if ((base != "") && (String(newValue) != "")) {
			if (newValue == "true") {
				newValue = true;
			} else if (newValue == "false") {
				newValue = false;
			} else {
				try {
					var temp = parseFloat(newValue);
					if (!isNaN(temp)) {
						newValue = temp;
					}
				} catch(e) {}
			}
			webMI.data.write(base, newValue);
		}
		webMI.trigger.fire("valuechanged", newValue, "");
	}
}
function backTH(){}
function arrowTH(dir){}
function keyHandler(keyTH,param2){
	if (keyTH == "focus"){
		focusTH();
	} else if (keyTH == "blur"){
		release();
	} else if (keyTH == "apply"){
		webMI.gfx.setFill("button_stroke", "url(#linear_2)");
		applyTH();
	} else if (keyTH == "releaseClick"){
		webMI.gfx.setFill("button_stroke", "url(#linear_1)");
	} else if (keyTH == "back"){
		backTH();
	} else if (keyTH == "arrow"){
		arrowTH(param2);
	} else if (keyTH == "isActive"){
		return active && param2(document.getElementById("button_clickarea").parentNode);
	}
}

webMI.addEvent("button_clickarea", "mousedown", function(e) {
var id = "button_clickarea";
var value = true;
return function(value) {
	if (active) {
		webMI.gfx.setFill("button_stroke", "url(#linear_2)");
		webMI.gfx.setStroke("button_stroke", strokePressed);
		if ((onMouseDownNode != "") && (String(onMouseDownValue) != "")) {
			if (onMouseDownValue == "true") {
				onMouseDownValue = true;
			} else if (onMouseDownValue == "false") {
				onMouseDownValue = false;
			} else {
				try {
					var temp = parseFloat(onMouseDownValue);
					if (!isNaN(temp)) {
						onMouseDownValue = temp;
					}
				} catch(e) {}
			}
			webMI.data.write(onMouseDownNode, onMouseDownValue);
		}
		webMI.trigger.fire("valuechangedMouseDown", onMouseDownValue, "");
	}
} (value);
});

webMI.addEvent("button_clickarea", "mouseup", function(e) {
var id = "button_clickarea";
var value = true;
return function(value) {
	release();
	if (active) {
		if ((onMouseUpNode != "") && (String(onMouseUpValue) != "")) {
			if (onMouseUpValue == "true") {
				onMouseUpValue = true;
			} else if (onMouseUpValue == "false") {
				onMouseUpValue = false;
			} else {
				try {
					var temp = parseFloat(onMouseUpValue);
					if (!isNaN(temp)) {
						onMouseUpValue = temp;
					}
				} catch(e) {}
			}
			webMI.data.write(onMouseUpNode, onMouseUpValue);
		}
		webMI.trigger.fire("valuechangedMouseUp", onMouseUpValue, "");
	}
} (value);
});

webMI.addEvent("button_clickarea", "mouseout", function(e) {
var id = "button_clickarea";
var value = true;
return function(value) {
	release();
} (value);
});

webMI.addEvent("button_clickarea", "click", function(e) {
var id = "button_clickarea";
var value = true;
return function(value) {
	if (active) {
		tabHandler.setCurrentIndex(keyHandler);
		if ((base != "") && (String(newValue) != "")) {
			if (newValue == "true") {
				newValue = true;
			} else if (newValue == "false") {
				newValue = false;
			} else {
				try {
					var temp = parseFloat(newValue);
					if (!isNaN(temp)) {
						newValue = temp;
					}
				} catch(e) {}
			}
			webMI.data.write(base, newValue);
		}
		webMI.trigger.fire("valuechanged", newValue, "");
	}
} (value);
});

webMI.addEvent("button_clickarea", "dragstart", function(e) {
	if (e.preventDefault) {
		e.preventDefault();
	}
});
webMI.addOnload(function() {
	var doc = document.getElementById("button_clickarea").ownerDocument;
	tabHandler.register(tabIndex,keyHandler,doc);
});

if (tooltip != ""){
	webMI.callExtension("SYSTEM.LIBRARY.ATVISE.QUICKDYNAMICS.Tooltip", {"auto":"true", "id":"button_clickarea", "text":tooltip});
}]]></script>
</svg>
