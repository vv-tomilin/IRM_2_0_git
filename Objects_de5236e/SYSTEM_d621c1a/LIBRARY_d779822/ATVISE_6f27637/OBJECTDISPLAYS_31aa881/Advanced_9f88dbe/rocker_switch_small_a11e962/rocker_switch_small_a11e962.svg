<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" height="80" xmlns:atv="http://webmi.atvise.com/2007/svgext" version="1.2" width="40">
 <defs>
  <linearGradient gradientUnits="objectBoundingBox" y1="0" y2="1" x2="1" id="linear_1" x1="1">
   <stop stop-opacity="0" offset="0" stop-color="#ffffff"/>
   <stop stop-opacity="0" offset="1" stop-color="#ffffff"/>
  </linearGradient>
  <linearGradient gradientUnits="objectBoundingBox" y1="0" y2="1" x2="1" id="linear_2" x1="1">
   <stop stop-opacity="0.3" offset="0" stop-color="#ffffff"/>
   <stop stop-opacity="0.3" offset="1" stop-color="#ffffff"/>
  </linearGradient>
 </defs>
 <desc>Increments/decrements value of an address.</desc>
 <title>Rocker Switch small</title>
 <metadata>
  <atv:parameter desc="base" behavior="mandatory" valuetype="address" name="base"/>
  <atv:parameter desc="alarm address" behavior="optional" valuetype="address" name="alarm" defaultvalue=""/>
  <atv:parameter desc="enable status monitoring" behavior="optional" config="Yes;No" valuetype="enum" name="statusEnabled" defaultvalue="Yes"/>
  <atv:parameter desc="fire status trigger" behavior="optional" valuetype="string" name="statusTrigger" defaultvalue=""/>
  <atv:parameter desc="step to increment" behavior="optional" valuetype="number" name="stepInc" defaultvalue="1"/>
  <atv:parameter desc="step to decrement" behavior="optional" valuetype="number" name="stepDec" defaultvalue="1"/>
  <atv:parameter desc="interval [ms] (0 = off)" behavior="optional" valuetype="number" name="interval" defaultvalue="150"/>
  <atv:parameter substitute="$FONTFAMILY$" desc="family" behavior="optional" group="Font" config="Times New Roman=Times New Roman,Bodoni,Garamond,Minion Web,ITC Stone Serif,MS Georgia,Bitstream Cyberbit,serif;Arial=MS Trebuchet,ITC Avant Garde Gothic,MS Arial,MS Verdana,Univers,Futura,ITC Stone Sans,Gill Sans,Akzidenz Grotesk,Helvetica,sans-serif;Courier=Courier,MS Courier New,Prestige,Everson Mono,monospace;Zapf-Chancery=Caflisch Script,Adobe Poetica,Sanvito,Ex Ponto,Snell Roundhand,Zapf-Chancery,cursive;Alpha Geometrique=Alpha Geometrique,Critter,Cottonwood,FB Reactor,Studz,fantasy" valuetype="enum" name="fontFamily" defaultvalue="Arial"/>
  <atv:parameter substitute="$FONTSIZE$" desc="size" behavior="optional" group="Font" config="6;7;8;9;10;11;12;14;16;18;20;22;24;26;28;36;48;72" valuetype="enum" name="fontSize" defaultvalue="12"/>
  <atv:parameter substitute="$FONTCOLOR$" desc="color" behavior="optional" group="Font" valuetype="global" name="fontColor" defaultvalue="SYSTEM.GLOBALS.atvFontColor"/>
  <atv:parameter substitute="$FILLCOLOR$" desc="fill color" behavior="optional" group="Appearance" valuetype="global" name="fillColor" defaultvalue="SYSTEM.GLOBALS.atvFillColor"/>
  <atv:parameter substitute="$INPUTFILL$" desc="value field fill color" behavior="optional" group="Appearance" valuetype="color" name="inputFill" defaultvalue="#ffffff"/>
  <atv:parameter desc="value field fill color inactive" behavior="optional" group="Appearance" valuetype="global" name="fillColorInactive" defaultvalue="SYSTEM.GLOBALS.atvInactiveColor"/>
  <atv:parameter substitute="$ARROWFILL$" desc="fill color arrow" behavior="optional" group="Appearance" valuetype="global" name="arrowFill" defaultvalue="SYSTEM.GLOBALS.atvSymbolColor"/>
  <atv:parameter desc="stroke color button pressed" behavior="optional" group="Appearance" valuetype="color" name="buttonStrokePressed" defaultvalue="#ffffff"/>
  <atv:parameter substitute="$FOCUSSTROKECOLOR$" desc="focus stroke color" behavior="optional" group="Appearance" valuetype="color" name="focusStrokeColor" defaultvalue="#FFFFFF"/>
  <atv:parameter substitute="$BORDERCOLOR$" desc="border color" behavior="optional" group="Appearance" valuetype="global" name="borderColor" defaultvalue="SYSTEM.GLOBALS.atvBorderColor"/>
  <atv:parameter desc="status indication" behavior="optional" group="Appearance" valuetype="global" name="statusIndication" defaultvalue="SYSTEM.GLOBALS.atvStatusIndication"/>
  <atv:parameter desc="alarm indication" behavior="optional" group="Appearance" valuetype="global" name="alarmIndication" defaultvalue="SYSTEM.GLOBALS.atvAlarmIndication"/>
  <atv:parameter desc="minimum" behavior="optional" group="Options" valuetype="number" name="min"/>
  <atv:parameter desc="maximum" behavior="optional" group="Options" valuetype="number" name="max"/>
  <atv:parameter desc="consistency group" behavior="optional" group="Options" valuetype="string" name="consistencyGroup"/>
  <atv:parameter desc="tab index" behavior="optional" group="Options" valuetype="number" name="tabIndex"/>
  <atv:parameter desc="tooltip" behavior="optional" group="Options" valuetype="trstring" name="tooltip"/>
  <atv:parameter desc="necessary right" behavior="optional" group="Security" config="SYSTEM.SECURITY.RIGHTS" valuetype="address" name="right"/>
  <atv:parameter desc="activation address" behavior="optional" group="Security" valuetype="address" name="activeNode"/>
  <atv:parameter desc="activation value" behavior="optional" group="Security" valuetype="string" name="activeValue"/>
  <atv:gridconfig height="2" enabled="true" gridstyle="lines" width="2"/>
  <atv:snapconfig height="1" enabled="true" width="1"/>
 </metadata>
 <g id="clickarea_dec" atv:refpx="20" atv:refpy="66.5">
  <rect atv:bindbr="1,1" ry="3.5" rx="3.5" x="0" id="id_20" atv:refpx="20" atv:bindtl="0,0.66" y="53" stroke-width="0.5" height="27" fill="$BORDERCOLOR$" atv:refpy="66.5" width="40" stroke="none"/>
  <rect atv:bindbr="1,1" ry="2.5" rx="2.5" x="1" id="dec_bg" atv:refpx="20" atv:bindtl="0,0.66" y="54" stroke-width="0.5" height="25" fill="$FILLCOLOR$" atv:refpy="66.5" width="38" stroke="none"/>
  <rect atv:bindbr="1,1" ry="2.5" rx="2.5" x="1" id="dec_stroke" atv:refpx="46" atv:bindtl="0,0.66" y="54" stroke-width="0.5" height="25" fill="$FILLCOLOR$" atv:refpy="66.5" width="38" stroke="none"/>
  <rect atv:bindbr="0.6,0.835" x="15" id="icon_minus" atv:refpx="20" atv:bindtl="0.4,0.830" y="66.25" stroke-width="2" height="0.5" fill="$ARROWFILL$" atv:refpy="66.5" width="10" stroke="none"/>
 </g>
 <rect x="0" id="input_element" atv:refpx="20" y="26.66" height="2.66" stroke-width="0.5" fill="#ffffff" width="40" stroke="none" atv:refpy="40" fill-opacity="0"/>
 <g id="input_clickarea" atv:refpx="20" atv:refpy="40">
  <rect atv:bindbr="1,0.66" ry="3.5" rx="3.5" x="0" id="id_19" atv:refpx="20" atv:bindtl="0,0.33" y="27" stroke-width="0.5" height="26" fill="$BORDERCOLOR$" atv:refpy="40" width="40" stroke="none"/>
  <rect atv:bindbr="1,0.66" ry="2.5" rx="2.5" x="1" id="input_bg" atv:refpx="20" atv:bindtl="0,0.33" y="28" stroke-width="0.5" height="24" fill="$FILLCOLOR$" atv:refpy="40" width="38" stroke="none"/>
  <rect atv:bindbr="1,0.66" ry="2" rx="2" x="1.5" id="focus_frame" atv:refpx="19.963" atv:bindtl="0,0.33" y="28.5" stroke-width="1" height="23" fill="none" atv:refpy="40.549" width="37" stroke="none"/>
  <rect atv:bindbr="1,0.66" ry="1" rx="1" x="4" id="input_field_widget" atv:refpx="19" atv:bindtl="0,0.33" y="31" stroke-width="2" height="18" fill="$INPUTFILL$" atv:refpy="40" width="32" stroke="none"/>
  <rect atv:bindbr="1,0.66" ry="1" rx="1" x="4" id="blinking_frame" atv:refpx="19" atv:bindtl="0,0.33" y="31" stroke-width="2" height="18" fill="none" atv:refpy="40" width="32" stroke="none"/>
  <text font-family="$FONTFAMILY$" atv:bindbr="0.5,0.5" x="20" id="input_label" atv:refpx="20" atv:bindtl="0.5,0.5" y="44.5" font-size="$FONTSIZE$" fill="$FONTCOLOR$" text-anchor="middle" atv:refpy="40">0</text>
 </g>
 <g id="clickarea_inc" atv:refpx="20" atv:refpy="13.5">
  <rect atv:bindbr="1,0.33" ry="3.5" rx="3.5" x="0" id="id_5" atv:refpx="20" atv:bindtl="0,0" y="0" stroke-width="0.5" height="27" fill="$BORDERCOLOR$" atv:refpy="13.5" width="40" stroke="none"/>
  <rect atv:bindbr="1,0.33" ry="2.5" rx="2.5" x="1" id="inc_bg" atv:refpx="20" atv:bindtl="0,0" y="1" stroke-width="0.5" height="25" fill="$FILLCOLOR$" atv:refpy="13.5" width="38" stroke="none"/>
  <rect atv:bindbr="1,0.33" ry="2.5" rx="2.5" x="1" id="inc_stroke" atv:refpx="20" atv:bindtl="0,0" y="1" stroke-width="0.5" height="25" fill="$FILLCOLOR$" atv:refpy="13.5" width="38" stroke="none"/>
  <g atv:bindbr="0.6,0.225" id="icon_plus" atv:refpx="20" atv:bindtl="0.4,0.125" transform="matrix(1,0,0,1,0,-0.5)" atv:refpy="13.5">
   <rect x="19.75" id="id_25" atv:refpx="20" y="9" stroke-width="2" height="10" fill="$ARROWFILL$" atv:refpy="14" width="0.5" stroke="none"/>
   <rect x="15" id="id_28" atv:refpx="20" y="13.75" stroke-width="2" height="0.5" fill="$ARROWFILL$" atv:refpy="14" width="10" stroke="none"/>
  </g>
 </g>
 <script type="text/ecmascript"><![CDATA[var useSVGKeyboard = webMI.callExtension("SYSTEM.LIBRARY.ATVISE.QUICKDYNAMICS.Configuration", { action: "existsIndexParameter", parameterName: "useSVGKeyboard" }) == "true";
var base = webMI.query["base"] == undefined ? "" : webMI.query["base"];
var stepInc = parseFloat(webMI.query["stepInc"]);
var stepDec = parseFloat(webMI.query["stepDec"]);
var min = webMI.query["min"] == undefined ? "" : parseFloat(webMI.query["min"]);
var max = webMI.query["max"] == undefined ? "" : parseFloat(webMI.query["max"]);
var interval = parseFloat(webMI.query["interval"]);
var initialValue = webMI.query["initValue"];
var tabHandler = webMI.callExtension("SYSTEM.LIBRARY.ATVISE.QUICKDYNAMICS.Tab Handler");
var tabIndex = webMI.query["tabIndex"] == undefined ? "" : webMI.query["tabIndex"];
var tooltip = webMI.query["tooltip"] == undefined ? "" : webMI.query["tooltip"];
var curValue = 0;
var CONST_NUMBER_FORMAT = "[^-0-9.]";
var format = CONST_NUMBER_FORMAT;
var isIOSDevice = /(iPod|iPhone|iPad)/.test(navigator.userAgent);
var storedEvent = { keyCode: null, shiftKey: false };

if (initialValue) {
	curValue = parseFloat(initialValue);
}

webMI.gfx.setText("input_label", curValue);

var fontColor = webMI.query["fontColor"];
var inputFill = webMI.query["inputFill"];
var fillColorInactive = webMI.query["fillColorInactive"];
var fillColor = webMI.query["fillColor"];
var buttonStrokePressed = webMI.query["buttonStrokePressed"];
var consistencyGroup = webMI.query["consistencyGroup"];
var alarmToSubscribe = webMI.query["alarm"];
var alarmIndication = webMI.query["alarmIndication"];
var statusEnabled = webMI.query["statusEnabled"];
var statusTrigger = webMI.query["statusTrigger"];
var statusIndication = webMI.query["statusIndication"];
var activeIndicators = {};
var foreignObject;
var inputActive = false;
var inputFO = webMI.dom.createElement("http://www.w3.org/1999/xhtml", "input");
inputFO.type = "number";
inputFO.min = min;
inputFO.max = max;
inputFO.id = "html_input_" + document.getElementById("input_clickarea").id;
inputFO.className = "hideArrows";
inputFO.style.width = "100%";
inputFO.style.height = "100%";
inputFO.style.borderWidth = "0px";
inputFO.style.padding = "0px";
inputFO.style.textAlign = "center";
inputFO.style.color = fontColor;
inputFO.style.fontFamily = webMI.query["fontFamily"];
inputFO.style.fontSize = parseFloat(webMI.query["fontSize"]) + "px";

if (consistencyGroup) 
	var consistencyHandler = webMI.callExtension("SYSTEM.LIBRARY.ATVISE.QUICKDYNAMICS.Consistency Handler");

var right = webMI.query["right"] == undefined ? "" : webMI.query["right"];
if (right.search(/SYSTEM\.SECURITY\.RIGHTS\./) != -1) {
	right = right.substring(23, right.length); //remove "prefix" SYSTEM.SECURITY.RIGHTS.
}

var active = false;
var hasRight = false;

if (right != "") {
	webMI.addEvent(webMI.data, "clientvariableschange", function(e) {
		hasRight = false;
		if (("username" in e) && (e.username != "")) {
			hasRight = webMI.hasRight(right);
		}
		deActivate();
	});
}

var activeValue = (webMI.query["activeValue"] == undefined) ? "" :webMI.query["activeValue"];
var activeNode = (webMI.query["activeNode"] == undefined) ? "" : webMI.query["activeNode"];
var nodeIsActive = false;

if ((activeNode != "") && (String(activeValue) != "")) {
	webMI.data.subscribe(activeNode, function(e) {
		var nodeActiveValue = e.value;
		if (typeof nodeActiveValue == "boolean") {
			nodeIsActive = (String(nodeActiveValue) == activeValue);
		} else if (typeof nodeActiveValue == "number") {
			try {
				var temp = parseFloat(activeValue);
				nodeIsActive = (nodeActiveValue == temp);
			} catch (e) {
				nodeIsActive = false;
			}
		} else {
			nodeIsActive = (nodeActiveValue == activeValue);
		}
		if (typeof e.status != "undefined") 
			handleStatus(e.status);
		deActivate();
	});
} else {
	deActivate();
}

function deActivate() {
	if (right != "") {
		if ((String(activeValue) != "") && (activeNode != "")) {
			active=(nodeIsActive && hasRight);
		} else {
			active = hasRight;
		}
	} else {
		if ((String(activeValue) != "") && (activeNode != "")) {
			active = nodeIsActive;
		} else {
			active = true;
		}
	}
	if (active) {
		webMI.gfx.setFill("input_field_widget", inputFill);
		webMI.gfx.setFill("inc_bg", fillColor);
		webMI.gfx.setFill("dec_bg", fillColor);
		webMI.gfx.setVisible("inc_stroke", null);
		webMI.gfx.setVisible("dec_stroke", null);
	} else {
		webMI.gfx.setFill("input_field_widget", fillColorInactive);
		webMI.gfx.setFill("input_bg", fillColorInactive);
		webMI.gfx.setFill("inc_bg", fillColorInactive);
		webMI.gfx.setFill("dec_bg", fillColorInactive);
		webMI.gfx.setVisible("inc_stroke", false);
		webMI.gfx.setVisible("dec_stroke", false);
	}
}

function handleStatus(status) {
	if (statusEnabled != "Yes") 
		return;

	if (statusTrigger != "") {
		webMI.trigger.fire(statusTrigger, status);
	} else {
		if (typeof statusIndication["ItemStatusBad"] == "undefined") 
			statusIndication = {"ItemStatusBad": {color: "#ffff00", interval: "250"}};

		if (status == 0 || (status & 0xC0000000).toString(16) == 0)	//Good value state
			delete activeIndicators["status"];
		else if ((status & 0x80000000).toString(16) != 0)			//Bad value state
			activeIndicators["status"] = { color: statusIndication["ItemStatusBad"].color, interval: parseInt(statusIndication["ItemStatusBad"].interval) };
		else if ((status & 0xC0000000).toString(16) == 40000000)	//Uncertain value state
			activeIndicators["status"] = { color: statusIndication["ItemStatusBad"].color, interval: parseInt(statusIndication["ItemStatusBad"].interval) };
		else														//Unknown value state
			activeIndicators["status"] = { color: statusIndication["ItemStatusBad"].color, interval: parseInt(statusIndication["ItemStatusBad"].interval) };

		setIndicator();
	}
}

function initAlarm(address) {
	if (alarmIndication == "") 
		alarmIndication = {};

	if (typeof alarmIndication["AlarmStatusOnUnacknowledged"] == "undefined") 
		alarmIndication["AlarmStatusOnUnacknowledged"] = { color: "#ff0000", interval: "250" };

	if (typeof alarmIndication["AlarmStatusOnAcknowledged"] == "undefined") 
		alarmIndication["AlarmStatusOnAcknowledged"] = { color: "#ff0000", interval: "500" };

	if (typeof alarmIndication["AlarmStatusOffUnacknowledged"] == "undefined") 
		alarmIndication["AlarmStatusOffUnacknowledged"] = { color: "#ff0000", interval: "750" };

	if (typeof alarmIndication["AlarmStatusOnOffUnacknowledged"] == "undefined") 
		alarmIndication["AlarmStatusOnOffUnacknowledged"] = { color: "#ff0000", interval: "1500" };

	webMI.alarm.subscribe(address, function(e) {
		if (e.state == 1) 
			activeIndicators["alarm"] = { color: alarmIndication["AlarmStatusOnUnacknowledged"].color, interval: parseInt(alarmIndication["AlarmStatusOnUnacknowledged"].interval) };
		else if (e.state == 2) 
			activeIndicators["alarm"] = { color: alarmIndication["AlarmStatusOnAcknowledged"].color, interval: parseInt(alarmIndication["AlarmStatusOnAcknowledged"].interval) };
		else if (e.state == 3) 
			activeIndicators["alarm"] = { color: alarmIndication["AlarmStatusOffUnacknowledged"].color, interval: parseInt(alarmIndication["AlarmStatusOffUnacknowledged"].interval) };
		else if (e.state == 5)
			activeIndicators["alarm"] = { color: alarmIndication["AlarmStatusOnOffUnacknowledged"].color, interval: parseInt(alarmIndication["AlarmStatusOnOffUnacknowledged"].interval) };
		else 
			delete activeIndicators["alarm"];

		setIndicator();
	});
}

if (alarmToSubscribe != "") 
	initAlarm(alarmToSubscribe);

var currentIndicator = "";
function setIndicator() {
	if (currentIndicator != "") 
		return;

	if (activeIndicators["trigger"]) {
		currentIndicator = "trigger";
	} else if (activeIndicators["status"]) {
		currentIndicator = "status";
	} else if (activeIndicators["alarm"]) {
		currentIndicator = "alarm";
	} else {
		currentIndicator = "";
		return;
	}

	webMI.gfx.setStroke("blinking_frame", activeIndicators[currentIndicator].color);
	webMI.gfx.setVisible("blinking_frame", null);

	var interval = activeIndicators[currentIndicator].interval;
	setTimeout(function() {
		webMI.gfx.setVisible("blinking_frame", false);
		setTimeout(function() {
			currentIndicator = "";
			setIndicator();
		}, interval);
	}, interval);
}

function update(value) {
	var newValue = value;

	if ((String(max) != "") && (newValue > max)) newValue = max;
	else if ((String(min) != "") && (newValue < min)) newValue = min;

	if (base != "" && !consistencyGroup) {
		webMI.data.write(base, newValue);
	} else {
		curValue = value;
		webMI.gfx.setText("input_label", newValue);
	}
}

if (base != "") {
	if (consistencyGroup) {
		consistencyHandler.register(consistencyGroup, base, update);
	} else {
		webMI.data.subscribe(base, function(e) {
			curValue = parseFloat(e.value);

			if (isNaN(curValue)) {
				curValue = "-";
			}
			webMI.gfx.setText("input_label", curValue);
			if (typeof e.status != "undefined") 
				handleStatus(e.status);
		});
	}
}

function getDisplayParameters() {
	var communicationID = new Date().getTime().toString();
	webMI.trigger.connect(communicationID, function(e) {
		setCurrentValue(curValue = e.value);
	});

	var passObj = {};
	for (var i in webMI.query) 
		passObj[i] = webMI.query[i];
	passObj["minValue"] = passObj["min"];
	passObj["maxValue"] = passObj["max"];
	passObj["trigger"] = communicationID;
	if (!consistencyGroup) 
		passObj["target"] = passObj["base"];
	return passObj;
}

function focusTH() {
	if (active) {
		webMI.gfx.setStroke("focus_frame", webMI.query["focusStrokeColor"]);
	}
}
function blurTH() {
	if (active) {
		webMI.gfx.setStroke("focus_frame", "none");
	}
}
function applyTH() {
	if (active) {
		if (useSVGKeyboard) {
			var keyboard = "";
			var size = format != undefined && format == CONST_NUMBER_FORMAT ? { w: 438, h: 378 } : { w: 550, h: 250 };
			var keyboardParam = getDisplayParameters();

			if (format != undefined && format == CONST_NUMBER_FORMAT) {
				keyboard = "SYSTEM.LIBRARY.ATVISE.OBJECTDISPLAYS.Advanced.keyboard.number_keyboard";
			} else {
				keyboard = "SYSTEM.LIBRARY.ATVISE.OBJECTDISPLAYS.Advanced.keyboard.keyboard";
			}
			webMI.display.openWindow({
				display: keyboard,
				extern: false,
				height: size.h,
				menubar: false,
				modal: true,
				movable: true,
				resizable: false,
				scrollbars: false,
				status: false,
				title: "T{Keyboard}",
				toolbar: false,
				width: size.w,
				query: keyboardParam
			});
		} else {
			switchToInputMode();
		}
	}
}
function backTH() {}
function arrowTH(dir) {
	if (active && (dir == 38 || dir == 40)) {
		var step = (dir == 40)?stepDec*(-1):stepInc;
		//Execute action once on mousedown
		var newValue = (curValue+step);
		if (((String(max) == "") || (newValue <= max)) && ((String(min) == "") || (newValue >= min))) {
			setCurrentValue(newValue);
		}
	}
}
function keyHandler(keyTH, param2) {
	if (keyTH == "focus") {
		focusTH();
	} else if (keyTH == "blur") {
		blurTH();
	} else if (keyTH == "apply") {
		applyTH();
	} else if (keyTH == "back") {
		backTH();
	} else if (keyTH == "arrow") {
		(param2 == 38) && webMI.gfx.setFill("inc_stroke", "url(#linear_2)");
		(param2 == 40) && webMI.gfx.setFill("dec_stroke", "url(#linear_2)");
		arrowTH(param2);
	} else if (keyTH == "releaseClick") {
		webMI.gfx.setFill("inc_stroke", "url(#linear_1)");
		webMI.gfx.setFill("dec_stroke", "url(#linear_1)");
	} else if (keyTH == "isActive") {
		return active && param2(document.getElementById("clickarea_inc").parentNode);
	}
}

function stopPropagation(event) {
	/*
	 * If the ALT key is pressed together with one or more other keys on
	 * Firefox (only Windows), there will be no keyup event when the ALT
	 * key gets released. Since the ALT key is being used for paning in
	 * atvise visualization, we have to make sure that key listeners in the
	 * global document do not get triggered if someone is currently entering
	 * something in the inputFO (like "someone@example.com").
	 **/
	if (event.altKey) {
		if (event.stopPropagation) 
			event.stopPropagation();
		else 
			event.cancelBubble = true;
	}
}

webMI.addEvent(inputFO, "keyup", stopPropagation);
webMI.addEvent(inputFO, "keydown", function(e) {
	var keyCode = e.keyCode;
	if (/MSIE/.test(navigator.userAgent)) {
		storedEvent["keyCode"] = e.keyCode;
		storedEvent["shiftKey"] = e.shiftKey;
	}
	if (keyCode == "13" || keyCode == "9") {
		inputFO.blur();
		if (keyCode == "13") 
			tabHandler.setAcceptKeysPrevent(true);
	} else if (keyCode == "27") {
		storedEvent["keyCode"] = "27";
		tabHandler.setAcceptKeysPrevent(true);
		inputFO.blur();
	}

	stopPropagation(e);
});

//mobile safari is not triggering blur event on a svg button click
if (isIOSDevice) {
	window.window.addEventListener("touchstart", touchstartHandler);
}

function touchstartHandler(e) {
	if (e.target !== inputFO && inputActive) {
		blurHandler();
	}
}

inputFO.onblur = blurHandler;

function blurHandler() {
	switchToOutputMode();
	tabHandler.setAcceptKeys(true);

	if (storedEvent["keyCode"] != null) {
		if (storedEvent["shiftKey"] && storedEvent["keyCode"] == "9") 
			tabHandler.prevTab();
		else if (storedEvent["keyCode"] == "9") 
			tabHandler.nextTab();
	}

	if (storedEvent["keyCode"] != "27") {
		//workaround: setTimeout for Chrome crash error (clicking out from the input field or clicking enter while holding a button pressed).
		setTimeout(function() {
			checkInput();
		}, 0);
	}

	storedEvent["keyCode"] = null;
}

function checkInput() {
	var tmpValue = parseFloat(inputFO.value.replace(",","."));
	if (inputFO.value.trim() == "" && inputFO.validity.valid) {
		tmpValue = 0;
	}
	if (isNaN(tmpValue)) {
		showMessageDialog("T{Invalid format!}", "T{Please enter only numeric values.}");
	} else if (String(max) != "" && tmpValue > max) {
		showMessageDialog("T{Value too high!}", webMI.sprintf("T{Please enter a value less than or equal to %d.}", max));
	} else if (String(min) != "" && tmpValue < min) {
		showMessageDialog("T{Value too low!}", webMI.sprintf("T{Please enter a value greater than or equal to %d.}", min));
	} else {
		curValue = tmpValue;
		setCurrentValue(curValue);
	}
}
function showMessageDialog(headline, message) {
	webMI.display.openWindow({
		display: "SYSTEM.LIBRARY.ATVISE.OBJECTDISPLAYS.Advanced.dialogs.message_dialog_small",
		height: 160,
		width: 400,
		modal: true,
		resizable: false,
		movable: true,
		scrollbars: false,
		menubar: false,
		status: false,
		toolbar: false,
		query: {
			headline: headline,
			message: message,
			button: "T{OK}"
		}
	});
}

webMI.trigger.connect("setValue", function(e) {
	update(e.value);
});

function setCurrentValue(newValue) {
	if (base != "" && !consistencyGroup) {
		webMI.data.write(base, newValue, function(e) {
			if (e && e.error) {
				showMessageDialog("T{Invalid format!}", "T{Please enter only numeric values.}");

				webMI.data.read(base, function(e) {
					curValue = e.value;
					if (typeof e.status != "undefined") 
						handleStatus(e.status);
				});
			}
		});
	} else {
		curValue = newValue;
		webMI.gfx.setText("input_label", newValue);

		if (consistencyGroup) 
			consistencyHandler.set(consistencyGroup, base, newValue);
	}

	webMI.trigger.fire("valuechanged", newValue, "");
}

var isPressed = false;
var isRunning = false;
var activeTimer;

function buttonPressed(pressed, step) {
	isPressed = pressed;

	if (isPressed && step) {
		//Execute action once on mousedown
		var newValue = (curValue+step);

		//if ((String(max) != "") && (newValue > max)) newValue = max;
		//if ((String(min) != "") && (newValue < min)) newValue = min;
		if (((String(max) == "") || (newValue <= max)) && ((String(min) == "") || (newValue >= min))) {
			setCurrentValue(newValue);
		}

		// Execute action while holding mousedown

		if (interval > 0) {
			isRunning = true;
			var callFn = function() { doInDecrement(step); };
			activeTimer = setTimeout(callFn, interval);
		}
	} else if (isRunning && activeTimer) {
		isRunning = false;
		clearTimeout(activeTimer);
	}
}

function doInDecrement(step) {
	if (isRunning && isPressed) {
		var calcStep = ((step<0)?(-1)*step:step) -1;
//		var steps = Math.floor(max / calcStep);
		var newValue = (curValue+step);

		//if ((String(max) != "") && (newValue > max)) newValue = max;
		//if ((String(min) != "") && (newValue < min)) newValue = min;
		if (((String(max) == "") || (newValue <= max)) && ((String(min) == "") || (newValue >= min))) {
			setCurrentValue(newValue);
		}

		var callFn = function() { doInDecrement(step); };
		activeTimer = setTimeout(callFn, interval);
	}
}

function switchToInputMode() {
	tabHandler.setAcceptKeys(false);
	inputFO.value = curValue;
	webMI.gfx.setVisible("input_clickarea", false);

	var textboxGroup = document.getElementById("input_element");
	foreignObject = webMI.gfx.addForeignObject({ x: 0, y: 0, width: 40, height: 26.6666, id: "input_fo", childNodes: [inputFO] }, textboxGroup);
	foreignObject.style.outline = "2px solid black";
	foreignObject.style.outlineOffset = "-2px";
	inputFO.focus();
	inputActive = true;
}

function switchToOutputMode() {
	if (inputActive) {
		inputActive = false;
		webMI.gfx.setVisible("input_clickarea", true);

		if (foreignObject) {
			webMI.gfx.removeForeignObject(foreignObject);
			foreignObject = undefined;
		}
	}
}

webMI.addEvent("clickarea_inc", "mousedown", function(e) {
	var id = "clickarea_inc";
	var value = true;
return function(value) {
		if (active) {
			tabHandler.setCurrentIndex(keyHandler);
			webMI.gfx.setFill("inc_stroke", "url(#linear_2)");
			webMI.gfx.setStroke("inc_stroke", buttonStrokePressed);
			buttonPressed(true, stepInc);
		}
} (value);
});

webMI.addEvent("clickarea_inc", "mouseup", function(e) {
	var id = "clickarea_inc";
	var value = true;
return function(value) {
		releaseInc();
} (value);
});

webMI.addEvent("clickarea_inc", "mouseout", function(e) {
	var id = "clickarea_inc";
	var value = true;
return function(value) {
		releaseInc();
} (value);
});

webMI.addEvent("clickarea_inc", "dragstart", function(e) {
	if (e.preventDefault) {
		e.preventDefault();
	}
});

function releaseInc() {
	if (active) {
		webMI.gfx.setFill("inc_stroke", "url(#linear_1)");
		webMI.gfx.setStroke("inc_stroke", "none");
		buttonPressed(false, null);
	}
}

webMI.addEvent("clickarea_dec", "mousedown", function(e) {
	var id = "clickarea_dec";
	var value = true;
return function(value) {
		if (active) {
			tabHandler.setCurrentIndex(keyHandler);
			webMI.gfx.setFill("dec_stroke", "url(#linear_2)");
			webMI.gfx.setStroke("dec_stroke", buttonStrokePressed);
		buttonPressed(true, stepDec*(-1));
		}
} (value);
});

webMI.addEvent("clickarea_dec", "mouseup", function(e) {
	var id = "clickarea_dec";
	var value = true;
return function(value) {
		releaseDec();
} (value);
});

webMI.addEvent("clickarea_dec", "mouseout", function(e) {
	var id = "clickarea_dec";
	var value = true;
return function(value) {
		releaseDec();
} (value);
});

webMI.addEvent("clickarea_dec", "dragstart", function(e) {
	if (e.preventDefault) {
		e.preventDefault();
	}
});

function releaseDec() {
	if (active) {
		webMI.gfx.setFill("dec_stroke", "url(#linear_1)");
		webMI.gfx.setStroke("dec_stroke", "none");
		buttonPressed(false, null);
	}
}

webMI.addEvent("input_clickarea", "click", function(e) {
	var id = "input_clickarea";
	var value = true;
	return (function(value) {
		if (active) {
			tabHandler.setCurrentIndex(keyHandler);
			if (useSVGKeyboard) {
				var keyboard = "";
				var size = format != undefined && format == CONST_NUMBER_FORMAT ? { w: 438, h: 378 } : { w: 550, h: 250 };
				var keyboardParam = getDisplayParameters();

				if (format != undefined && format == CONST_NUMBER_FORMAT) {
					keyboard = "SYSTEM.LIBRARY.ATVISE.OBJECTDISPLAYS.Advanced.keyboard.number_keyboard";
				} else {
					keyboard = "SYSTEM.LIBRARY.ATVISE.OBJECTDISPLAYS.Advanced.keyboard.keyboard";
				}
				webMI.display.openWindow({
					display: keyboard,
					extern: false,
					height: size.h,
					menubar: false,
					modal: true,
					movable: true,
					resizable: false,
					scrollbars: false,
					status: false,
					title: "T{Keyboard}",
					toolbar: false,
					width: size.w,
					query: keyboardParam
				});
			} else {
				switchToInputMode();
			}
		}
	})(value);
});

webMI.addOnload(function() {
	var doc = document.getElementById("clickarea_inc").ownerDocument;
	tabHandler.register(tabIndex, keyHandler, doc);
});

webMI.trigger.connect("com.atvise.setBlinking", function(e) {
	if (e.value == "none") {
		delete activeIndicators["trigger"];
	} else {
		activeIndicators["trigger"] = { color: e.value, interval: 500 };
	}
	setIndicator();
});

if (tooltip != "") {
	webMI.callExtension("SYSTEM.LIBRARY.ATVISE.QUICKDYNAMICS.Tooltip", { auto: "true", id: "clickarea_inc", text: tooltip });
	webMI.callExtension("SYSTEM.LIBRARY.ATVISE.QUICKDYNAMICS.Tooltip", { auto: "true", id: "clickarea_dec", text: tooltip });
	webMI.callExtension("SYSTEM.LIBRARY.ATVISE.QUICKDYNAMICS.Tooltip", { auto: "true", id: "input_clickarea", text: tooltip });
}
]]></script>
</svg>
