<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" height="30" xmlns:atv="http://webmi.atvise.com/2007/svgext" version="1.2" width="160">
 <defs>
  <linearGradient gradientUnits="objectBoundingBox" y1="0" y2="1" id="linear_2" x2="1" x1="1">
   <stop stop-opacity="0.35" offset="0" stop-color="#ffffff"/>
   <stop stop-opacity="0.35" offset="1" stop-color="#ffffff"/>
  </linearGradient>
 </defs>
 <desc>Provides a list of nodes starting with the parametrized address.</desc>
 <title>Picker Address</title>
 <metadata>
  <atv:parameter desc="base" behavior="optional" valuetype="address" name="baseNode"/>
  <atv:parameter desc="start address" behavior="mandatory" valuetype="address" name="base" defaultvalue="AGENT.OBJECTS"/>
  <atv:parameter desc="alarm address" behavior="optional" valuetype="address" name="alarm" defaultvalue=""/>
  <atv:parameter desc="enable status monitoring" behavior="optional" config="Yes;No" valuetype="enum" name="statusEnabled" defaultvalue="Yes"/>
  <atv:parameter desc="fire status trigger" behavior="optional" valuetype="string" name="statusTrigger" defaultvalue=""/>
  <atv:parameter substitute="$FONTFAMILY$" desc="family" behavior="optional" group="Font" config="Times New Roman=Times New Roman,Bodoni,Garamond,Minion Web,ITC Stone Serif,MS Georgia,Bitstream Cyberbit,serif;Arial=MS Trebuchet,ITC Avant Garde Gothic,MS Arial,MS Verdana,Univers,Futura,ITC Stone Sans,Gill Sans,Akzidenz Grotesk,Helvetica,sans-serif;Courier=Courier,MS Courier New,Prestige,Everson Mono,monospace;Zapf-Chancery=Caflisch Script,Adobe Poetica,Sanvito,Ex Ponto,Snell Roundhand,Zapf-Chancery,cursive;Alpha Geometrique=Alpha Geometrique,Critter,Cottonwood,FB Reactor,Studz,fantasy" valuetype="enum" name="fontFamily" defaultvalue="Arial"/>
  <atv:parameter substitute="$FONTSIZE$" desc="size" behavior="optional" group="Font" config="6;7;8;9;10;11;12;14;16;18;20;22;24;26;28;36;48;72" valuetype="enum" name="fontSize" defaultvalue="12"/>
  <atv:parameter substitute="$FONTCOLOR$" desc="color" behavior="optional" group="Font" valuetype="global" name="fontColor" defaultvalue="SYSTEM.GLOBALS.atvFontColor"/>
  <atv:parameter substitute="$FILLCOLOR$" desc="fill color" behavior="optional" group="Appearance" valuetype="global" name="fillColor" defaultvalue="SYSTEM.GLOBALS.atvFillColor"/>
  <atv:parameter substitute="$INPUTFILL$" desc="value field fill color" behavior="optional" group="Appearance" valuetype="color" name="inputFill" defaultvalue="#FFFFFF"/>
  <atv:parameter desc="value field fill color inactive" behavior="optional" group="Appearance" valuetype="color" name="inputFillInactive" defaultvalue="#b7b7b7"/>
  <atv:parameter desc="symbol fill color" behavior="optional" group="Appearance" valuetype="global" name="symbolColor" defaultvalue="SYSTEM.GLOBALS.atvSymbolColor"/>
  <atv:parameter desc="stroke color pressed" behavior="optional" group="Appearance" valuetype="color" name="strokePressed" defaultvalue="#ffffff"/>
  <atv:parameter desc="color for context font" behavior="optional" group="Appearance" valuetype="color" name="contextFontColor" defaultvalue="#000000"/>
  <atv:parameter desc="fill color for context menu" behavior="optional" group="Appearance" valuetype="color" name="contextFill" defaultvalue="#ffffff"/>
  <atv:parameter desc="stroke color for context menu" behavior="optional" group="Appearance" valuetype="color" name="contextStroke" defaultvalue="#d7d7d7"/>
  <atv:parameter desc="stroke width for context menu" behavior="optional" group="Appearance" valuetype="number" name="contextStrokeWidth" defaultvalue="1"/>
  <atv:parameter desc="hover color for context menu" behavior="optional" group="Appearance" valuetype="color" name="contextHoverColor" defaultvalue="#EFEFEF"/>
  <atv:parameter substitute="$BORDERCOLOR$" desc="border color" behavior="optional" group="Appearance" valuetype="global" name="borderColor" defaultvalue="SYSTEM.GLOBALS.atvBorderColor"/>
  <atv:parameter desc="focus stroke color" behavior="optional" group="Appearance" valuetype="color" name="focusStrokeColor" defaultvalue="#FFFFFF"/>
  <atv:parameter desc="status indication" behavior="optional" group="Appearance" valuetype="global" name="statusIndication" defaultvalue="SYSTEM.GLOBALS.atvStatusIndication"/>
  <atv:parameter desc="alarm indication" behavior="optional" group="Appearance" valuetype="global" name="alarmIndication" defaultvalue="SYSTEM.GLOBALS.atvAlarmIndication"/>
  <atv:parameter desc="on demand" behavior="optional" group="Options" config="Yes;No" valuetype="enum" name="onDemand" defaultvalue="Yes"/>
  <atv:parameter desc="maximum displayed items (0 = all)" behavior="optional" group="Options" valuetype="number" name="itemsCount" defaultvalue="0"/>
  <atv:parameter desc="show base variables" behavior="optional" group="Options" config="Yes;No" valuetype="enum" name="showBaseVariables" defaultvalue="Yes"/>
  <atv:parameter desc="show objects" behavior="optional" group="Options" config="Yes;No" valuetype="enum" name="showObjects" defaultvalue="Yes"/>
  <atv:parameter desc="show displays" behavior="optional" group="Options" config="Yes;No" valuetype="enum" name="showDisplays" defaultvalue="Yes"/>
  <atv:parameter desc="show archives" behavior="optional" group="Options" config="Yes;No" valuetype="enum" name="showArchives" defaultvalue="Yes"/>
  <atv:parameter desc="show alarms" behavior="optional" group="Options" config="Yes;No" valuetype="enum" name="showAlarms" defaultvalue="Yes"/>
  <atv:parameter desc="show variable types" behavior="optional" group="Options" config="Yes;No" valuetype="enum" name="showVariableTypes" defaultvalue="Yes"/>
  <atv:parameter desc="consistency group" behavior="optional" group="Options" valuetype="string" name="consistencyGroup"/>
  <atv:parameter desc="tab index" behavior="optional" group="Options" valuetype="number" name="tabIndex"/>
  <atv:parameter desc="tooltip" behavior="optional" group="Options" valuetype="trstring" name="tooltip"/>
  <atv:parameter desc="necessary right" behavior="optional" group="Security" config="SYSTEM.SECURITY.RIGHTS" valuetype="address" name="right"/>
  <atv:parameter desc="activation address" behavior="optional" group="Security" valuetype="address" name="activeNode"/>
  <atv:parameter desc="activation value" behavior="optional" group="Security" valuetype="string" name="activeValue"/>
  <atv:gridconfig height="2" enabled="true" gridstyle="lines" width="2"/>
  <atv:snapconfig height="2" enabled="true" width="2"/>
 </metadata>
 <rect atv:bindbr="1,1" ry="3" id="id_2" rx="3" x="0" atv:refpx="80" atv:bindtl="0,0" y="0" height="30" stroke-width="1" fill="$BORDERCOLOR$" width="160" atv:refpy="16"/>
 <rect atv:bindbr="1,1" ry="2.408" id="id_0" rx="2.408" x="1" atv:refpx="164.164" atv:bindtl="0,0" y="1" height="28" stroke-width="1" fill="$FILLCOLOR$" width="158" atv:refpy="-94.112"/>
 <g id="input_element" atv:refpx="0" atv:refpy="0"/>
 <foreignObject width="130" y="0" height="30" x="0" id="clickareaFO">
  <div style="width:100%;height:100%;opacity:0;filter:alpha(opacity=0);background-color:red" xmlns="http://www.w3.org/1999/xhtml" id="addresspicker_input_clickarea"/>
 </foreignObject>
 <g atv:refpy="14.75" atv:refpx="68" id="addresspicker_input_area">
  <rect atv:bindbr="1,1" ry="3" id="addresspicker_bg" rx="3" x="4" atv:refpx="214.155" atv:bindtl="0,0" y="4" height="22" stroke-width="2" fill="$INPUTFILL$" stroke="none" width="128" atv:refpy="10"/>
  <rect atv:bindbr="1,1" ry="3" id="blinking_frame" rx="3" x="4" atv:refpx="214.155" atv:bindtl="0,0" y="4" height="22" stroke-width="2" fill="none" stroke="none" width="128" atv:refpy="10"/>
  <text font-family="$FONTFAMILY$" atv:bindbr="1,0.5" id="input_label" x="126" atv:refpx="680.285" atv:bindtl="1,0.5" y="19.25" font-size="$FONTSIZE$" fill="$FONTCOLOR$" text-anchor="end" atv:refpy="18">T{Picker Address}</text>
 </g>
 <g id="addresspicker_clickarea_group" atv:refpx="144.75" atv:refpy="15">
  <rect atv:bindbr="1,0.5" ry="2.755" id="button_bg" rx="2.755" x="135" atv:refpx="532.75" atv:bindtl="1,0.5" y="5" height="20" fill="none" stroke="none" width="20" atv:refpy="-25.796"/>
  <svg atv:bindbr="1,0.5" id="id_1" xlink:href="SYSTEM.LIBRARY.ATVISE.OBJECTDISPLAYS.Symbols.20x20.dots" x="134.75" atv:refpx="549" atv:bindtl="1,0.5" y="5" height="20" width="20" atv:refpy="15">
   <atv:argument value="" prefix="symbolColor" name="symbolColor"/>
  </svg>
  <rect atv:bindbr="1,0.5" ry="2.755" id="button_stroke" rx="2.755" x="135" atv:refpx="532.75" atv:bindtl="1,0.5" y="5" height="20" stroke-width="0.5" fill="#000000" stroke="none" width="20" fill-opacity="0.001" atv:refpy="-25.796"/>
 </g>
 <rect atv:bindbr="1,1" ry="2.1" id="focus_frame" rx="2.1" x="2" atv:refpx="214.713" atv:bindtl="0,0" y="2" height="26" stroke-width="2" fill="none" stroke="none" width="156" atv:refpy="40.844"/>
 <rect atv:bindbr="1,1" id="addresspicker_clickarea" rx="2.755" x="132" atv:refpx="146" atv:bindtl="1,0" y="0" height="30" stroke-width="1" fill="#000000" width="28" fill-opacity="0" atv:refpy="15"/>
 <script type="text/ecmascript"><![CDATA[var useSVGKeyboard = webMI.callExtension("SYSTEM.LIBRARY.ATVISE.QUICKDYNAMICS.Configuration", { action: "existsIndexParameter", parameterName: "useSVGKeyboard" }) == "true";
var base = webMI.query["base"] == undefined ? "" : webMI.query["base"];
var baseNode = webMI.query["baseNode"] == undefined ? "" : webMI.query["baseNode"];
var inputFill = webMI.query["inputFill"];
var fillColor = webMI.query["fillColor"];
var inputFillInactive = webMI.query["inputFillInactive"];
var strokeFillPressed = webMI.query["strokePressed"];
var focusStrokeColor = webMI.query["focusStrokeColor"];
var contextFill = webMI.query["contextFill"] == undefined ? "#FFFFFF" : webMI.query["contextFill"];
var contextStroke = webMI.query["contextStroke"] == undefined ? "#575757" : webMI.query["contextStroke"];
var contextStrokeWidth = webMI.query["contextStrokeWidth"] == undefined ? 1 : webMI.query["contextStrokeWidth"];
var contextFontColor = webMI.query["contextFontColor"] == undefined ? "#000000" : webMI.query["contextFontColor"];
var contextHoverColor = webMI.query["contextHoverColor"] == undefined ? "#EFEFEF" : webMI.query["contextHoverColor"];
var onDemand = webMI.query["onDemand"] == "No" ? "0" : "1";
var itemsCount = webMI.query["itemsCount"];
var active = false;
var hasRight = false;
var right = webMI.query["right"] == undefined ? "" : webMI.query["right"];
var consistencyGroup = webMI.query["consistencyGroup"];
var myWidth = 160;
var alarmToSubscribe = webMI.query["alarm"];
var alarmIndication = webMI.query["alarmIndication"];
var statusEnabled = webMI.query["statusEnabled"];
var statusTrigger = webMI.query["statusTrigger"];
var statusIndication = webMI.query["statusIndication"];
var activeIndicators = {};
var isIOSDevice = /(iPod|iPhone|iPad)/.test(navigator.userAgent);
var storedEvent = { keyCode: null, shiftKey: false };
var foreignObject;
var curValue = "";
var inputActive = false;
var inputFO = webMI.dom.createElement("http://www.w3.org/1999/xhtml", "input");
inputFO.type = "text";
inputFO.id = "html_input_" + document.getElementById("addresspicker_input_clickarea").id;
inputFO.style.width = "100%";
inputFO.style.height = "100%";
inputFO.style.borderWidth = "0px";
inputFO.style.boxSizing = "border-box";
inputFO.style.padding = "0px 5px 0px 0px";
inputFO.style.textAlign = "right";
inputFO.style.color = webMI.query["fontColor"];
inputFO.style.fontFamily = webMI.query["fontFamily"];
inputFO.style.fontSize = parseFloat(webMI.query["fontSize"]) + "px";

var hasBrowseNodes = webMI.getMethodSupport().indexOf("BrowseNodes") !== -1;

var contextMenuStyle = {
	maxRows: 10,
	fontFamily: "Arial",
	fontSize: 12,
	fontFill: contextFontColor,
	width: 140,
	fill: contextFill,
	stroke: contextStroke,
	strokeWidth: contextStrokeWidth,
	hoverFill: contextHoverColor,
	closeTime: 0,
	zIndex: 100,
	showType: "right"
};

if (baseNode) {
	if (consistencyGroup) {
		var consistencyHandler = webMI.callExtension("SYSTEM.LIBRARY.ATVISE.QUICKDYNAMICS.Consistency Handler");
		consistencyHandler.register(consistencyGroup, baseNode, updateDisplayValue);
	} else {
		webMI.data.subscribe(baseNode, function(e) {
			updateDisplayValue(e.value);
			if (typeof e.status != "undefined") 
				handleStatus(e.status);
		});
	}
}
var tabHandler = webMI.callExtension("SYSTEM.LIBRARY.ATVISE.QUICKDYNAMICS.Tab Handler");
var tabIndex = (webMI.query["tabIndex"] == undefined) ? "" : webMI.query["tabIndex"];
var tooltip = (webMI.query["tooltip"] == undefined) ? "" : webMI.query["tooltip"];

if (right.search(/SYSTEM\.SECURITY\.RIGHTS\./) != -1) {
	right = right.substring(23, right.length); //remove "prefix" SYSTEM.SECURITY.RIGHTS.
}

if (right != "") {
	webMI.addEvent(webMI.data, "clientvariableschange", function(e) {
		hasRight = false;
		if (("username" in e) && (e.username != "")) {
			hasRight = webMI.hasRight(right);
		}
		deActivate();
	});
}

var activeValue = (webMI.query["activeValue"] == undefined) ? "" :webMI.query["activeValue"];
var activeNode = (webMI.query["activeNode"] == undefined) ? "" : webMI.query["activeNode"];
var nodeIsActive = false;
var isSetActive = true; //isSetActive is set by the com.atvise.setActive trigger.

if ((activeNode != "") && (String(activeValue) != "")) {
	webMI.data.subscribe(activeNode, function(e) {
		var nodeActiveValue = e.value;
		if (typeof nodeActiveValue == "boolean") {
			nodeIsActive = (String(nodeActiveValue) == activeValue);
		} else if (typeof nodeActiveValue == "number") {
			try {
				var temp = parseFloat(activeValue);
				nodeIsActive = (nodeActiveValue == temp);
			} catch (e) {
				nodeIsActive = false;
			}
		} else {
			nodeIsActive = (nodeActiveValue == activeValue);
		}
		if (typeof e.status != "undefined") 
			handleStatus(e.status);
		deActivate();
	});
} else {
	deActivate();
}

function deActivate() {
	if (right != "") {
		if ((String(activeValue) != "") && (activeNode != "")) {
			active=(nodeIsActive && hasRight);
		} else {
			active = hasRight;
		}
	} else {
		if ((String(activeValue) != "") && (activeNode != "")) {
			active = nodeIsActive;
		} else {
			active = true;
		}
	}
	active = active && isSetActive;
	if (active) {
		webMI.gfx.setFill("addresspicker_bg", inputFill);
		webMI.gfx.setFill("button_bg", fillColor);
	} else {
		webMI.gfx.setFill("addresspicker_bg", inputFillInactive);
		webMI.gfx.setFill("button_bg", inputFillInactive);
	}
}

function handleStatus(status) {
	if (statusEnabled != "Yes") 
		return;

	if (statusTrigger != "") {
		webMI.trigger.fire(statusTrigger, status);
	} else {
		if (typeof statusIndication["ItemStatusBad"] == "undefined") 
			statusIndication = {"ItemStatusBad": {color: "#ffff00", interval: "250"}};

		if (status == 0 || (status & 0xC0000000).toString(16) == 0)	//Good value state
			delete activeIndicators["status"];
		else if ((status & 0x80000000).toString(16) != 0)			//Bad value state
			activeIndicators["status"] = { color: statusIndication["ItemStatusBad"].color, interval: parseInt(statusIndication["ItemStatusBad"].interval) };
		else if ((status & 0xC0000000).toString(16) == 40000000)	//Uncertain value state
			activeIndicators["status"] = { color: statusIndication["ItemStatusBad"].color, interval: parseInt(statusIndication["ItemStatusBad"].interval) };
		else														//Unknown value state
			activeIndicators["status"] = { color: statusIndication["ItemStatusBad"].color, interval: parseInt(statusIndication["ItemStatusBad"].interval) };

		setIndicator();
	}
}

function initAlarm(address) {
	if (alarmIndication == "") 
		alarmIndication = {};

	if (typeof alarmIndication["AlarmStatusOnUnacknowledged"] == "undefined") 
		alarmIndication["AlarmStatusOnUnacknowledged"] = { color: "#ff0000", interval: "250" };

	if (typeof alarmIndication["AlarmStatusOnAcknowledged"] == "undefined") 
		alarmIndication["AlarmStatusOnAcknowledged"] = { color: "#ff0000", interval: "500" };

	if (typeof alarmIndication["AlarmStatusOffUnacknowledged"] == "undefined") 
		alarmIndication["AlarmStatusOffUnacknowledged"] = { color: "#ff0000", interval: "750" };

	if (typeof alarmIndication["AlarmStatusOnOffUnacknowledged"] == "undefined") 
		alarmIndication["AlarmStatusOnOffUnacknowledged"] = { color: "#ff0000", interval: "1500" };

	webMI.alarm.subscribe(address, function(e) {
		if (e.state == 1) 
			activeIndicators["alarm"] = { color: alarmIndication["AlarmStatusOnUnacknowledged"].color, interval: parseInt(alarmIndication["AlarmStatusOnUnacknowledged"].interval) };
		else if (e.state == 2) 
			activeIndicators["alarm"] = { color: alarmIndication["AlarmStatusOnAcknowledged"].color, interval: parseInt(alarmIndication["AlarmStatusOnAcknowledged"].interval) };
		else if (e.state == 3) 
			activeIndicators["alarm"] = { color: alarmIndication["AlarmStatusOffUnacknowledged"].color, interval: parseInt(alarmIndication["AlarmStatusOffUnacknowledged"].interval) };
		else if (e.state == 5)
			activeIndicators["alarm"] = { color: alarmIndication["AlarmStatusOnOffUnacknowledged"].color, interval: parseInt(alarmIndication["AlarmStatusOnOffUnacknowledged"].interval) };
		else 
			delete activeIndicators["alarm"];

		setIndicator();
	});
}

if (alarmToSubscribe != "") 
	initAlarm(alarmToSubscribe);

var currentIndicator = "";
function setIndicator() {
	if (currentIndicator != "") 
		return;

	if (activeIndicators["trigger"]) {
		currentIndicator = "trigger";
	} else if (activeIndicators["status"]) {
		currentIndicator = "status";
	} else if (activeIndicators["alarm"]) {
		currentIndicator = "alarm";
	} else {
		currentIndicator = "";
		return;
	}

	webMI.gfx.setStroke("blinking_frame", activeIndicators[currentIndicator].color);
	webMI.gfx.setVisible("blinking_frame", null);

	var interval = activeIndicators[currentIndicator].interval;
	setTimeout(function() {
		webMI.gfx.setVisible("blinking_frame", false);
		setTimeout(function() {
			currentIndicator = "";
			setIndicator();
		}, interval);
	}, interval);
}

// moeglichkeit ueber parameter nur "historisierte" Datenpunkte einzuschraenkeN!?!
function createMenuFromAdress(startAddress, callback) {
	var types = ["i=61"];
	if (webMI.query["showBaseVariables"] == "Yes") types.push("i=62");
	if (webMI.query["showObjects"] == "Yes") types.push("ObjectTypes.PROJECT");
	if (webMI.query["showDisplays"] == "Yes") types.push("VariableTypes.ATVISE.Display");
	if (webMI.query["showArchives"] == "Yes") types.push("ns=1;s=ObjectTypes.ATVISE.ArchiveGroup.Data");
	if (webMI.query["showAlarms"] == "Yes") types.push("ns=1;s=ObjectTypes.ATVISE.Alarm");
	if (webMI.query["showVariableTypes"] == "Yes") types.push("VariableTypes.PROJECT");

	webMI.data.call("BrowseNodes", { startAddress: startAddress, endLevel: onDemand, vTypes: types, mapping: ["name:nodeid:splitnamespace", "text:browsename"] }, function(e) {
		var nodes = e;
		if (nodes == null) return;
		function getFn(value) {
			return function(e) {
				if (baseNode) {
					updateNodeValue(value);
				} else {
					updateDisplayValue(value);
				}
			};
		};
		var menuObj = {};
		if (startAddress == base) 
			menuObj["none"] = { text: "[none]", value: getFn("") };
		function translateMenu(submenuObj, subnodes) {
			for (i in subnodes){
				if (typeof subnodes[i]["name"] == "undefined") continue;
				submenuObj[i] = {};
				submenuObj[i]["text"] = subnodes[i]["text"];
				submenuObj[i]["value"] = getFn(subnodes[i]["name"]);
				submenuObj[i]["address"] = subnodes[i]["address"];
				if (typeof subnodes[i]["childs"] == "undefined" || subnodes[i]["childs"] == null) continue;
				else if (typeof subnodes[i]["childs"] == "object") {
					submenuObj[i]["sub"] = {};
					translateMenu(submenuObj[i]["sub"], subnodes[i]["childs"]);
				} else if (typeof subnodes[i]["childs"] == "string") {
					submenuObj[i]["sub"] = function(address,callback){return createMenuFromAdress(address,callback)};
					submenuObj[i]["base"] = subnodes[i]["name"];
				}
			}
			// Check if two Portal DB spaces exist
			var dbspaces = {};
			for (var propertyText in submenuObj) {
				if (!isNaN((propertyText.substr(0, propertyText.indexOf('.'))))) dbspaces[(propertyText.substr(0, propertyText.indexOf('.')))] = true;
			}

			if (Object.keys(dbspaces).length > 1) {
				for (var propertyText in submenuObj) {
					if (typeof submenuObj[propertyText].address != "undefined") {
						submenuObj[propertyText].text = submenuObj[propertyText].address;
						submenuObj[propertyText].value = getFn(submenuObj[propertyText].address);
					}
				}
			}
		}
		translateMenu(menuObj, nodes);
		if (typeof callback == "function") callback(menuObj);
	});
}

function focusTH() {
	if (active) {
		webMI.gfx.setStroke("focus_frame", focusStrokeColor);
	}
}
function blurTH() {
	if (active) {
		backTH();
		webMI.gfx.setStroke("focus_frame", "none");
	}
}
function applyTH() {
	webMI.callExtension("SYSTEM.LIBRARY.ATVISE.QUICKDYNAMICS.Open Context Menu", {
		"id":"addresspicker_clickarea",
		menuObj: function(callback) {
			createMenuFromAdress(base, callback);
		},
		"outputNode":null,
		"x":0,
		"y":30,
		minWidth: myWidth,
		onEvent: "immediately",
		active: function() {
			return (active);
		},
		"itemsCount": itemsCount,
		"style": contextMenuStyle
	});
}

function getDisplayParameters() {
	var communicationID = new Date().getTime().toString();
	webMI.trigger.connect(communicationID, function(e) {
		if (baseNode) {
			updateNodeValue(e.value);
		} else {
			updateDisplayValue(e.value);
		}
	});

	var passObj = {
		"trigger" : communicationID
	};
	return passObj;
}

function applyTH2() {
	if (active) {
		backTH();
		if (useSVGKeyboard) {
			var keyboardParam = getDisplayParameters();
			webMI.display.openWindow({
				display: "SYSTEM.LIBRARY.ATVISE.OBJECTDISPLAYS.Advanced.keyboard.keyboard",
				extern: false,
				height: 250,
				menubar: false,
				modal: true,
				movable: true,
				resizable: false,
				scrollbars: false,
				status: false,
				title: "T{Keyboard}",
				toolbar: false,
				width: 550,
				query: keyboardParam
			});
		} else {
			switchToInputMode();
		}
	}
}
function backTH() {
	webMI.callExtension("SYSTEM.LIBRARY.ATVISE.QUICKDYNAMICS.Open Context Menu", {
		id: "",
		onEvent: "immediately"
	});
}
function arrowTH(dir) {}
function keyHandler(keyTH, param2) {
	if (keyTH == "focus") {
		focusTH();
	} else if (keyTH == "blur") {
		blurTH();
	} else if (keyTH == "apply") {
		applyTH2();
	} else if (keyTH == "space") {
		applyTH();
	} else if (keyTH == "back") {
		backTH();
	} else if (keyTH == "arrow") {
		arrowTH(param2);
	} else if (keyTH == "isActive") {
		return active && param2(document.getElementById("addresspicker_clickarea").parentNode);
	}
}

function stopPropagation(event) {
	/*
	 * If the ALT key is pressed together with one or more other keys on
	 * Firefox (only Windows), there will be no keyup event when the ALT
	 * key gets released. Since the ALT key is being used for paning in
	 * atvise visualization, we have to make sure that key listeners in the
	 * global document do not get triggered if someone is currently entering
	 * something in the inputFO (like "someone@example.com").
	 **/
	if (event.altKey) {
		if (event.stopPropagation) 
			event.stopPropagation();
		else 
			event.cancelBubble = true;
	}
}

webMI.addEvent(inputFO, "keyup", stopPropagation);
webMI.addEvent(inputFO, "keydown", function(e) {
	var keyCode = e.keyCode;
	if (/MSIE/.test(navigator.userAgent)) {
		storedEvent["keyCode"] = e.keyCode;
		storedEvent["shiftKey"] = e.shiftKey;
	}
	if (keyCode == "13" || keyCode == "9") {
		inputFO.blur();
		if (keyCode == "13") 
			tabHandler.setAcceptKeysPrevent(true);
	} else if (keyCode == "27") {
		storedEvent["keyCode"] = "27";
		tabHandler.setAcceptKeysPrevent(true);
		inputFO.blur();
	}

	stopPropagation(e);
});

//mobile safari is not triggering blur event on a svg button click
if (isIOSDevice) {
	window.window.addEventListener("touchstart", touchstartHandler);
}

function touchstartHandler(e) {
	if (e.target !== inputFO && inputActive) {
		blurHandler();
	}
}

inputFO.onblur = blurHandler;

function blurHandler() {
	switchToOutputMode();
	tabHandler.setAcceptKeys(true);

	if (storedEvent["keyCode"] != null) {
		if (storedEvent["shiftKey"] && storedEvent["keyCode"] == "9") 
			tabHandler.prevTab();
		else if (storedEvent["keyCode"] == "9") 
			tabHandler.nextTab();
	}

	if (storedEvent["keyCode"] != "27") {
		//workaround: setTimeout for Chrome crash error (clicking out from the input field or clicking enter while holding a button pressed).
		setTimeout(function() {
			var value = inputFO.value;
			if (value !== undefined) {
				if (baseNode) {
					updateNodeValue(value);
				} else {
					updateDisplayValue(value);
				}
			}
		}, 0);
	}

	storedEvent["keyCode"] = null;
}

function switchToInputMode() {
	tabHandler.setAcceptKeys(false);
	inputFO.value = curValue;
	webMI.gfx.setVisible("input_clickarea", false);

	var inputElement = document.getElementById("input_element");
	foreignObject = webMI.gfx.addForeignObject({ x: 0, y: 0, width: 160, height: 30, id: "input_fo", childNodes: [inputFO] }, inputElement);
	foreignObject.style.outline = "black 2px solid";
	foreignObject.style.outlineOffset = "-2px";
	foreignObject.style.width = foreignObject.style.width.replace("px", "") - 30 + "px";
	inputFO.focus();
	inputActive = true;
}

function switchToOutputMode() {
	if (inputActive) {
		inputActive = false;
		webMI.gfx.setVisible("input_clickarea", true);

		if (foreignObject) {
			webMI.gfx.removeForeignObject(foreignObject);
			foreignObject = undefined;
		}
	}
}

if (!hasBrowseNodes) {
	webMI.gfx.setVisible("id_1", false);
} else {
	webMI.callExtension("SYSTEM.LIBRARY.ATVISE.QUICKDYNAMICS.Open Context Menu", {
		"id":"addresspicker_clickarea",
		menuObj: function(callback) {
			createMenuFromAdress(base, callback);
		},
		"outputNode":null,
		"x":0,
		"y":30,
		minWidth: myWidth,
		onEvent: "click",
		active: function() {
			return (active);
		},
		"itemsCount": itemsCount,
		"style": contextMenuStyle
	});

	webMI.addEvent("addresspicker_clickarea", "mousedown", function(e) {
		var id = "addresspicker_clickarea";
		var value = true;
	return function(value) {
			if (active) {
				tabHandler.setCurrentIndex(keyHandler);
				webMI.gfx.setStroke("focus_frame", strokeFillPressed);
				webMI.gfx.setStroke("button_stroke", strokeFillPressed);
				webMI.gfx.setFill("button_bg", "url(#linear_2)");
			}
	} (value);
	});

	webMI.addEvent("addresspicker_clickarea", ["mouseup", "mouseout"], function(e) {
		var id = "addresspicker_clickarea";
		var value = true;
	return function(value) {
			if (active) {
				webMI.gfx.setStroke("focus_frame", "none");
				webMI.gfx.setStroke("button_stroke", "none");
				webMI.gfx.setFill("button_bg", "none");
			}
	} (value);
	});

	webMI.addEvent("addresspicker_clickarea", "dragstart", function(e) {
		if (e.preventDefault) {
			e.preventDefault();
		}
	});
}

webMI.addOnload(function() {
	var doc = document.getElementById("addresspicker_clickarea").ownerDocument;
	tabHandler.register(tabIndex, keyHandler, doc);
});

webMI.addEvent("addresspicker_input_clickarea", "click", function(e) {
	var id = "addresspicker_input_clickarea";
	var value = true;
	return (function(value) {
		if (active) {
			tabHandler.setCurrentIndex(keyHandler);
			if (useSVGKeyboard) {
				var keyboardParam = getDisplayParameters();
				webMI.display.openWindow({
					display: "SYSTEM.LIBRARY.ATVISE.OBJECTDISPLAYS.Advanced.keyboard.keyboard",
					extern: false,
					height: 250,
					menubar: false,
					modal: true,
					movable: true,
					resizable: false,
					scrollbars: false,
					status: false,
					title: "T{Keyboard}",
					toolbar: false,
					width: 550,
					query: keyboardParam
				});
			} else {
				switchToInputMode();
			}
		}
	})(value);
});

webMI.trigger.connect("setValue", function(e) {
		if (baseNode) {
			updateNodeValue(e.value);
		} else {
			updateDisplayValue(e.value);
		}
}, "");

webMI.trigger.connect("com.atvise.setActive", function(e) {
	isSetActive = e.value;
	deActivate();
});

webMI.trigger.connect("com.atvise.setBlinking", function(e) {
	if (e.value == "none") {
		delete activeIndicators["trigger"];
	} else {
		activeIndicators["trigger"] = { color: e.value, interval: 500 };
	}
	setIndicator();
});

function updateDisplayValue(value) {
	webMI.trigger.fire("valuechanged", value, "");
	if (value.indexOf(base) > -1) 
		value = value.substring(value.indexOf(base) + base.length + 1);
	webMI.gfx.setText("input_label", value);
	curValue = value;
}

function updateNodeValue(value) {
	if (consistencyGroup) {
		consistencyHandler.set(consistencyGroup, baseNode, value);
		updateDisplayValue(value);
	} else {
		webMI.data.write(baseNode, value);
	}
}
if (tooltip != "") {
	webMI.callExtension("SYSTEM.LIBRARY.ATVISE.QUICKDYNAMICS.Tooltip", {"auto":"true", "id":"addresspicker_clickarea", "text":tooltip});
	webMI.callExtension("SYSTEM.LIBRARY.ATVISE.QUICKDYNAMICS.Tooltip", {"auto":"true", "id":"addresspicker_input_clickarea", "text":tooltip});
}]]></script>
</svg>
