<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<svg xmlns:atv="http://webmi.atvise.com/2007/svgext" xmlns="http://www.w3.org/2000/svg" version="1.2" xmlns:xlink="http://www.w3.org/1999/xlink" height="160" width="160">
	<defs/>
	<desc>Displays the current value of a node.</desc>
	<title>Base value tile</title>
	<metadata>
		<atv:parameter behavior="optional" valuetype="address" name="base" desc="base" defaultvalue=""/>
		<atv:parameter behavior="optional" valuetype="address" name="alarm" desc="alarm address" defaultvalue=""/>
		<!-- Output -->
		<atv:parameter behavior="mandatory" valuetype="trstring" substitute="$TITLE$" name="title" desc="title" group="View settings" defaultvalue="T{Title}"/>
		<atv:parameter behavior="optional" valuetype="trstring" name="unit" group="View settings" desc="unit"/>
		<atv:parameter behavior="optional" valuetype="enum" config="string;number" name="outputMode" group="View settings" desc="format" defaultvalue="string"/>
		<atv:parameter behavior="optional" valuetype="number" name="postDecimals" group="View settings" desc="decimals" defaultvalue="0"/>
		<atv:parameter behavior="optional" valuetype="enum" config="Times New Roman=Times New Roman,Bodoni,Garamond,Minion Web,ITC Stone Serif,MS Georgia,Bitstream Cyberbit,serif;Arial=MS Trebuchet,ITC Avant Garde Gothic,MS Arial,MS Verdana,Univers,Futura,ITC Stone Sans,Gill Sans,Akzidenz Grotesk,Helvetica,sans-serif;Courier=Courier,MS Courier New,Prestige,Everson Mono,monospace;Zapf-Chancery=Caflisch Script,Adobe Poetica,Sanvito,Ex Ponto,Snell Roundhand,Zapf-Chancery,cursive;Alpha Geometrique=Alpha Geometrique,Critter,Cottonwood,FB Reactor,Studz,fantasy" substitute="$TITLE_FONT_FAMILY$" name="fontFamily" desc="font family title" group="View settings" defaultvalue="Arial"/>
		<atv:parameter behavior="optional" valuetype="enum" config="Times New Roman=Times New Roman,Bodoni,Garamond,Minion Web,ITC Stone Serif,MS Georgia,Bitstream Cyberbit,serif;Arial=MS Trebuchet,ITC Avant Garde Gothic,MS Arial,MS Verdana,Univers,Futura,ITC Stone Sans,Gill Sans,Akzidenz Grotesk,Helvetica,sans-serif;Courier=Courier,MS Courier New,Prestige,Everson Mono,monospace;Zapf-Chancery=Caflisch Script,Adobe Poetica,Sanvito,Ex Ponto,Snell Roundhand,Zapf-Chancery,cursive;Alpha Geometrique=Alpha Geometrique,Critter,Cottonwood,FB Reactor,Studz,fantasy" substitute="$OUTPUT_FONT_FAMILY$" name="outputFontFamily" group="View settings" desc="font family value" defaultvalue="Arial"/>
		<atv:parameter behavior="optional" valuetype="enum" config="6;7;8;9;10;11;12;14;16;18;20;22" substitute="$TITLE_FONT_SIZE$" name="titleFontSize" group="View settings" desc="font size title" defaultvalue="12"/>
		<atv:parameter behavior="optional" valuetype="enum" config="6;7;8;9;10;11;12;14;16;18;20;22;26;28;36;48;72" substitute="$VALUE_FONT_SIZE$" name="valueFontSize" group="View settings" desc="font size value" defaultvalue="20"/>
		<atv:parameter behavior="optional" valuetype="enum" config="6;7;8;9;10;11;12;14;16;18;20;22;26;28;36;48;72" substitute="$UNIT_FONT_SIZE$" name="unitFontSize" group="View settings" desc="font size unit" defaultvalue="20"/>
		<atv:parameter behavior="optional" valuetype="enum" config="6;7;8;9;10;11;12;14;16;18;20;22;26;28;36;48;72" substitute="$ONELINE_FONT_SIZE$" name="onelineFontSize" group="View settings" desc="font size one-line" defaultvalue="20"/>
		<atv:parameter behavior="optional" valuetype="bool" name="oneLine" group="View settings" desc="one-line" defaultvalue="false"/>
		<!-- Behavior -->
		<atv:parameter behavior="mandatory" valuetype="bool" substitute="" name="enableClick" group="Behavior on click" desc="enable click event" defaultvalue="true"/>
		<atv:parameter behavior="optional" valuetype="bool" name="enableClickContent" group="Behavior on click" desc="enable click on content" defaultvalue="false"/>
		<atv:parameter behavior="optional" valuetype="display" name="display" group="Behavior on click" desc="targetdisplay" defaultvalue=""/>
		<atv:parameter behavior="optional" valuetype="string" substitute="" name="linkedElementID" group="Behavior on click" desc="linked element" defaultvalue=""/>
		<!-- Notification -->
		<atv:parameter behavior="optional" valuetype="enum" config="Yes;No" name="statusEnabled" group="Status" desc="enable status monitoring" defaultvalue="Yes"/>
		<atv:parameter behavior="optional" valuetype="string" name="statusTrigger" group="Status" desc="fire status trigger" defaultvalue=""/>
		<!-- Appearance -->
		<atv:parameter behavior="optional" valuetype="global" substitute="$BACKGROUND_COLOR$" name="backgroundColor" group="Appearance" desc="background color" defaultvalue="SYSTEM.GLOBALS.atvFillColor"/>
		<atv:parameter behavior="optional" valuetype="global" substitute="$TEXT_COLOR$" name="textColor" group="Appearance" desc="text color" defaultvalue="SYSTEM.GLOBALS.atvFontColor"/>
		<atv:parameter behavior="optional" valuetype="global" substitute="$BORDER_COLOR$" name="borderColor" group="Appearance" desc="border color" defaultvalue="SYSTEM.GLOBALS.atvBorderColor"/>
		<atv:parameter behavior="optional" valuetype="global" name="colorInactive" group="Appearance" desc="deactivation color" defaultvalue="SYSTEM.GLOBALS.atvInactiveColor"/>
		<atv:parameter behavior="optional" valuetype="global" name="statusIndication" group="Appearance" desc="status indication" defaultvalue="SYSTEM.GLOBALS.atvStatusIndication"/>
		<atv:parameter behavior="optional" valuetype="global" name="alarmIndication" group="Appearance" desc="alarm indication" defaultvalue="SYSTEM.GLOBALS.atvAlarmIndication"/>
		<!-- Options -->
		<atv:parameter behavior="optional" valuetype="trstring" name="tooltip" group="Options" desc="tooltip"/>
		<atv:parameter behavior="optional" valuetype="address" config="SYSTEM.SECURITY.RIGHTS" name="right" group="Security" desc="necessary right" defaultvalue=""/>
		<atv:parameter behavior="optional" valuetype="address" name="activeNode" group="Security" desc="activation address" defaultvalue=""/>
		<atv:parameter behavior="optional" valuetype="string" name="activeValue" group="Security" desc="activation value" defaultvalue="off"/>
		<!-- Config -->
		<atv:gridconfig height="10" gridstyle="lines" enabled="true" width="10"/>
		<atv:snapconfig height="5" enabled="true" width="5"/>
	</metadata>
	<rect stroke="$BORDER_COLOR$" rx="0" atv:refpx="80" height="158" atv:bindtl="0,0" y="1" stroke-width="2" x="1" atv:bindbr="1,1" ry="0" id="background" fill="$BACKGROUND_COLOR$" width="158" atv:refpy="80"/>
	<text dominant-baseline="auto" atv:refpx="80" alignment-baseline="auto" font-family="$TITLE_FONT_FAMILY$" font-size="$TITLE_FONT_SIZE$" atv:bindtl="0.5,0" y="18" x="80" atv:bindbr="0.5,0" text-anchor="middle" id="title" fill="$TEXT_COLOR$" atv:refpy="13">$TITLE$</text>
	<rect width="150" stroke="#000000" stroke-width="0" id="content_frame" atv:refpy="90" y="25" atv:bindtl="0,0" x="5" height="130" atv:refpx="80" atv:bindbr="1,1" fill="#ffffff"/>
	<rect width="156" fill-opacity="0" stroke-width="2" atv:refpy="80" id="blinking_frame" stroke="#000000" y="2" x="2" atv:bindtl="0,0" height="156" atv:refpx="80" atv:bindbr="1,1" fill="#ffffff"/>
	<text atv:refpx="80" font-family="Arial" font-size="20" atv:bindtl="0,0" y="90.5" x="80" atv:bindbr="1,1" text-anchor="middle" id="main_label" fill="#575757" atv:refpy="82.999" visibility="visible">Dashboard</text>
	<text atv:refpx="80" font-family="Arial" font-size="16" atv:bindtl="0,0" y="109.2" x="80" atv:bindbr="1,1" text-anchor="middle" id="sub_label" fill="#575757" atv:refpy="103.201" visibility="visible">Base value tile</text>
	<!-- value -->
	<text dominant-baseline="central" atv:refpx="80" alignment-baseline="central" font-family="$OUTPUT_FONT_FAMILY$" font-size="$VALUE_FONT_SIZE$" atv:bindtl="0.5,0.5" y="68" x="80" atv:bindbr="0.5,0.5" text-anchor="middle" id="value_label" fill="$TEXT_COLOR$" atv:refpy="60.5" visibility="hidden">&lt;value></text>
	<text dominant-baseline="central" atv:refpx="80" alignment-baseline="central" font-family="$OUTPUT_FONT_FAMILY$" font-size="$UNIT_FONT_SIZE$" atv:bindtl="0.5,0.5" y="112" x="80" atv:bindbr="0.5,0.5" text-anchor="middle" id="unit_label" fill="$TEXT_COLOR$" atv:refpy="104.5" visibility="hidden">&lt;unit></text>
	<text dominant-baseline="central" atv:refpx="80" alignment-baseline="central" font-family="$OUTPUT_FONT_FAMILY$" font-size="$ONELINE_FONT_SIZE$" atv:bindtl="0.5,0.5" y="90" x="80" atv:bindbr="0.5,0.5" text-anchor="middle" id="value_unit_label" fill="$TEXT_COLOR$" atv:refpy="82.5" visibility="hidden">&lt;value + unit></text>
	<!-- value -->
	<rect stroke="#0000ff" atv:refpx="80" height="25" atv:bindtl="0,0" y="0" stroke-width="0" x="0" atv:bindbr="1,1" id="clickarea_title" fill-opacity="0" fill="#000088" width="160" atv:refpy="12.5"/>
	<rect stroke="#0000ff" atv:refpx="80" height="135" atv:bindtl="0,0" y="25" stroke-width="0" x="0" atv:bindbr="1,1" id="clickarea_display" fill-opacity="0" fill="#000088" width="160" atv:refpy="92.5"/>
	<script type="text/ecmascript"><![CDATA[// Id definition
var TITLEAREA_ID = "clickarea_title";
var CLICKAREA_ID = "clickarea_display";
var MAIN_LABEL_ID = "main_label";
var SUB_LABEL_ID = "sub_label";
var VALUE_LABEL_ID = "value_label";
var VALUE_UNIT_LABEL_ID = "value_unit_label";
var UNIT_LABEL_ID = "unit_label";
var BLINKING_FRAME_ID = "blinking_frame";
var BACKGROUND_ID = "background";

// Color definition
var BLINKING_FRAME_COLOR_INACTIVE = webMI.query["backgroundColor"];
var BLINKING_FRAME_COLOR_ACTIVE = "#ffffff";
webMI.gfx.setStroke(BLINKING_FRAME_ID, BLINKING_FRAME_COLOR_INACTIVE);

webMI.addOnload(function () {

	// -------------------------------------------------------------------------
	// INIT & PARAM
	// -------------------------------------------------------------------------

	var queryParams = webMI.query;
	var base = queryParams["base"];
	// Output
	var unit = queryParams["unit"] || "";
	var numberMode = queryParams["outputMode"] === "number";
	var postDecimalFactor = Math.pow(10, queryParams["postDecimals"]);
	var oneLine = queryParams["oneLine"] == "true" ? true : false;
	// Behavior
	var enableClick = queryParams["enableClick"] == "true" ? true : false;
	var enableClickContent = queryParams["enableClickContent"] == "true" ? true : false;
	var display = queryParams["display"];
	var linkedElementID = queryParams["linkedElementID"];
	// Notification
	var alarmAddress = queryParams["alarm"];
	var statusEnabled = queryParams["statusEnabled"];
	var statusTrigger = queryParams["statusTrigger"];
	// Appearance
	var backgroundColor = queryParams["backgroundColor"];
	var colorInactive = queryParams["colorInactive"];
	var alarmIndication = queryParams["alarmIndication"];
	var statusIndication = queryParams["statusIndication"];
	// Options
	var tooltip = queryParams["tooltip"];
	// Rights
	var right = queryParams["right"] || "";
	var activeNode = queryParams["activeNode"] || "";
	var activeValue = queryParams["activeValue"] || "";

	var active = false;
	var hasRight = false;
	var nodeIsActive = false;
	var activeIndicators = {};
	var currentIndicator = "";

	// -------------------------------------------------------------------------
	// SCRIPTING
	// -------------------------------------------------------------------------

	// Remove "prefix" SYSTEM.SECURITY.RIGHTS
	if (right.search(/SYSTEM\.SECURITY\.RIGHTS\./) != -1) {
		right = right.substring(23, right.length);
	}


	// Right handling
	if (right != "") {
		webMI.addEvent(webMI.data, "clientvariableschange", function (e) {
			hasRight = false;
			if (("username" in e) && (e.username != "")) {
				hasRight = webMI.hasRight(right);
			}
			deActivate();
		});
	}


	// Check active node and value
	if ((activeNode != "") && (String(activeValue) != "")) {
		webMI.data.subscribe(activeNode, function (e) {
			var nodeActiveValue = e.value;
			if (typeof nodeActiveValue == "boolean") {
				nodeIsActive = (String(nodeActiveValue) == activeValue);
			} else if (typeof nodeActiveValue == "number") {
				try {
					var temp = parseFloat(activeValue);
					nodeIsActive = (nodeActiveValue == temp);
				} catch (e) {
					nodeIsActive = false;
				}
			} else {
				nodeIsActive = (nodeActiveValue == activeValue);
			}

			deActivate();
		});
	} else {
		deActivate();
	}


	// Click to open Display
	if (display && enableClick) {
		webMI.addEvent(TITLEAREA_ID, ["click", "touchend"], function (e) {
			if (active) {
				webMI.display.openDisplay(display);
			}
		});
		if (enableClickContent) {
			webMI.addEvent(CLICKAREA_ID, ["click", "touchend"], function (e) {
				if (active) {
					webMI.display.openDisplay(display);
				}
			});
		}

		/* link to a customer object */
		if (linkedElementID) {
			var element = window.document.getElementById(linkedElementID);
			webMI.addEvent(element, ["click", "touchend"], function (e) {
				if (active) {
					webMI.display.openDisplay(display);
				}
			});
		}
	}


	if (tooltip) {
		webMI.callExtension("SYSTEM.LIBRARY.ATVISE.QUICKDYNAMICS.Tooltip", {
			"auto": "true",
			"id": TITLEAREA_ID,
			"text": tooltip
		});
	}


	if (alarmAddress) {
		initAlarm(alarmAddress);
	}


	// -------------------------------------------------------------------------
	// Functions
	// -------------------------------------------------------------------------

	/**
	 * Activate and deactivate display
	 * @param switchActive
	 */
	function deActivate(switchActive) {
		if (right != "") {
			if ((String(activeValue) != "") && (activeNode != "")) {
				active = (nodeIsActive && hasRight);
			} else {
				active = hasRight;
			}
		} else {
			if ((String(activeValue) != "") && (activeNode != "")) {
				active = nodeIsActive;
			} else {
				active = true;
			}
		}

		if (typeof switchActive != "undefined" && active)
			active = switchActive;


		if (active) {
			webMI.gfx.setVisible(MAIN_LABEL_ID, false);
			webMI.gfx.setVisible(SUB_LABEL_ID, false);
			if (oneLine) {
				webMI.gfx.setVisible(VALUE_UNIT_LABEL_ID, null);
			} else {
				webMI.gfx.setVisible(VALUE_LABEL_ID, null);
				webMI.gfx.setVisible(UNIT_LABEL_ID, null);
			}
			webMI.gfx.setStroke(BLINKING_FRAME_ID, null);
			webMI.gfx.setFill(BACKGROUND_ID, backgroundColor);
			webMI.gfx.setFill(BLINKING_FRAME_ID, BLINKING_FRAME_COLOR_ACTIVE);
			setIndicator();
		} else {
			webMI.gfx.setText(SUB_LABEL_ID, "T{Tile inactive}");

			webMI.gfx.setVisible(MAIN_LABEL_ID, null);
			webMI.gfx.setVisible(SUB_LABEL_ID, null);

			webMI.gfx.setVisible(VALUE_LABEL_ID, false);
			webMI.gfx.setVisible(VALUE_UNIT_LABEL_ID, false);
			webMI.gfx.setVisible(UNIT_LABEL_ID, false);

			webMI.gfx.setFill(BACKGROUND_ID, colorInactive);
			webMI.gfx.setFill(BLINKING_FRAME_ID, colorInactive);
			webMI.gfx.setStroke(BLINKING_FRAME_ID, BLINKING_FRAME_COLOR_INACTIVE);
		}
	}


	/**
	 * Set indicator
	 */
	function setIndicator() {
		if (currentIndicator != "" || !active)
			return;

		if (activeIndicators["trigger"]) {
			currentIndicator = "trigger";
		} else if (activeIndicators["status"]) {
			currentIndicator = "status";
		} else if (activeIndicators["alarm"]) {
			currentIndicator = "alarm";
		} else {
			currentIndicator = "";
			return;
		}

		if (active) {
			webMI.gfx.setStroke(BLINKING_FRAME_ID, activeIndicators[currentIndicator].color);
		}

		var interval = activeIndicators[currentIndicator].interval;
		setTimeout(function () {
			if (active) {
				webMI.gfx.setStroke(BLINKING_FRAME_ID, null);
			}
			setTimeout(function () {
				currentIndicator = "";
				setIndicator();
			}, interval);
		}, interval);
	}


	/**
	 * Status handling
	 * @param status
	 */
	function handleStatus(status) {
		if (statusEnabled != "Yes")
			return;

		if (statusTrigger != "") {
			webMI.trigger.fire(statusTrigger, status);
		} else {
			if (typeof statusIndication["ItemStatusBad"] == "undefined")
				statusIndication = {"ItemStatusBad": {color: "#ffff00", interval: "250"}};

			if (isGood(status))				//Good value state
				delete activeIndicators["status"];
			else if (isBad(status))			//Bad value state
				activeIndicators["status"] = {
					color: statusIndication["ItemStatusBad"].color,
					interval: parseInt(statusIndication["ItemStatusBad"].interval)
				};
			else if (isUncertain(status))	//Uncertain value state
				activeIndicators["status"] = {
					color: statusIndication["ItemStatusBad"].color,
					interval: parseInt(statusIndication["ItemStatusBad"].interval)
				};
			else							//Unknown value state
				activeIndicators["status"] = {
					color: statusIndication["ItemStatusBad"].color,
					interval: parseInt(statusIndication["ItemStatusBad"].interval)
				};

			setIndicator();
		}
	}


	/**
	 * Alarm handling
	 * @param address
	 */
	function initAlarm(address) {
		if (alarmIndication == "")
			alarmIndication = {};

		if (typeof alarmIndication["AlarmStatusOnUnacknowledged"] == "undefined")
			alarmIndication["AlarmStatusOnUnacknowledged"] = {color: "#ff0000", interval: "250"};

		if (typeof alarmIndication["AlarmStatusOnAcknowledged"] == "undefined")
			alarmIndication["AlarmStatusOnAcknowledged"] = {color: "#ff0000", interval: "500"};

		if (typeof alarmIndication["AlarmStatusOffUnacknowledged"] == "undefined")
			alarmIndication["AlarmStatusOffUnacknowledged"] = {color: "#ff0000", interval: "750"};

		if (typeof alarmIndication["AlarmStatusOnOffUnacknowledged"] == "undefined")
			alarmIndication["AlarmStatusOnOffUnacknowledged"] = {color: "#ff0000", interval: "1500"};

		webMI.alarm.subscribe(address, function (e) {
			if (e.state == 1)
				activeIndicators["alarm"] = {
					color: alarmIndication["AlarmStatusOnUnacknowledged"].color,
					interval: parseInt(alarmIndication["AlarmStatusOnUnacknowledged"].interval)
				};
			else if (e.state == 2)
				activeIndicators["alarm"] = {
					color: alarmIndication["AlarmStatusOnAcknowledged"].color,
					interval: parseInt(alarmIndication["AlarmStatusOnAcknowledged"].interval)
				};
			else if (e.state == 3)
				activeIndicators["alarm"] = {
					color: alarmIndication["AlarmStatusOffUnacknowledged"].color,
					interval: parseInt(alarmIndication["AlarmStatusOffUnacknowledged"].interval)
				};
			else if (e.state == 5)
				activeIndicators["alarm"] = {
					color: alarmIndication["AlarmStatusOnOffUnacknowledged"].color,
					interval: parseInt(alarmIndication["AlarmStatusOnOffUnacknowledged"].interval)
				};
			else
				delete activeIndicators["alarm"];

			setIndicator();
		});
	}

	function round(value) {
		return Math.round(value * postDecimalFactor) / postDecimalFactor;
	}

	function isUndefined(status) {
		return typeof status === "undefined";
	}

	function isGood(status) {
		return !isUndefined(status) && (status == 0 || (status & 0xC0000000).toString(16) == 0);
	}

	function isUncertain(status) {
		return !isUndefined(status) && ((status & 0xC0000000).toString(16) == 40000000);
	}

	function isBad(status) {
		return !isUndefined(status) && ((status & 0x80000000).toString(16) != 0);
	}


	// -----------------------------------------------------------------------------------
	// TRIGGER & CONNECT
	// -----------------------------------------------------------------------------------

	/**
	 * Blinking trigger
	 */
	webMI.trigger.connect("com.atvise.setBlinking", function (e) {
		if (e.value == "none") {
			delete activeIndicators["trigger"];
		} else {
			activeIndicators["trigger"] = {color: e.value, interval: 500};
		}
		setIndicator();
	});


	/**
	 * Trigger set Active
	 */
	webMI.trigger.connect("com.atvise.setActive", function (e) {
		deActivate(e.value);
	});


	/**
	 * subscribe base
	 */
	webMI.data.subscribe(base, function (node) {
		var value = node.value;

		if (numberMode) {
			value = round(parseFloat(value, 10));
		}

		webMI.gfx.setText(VALUE_LABEL_ID, typeof value != "undefined" ? value : "");
		webMI.gfx.setText(VALUE_UNIT_LABEL_ID, (typeof value != "undefined" ? value : "") + " " + (unit ? unit : ""));
		webMI.gfx.setText(UNIT_LABEL_ID, unit ? unit : "");
		handleStatus(node.status);

	});
});
]]></script>
</svg>