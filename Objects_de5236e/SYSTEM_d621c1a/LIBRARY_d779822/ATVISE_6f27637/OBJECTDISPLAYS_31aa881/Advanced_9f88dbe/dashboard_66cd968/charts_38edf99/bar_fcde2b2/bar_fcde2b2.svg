<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<svg xmlns:atv="http://webmi.atvise.com/2007/svgext" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://www.w3.org/2000/svg" height="130" version="1.2" width="150">
 <defs/>
 <desc>Displays up to 25 values in a bar chart.</desc>
 <title>Bar</title>
 <metadata>
  <atv:parameter defaultvalue="" desc="alarm address" name="alarm" behavior="optional" valuetype="address"/>
  <atv:parameter defaultvalue="Yes" config="Yes;No" desc="enable status monitoring" name="statusEnabled" behavior="optional" valuetype="enum"/>
  <atv:parameter defaultvalue="" desc="fire status trigger" name="statusTrigger" behavior="optional" valuetype="string"/>
  <atv:parameter desc="unit" name="unit" behavior="optional" valuetype="trstring"/>
  <atv:parameter defaultvalue="0" desc="decimals" name="postDecimals" behavior="optional" valuetype="address"/>
  <atv:parameter defaultvalue="None" config="None;Ascending;Descending" desc="sort order" name="sortOrder" behavior="optional" valuetype="enum"/>
  <atv:parameter defaultvalue="" desc="minimum" name="min" behavior="optional" valuetype="number"/>
  <atv:parameter defaultvalue="" desc="maximum" name="max" behavior="optional" valuetype="number"/>
  <atv:parameter defaultvalue="Vertical" config="Horizontal;Vertical" desc="display mode" name="seriesOrientation" behavior="optional" valuetype="enum"/>
  <atv:parameter defaultvalue="5" desc="displayed series (0 = all)" name="seriesCount" behavior="optional" valuetype="number"/>
  <atv:parameter defaultvalue="#b7b7b7" desc="deactivation color" name="colorInactive" behavior="optional" group="Appearance" valuetype="color"/>
  <atv:parameter defaultvalue="SYSTEM.GLOBALS.atvFontColor" desc="text color" name="textColor" behavior="optional" group="Appearance" valuetype="global" substitute="$TEXT_COLOR$"/>
  <atv:parameter defaultvalue="SYSTEM.GLOBALS.atvStatusIndication" desc="status indication" name="statusIndication" behavior="optional" group="Appearance" valuetype="global"/>
  <atv:parameter defaultvalue="SYSTEM.GLOBALS.atvAlarmIndication" desc="alarm indication" name="alarmIndication" behavior="optional" group="Appearance" valuetype="global"/>
  <atv:parameter defaultvalue="" config="SYSTEM.SECURITY.RIGHTS" desc="necessary right" name="right" behavior="optional" group="Security" valuetype="address"/>
  <atv:parameter defaultvalue="" desc="activation address" name="activeNode" behavior="optional" group="Security" valuetype="address"/>
  <atv:parameter defaultvalue="off" desc="activation value" name="activeValue" behavior="optional" group="Security" valuetype="string"/>
  <atv:parameter defaultvalue="T{Series 1}" desc="name" name="series1Name" behavior="optional" group="Series 1" valuetype="trstring"/>
  <atv:parameter defaultvalue="" desc="address" name="series1Address" behavior="optional" group="Series 1" valuetype="address"/>
  <atv:parameter defaultvalue="#7cb5ec" desc="color" name="series1Color" behavior="optional" group="Series 1" valuetype="color"/>
  <atv:parameter defaultvalue="T{Series 2}" desc="name" name="series2Name" behavior="optional" group="Series 2" valuetype="trstring"/>
  <atv:parameter defaultvalue="" desc="address" name="series2Address" behavior="optional" group="Series 2" valuetype="address"/>
  <atv:parameter defaultvalue="#434348" desc="color" name="series2Color" behavior="optional" group="Series 2" valuetype="color"/>
  <atv:parameter defaultvalue="T{Series 3}" desc="name" name="series3Name" behavior="optional" group="Series 3" valuetype="trstring"/>
  <atv:parameter defaultvalue="" desc="address" name="series3Address" behavior="optional" group="Series 3" valuetype="address"/>
  <atv:parameter defaultvalue="#90ed7d" desc="color" name="series3Color" behavior="optional" group="Series 3" valuetype="color"/>
  <atv:parameter defaultvalue="T{Series 4}" desc="name" name="series4Name" behavior="optional" group="Series 4" valuetype="trstring"/>
  <atv:parameter defaultvalue="" desc="address" name="series4Address" behavior="optional" group="Series 4" valuetype="address"/>
  <atv:parameter defaultvalue="#f7a35c" desc="color" name="series4Color" behavior="optional" group="Series 4" valuetype="color"/>
  <atv:parameter defaultvalue="T{Series 5}" desc="name" name="series5Name" behavior="optional" group="Series 5" valuetype="trstring"/>
  <atv:parameter defaultvalue="" desc="address" name="series5Address" behavior="optional" group="Series 5" valuetype="address"/>
  <atv:parameter defaultvalue="#8085e9" desc="color" name="series5Color" behavior="optional" group="Series 5" valuetype="color"/>
  <atv:parameter defaultvalue="T{Series 6}" desc="name" name="series6Name" behavior="optional" group="Series 6" valuetype="trstring"/>
  <atv:parameter defaultvalue="" desc="address" name="series6Address" behavior="optional" group="Series 6" valuetype="address"/>
  <atv:parameter defaultvalue="#f15c80" desc="color" name="series6Color" behavior="optional" group="Series 6" valuetype="color"/>
  <atv:parameter defaultvalue="T{Series 7}" desc="name" name="series7Name" behavior="optional" group="Series 7" valuetype="trstring"/>
  <atv:parameter defaultvalue="" desc="address" name="series7Address" behavior="optional" group="Series 7" valuetype="address"/>
  <atv:parameter defaultvalue="#e4d354" desc="color" name="series7Color" behavior="optional" group="Series 7" valuetype="color"/>
  <atv:parameter defaultvalue="T{Series 8}" desc="name" name="series8Name" behavior="optional" group="Series 8" valuetype="trstring"/>
  <atv:parameter defaultvalue="" desc="address" name="series8Address" behavior="optional" group="Series 8" valuetype="address"/>
  <atv:parameter defaultvalue="#2b908f" desc="color" name="series8Color" behavior="optional" group="Series 8" valuetype="color"/>
  <atv:parameter defaultvalue="T{Series 9}" desc="name" name="series9Name" behavior="optional" group="Series 9" valuetype="trstring"/>
  <atv:parameter defaultvalue="" desc="address" name="series9Address" behavior="optional" group="Series 9" valuetype="address"/>
  <atv:parameter defaultvalue="#90ed7d" desc="color" name="series9Color" behavior="optional" group="Series 9" valuetype="color"/>
  <atv:parameter defaultvalue="T{Series 10}" desc="name" name="series10Name" behavior="optional" group="Series 10" valuetype="trstring"/>
  <atv:parameter defaultvalue="" desc="address" name="series10Address" behavior="optional" group="Series 10" valuetype="address"/>
  <atv:parameter defaultvalue="#ccd6eb" desc="color" name="series10Color" behavior="optional" group="Series 10" valuetype="color"/>
  <atv:parameter defaultvalue="T{Series 11}" desc="name" name="series11Name" behavior="optional" group="Series 11" valuetype="trstring"/>
  <atv:parameter defaultvalue="" desc="address" name="series11Address" behavior="optional" group="Series 11" valuetype="address"/>
  <atv:parameter defaultvalue="#7cb5ec" desc="color" name="series11Color" behavior="optional" group="Series 11" valuetype="color"/>
  <atv:parameter defaultvalue="T{Series 12}" desc="name" name="series12Name" behavior="optional" group="Series 12" valuetype="trstring"/>
  <atv:parameter defaultvalue="" desc="address" name="series12Address" behavior="optional" group="Series 12" valuetype="address"/>
  <atv:parameter defaultvalue="#434348" desc="color" name="series12Color" behavior="optional" group="Series 12" valuetype="color"/>
  <atv:parameter defaultvalue="T{Series 13}" desc="name" name="series13Name" behavior="optional" group="Series 13" valuetype="trstring"/>
  <atv:parameter defaultvalue="" desc="address" name="series13Address" behavior="optional" group="Series 13" valuetype="address"/>
  <atv:parameter defaultvalue="#90ed7d" desc="color" name="series13Color" behavior="optional" group="Series 13" valuetype="color"/>
  <atv:parameter defaultvalue="T{Series 14}" desc="name" name="series14Name" behavior="optional" group="Series 14" valuetype="trstring"/>
  <atv:parameter defaultvalue="" desc="address" name="series14Address" behavior="optional" group="Series 14" valuetype="address"/>
  <atv:parameter defaultvalue="#f7a35c" desc="color" name="series14Color" behavior="optional" group="Series 14" valuetype="color"/>
  <atv:parameter defaultvalue="T{Series 15}" desc="name" name="series15Name" behavior="optional" group="Series 15" valuetype="trstring"/>
  <atv:parameter defaultvalue="" desc="address" name="series15Address" behavior="optional" group="Series 15" valuetype="address"/>
  <atv:parameter defaultvalue="#8085e9" desc="color" name="series15Color" behavior="optional" group="Series 15" valuetype="color"/>
  <atv:parameter defaultvalue="T{Series 16}" desc="name" name="series16Name" behavior="optional" group="Series 16" valuetype="trstring"/>
  <atv:parameter defaultvalue="" desc="address" name="series16Address" behavior="optional" group="Series 16" valuetype="address"/>
  <atv:parameter defaultvalue="#f15c80" desc="color" name="series16Color" behavior="optional" group="Series 16" valuetype="color"/>
  <atv:parameter defaultvalue="T{Series 17}" desc="name" name="series17Name" behavior="optional" group="Series 17" valuetype="trstring"/>
  <atv:parameter defaultvalue="" desc="address" name="series17Address" behavior="optional" group="Series 17" valuetype="address"/>
  <atv:parameter defaultvalue="#e4d354" desc="color" name="series17Color" behavior="optional" group="Series 17" valuetype="color"/>
  <atv:parameter defaultvalue="T{Series 18}" desc="name" name="series18Name" behavior="optional" group="Series 18" valuetype="trstring"/>
  <atv:parameter defaultvalue="" desc="address" name="series18Address" behavior="optional" group="Series 18" valuetype="address"/>
  <atv:parameter defaultvalue="#2b908f" desc="color" name="series18Color" behavior="optional" group="Series 18" valuetype="color"/>
  <atv:parameter defaultvalue="T{Series 19}" desc="name" name="series19Name" behavior="optional" group="Series 19" valuetype="trstring"/>
  <atv:parameter defaultvalue="" desc="address" name="series19Address" behavior="optional" group="Series 19" valuetype="address"/>
  <atv:parameter defaultvalue="#90ed7d" desc="color" name="series19Color" behavior="optional" group="Series 19" valuetype="color"/>
  <atv:parameter defaultvalue="T{Series 20}" desc="name" name="series20Name" behavior="optional" group="Series 20" valuetype="trstring"/>
  <atv:parameter defaultvalue="" desc="address" name="series20Address" behavior="optional" group="Series 20" valuetype="address"/>
  <atv:parameter defaultvalue="#ccd6eb" desc="color" name="series20Color" behavior="optional" group="Series 20" valuetype="color"/>
  <atv:parameter defaultvalue="T{Series 21}" desc="name" name="series21Name" behavior="optional" group="Series 21" valuetype="trstring"/>
  <atv:parameter defaultvalue="" desc="address" name="series21Address" behavior="optional" group="Series 21" valuetype="address"/>
  <atv:parameter defaultvalue="#7cb5ec" desc="color" name="series21Color" behavior="optional" group="Series 21" valuetype="color"/>
  <atv:parameter defaultvalue="T{Series 22}" desc="name" name="series22Name" behavior="optional" group="Series 22" valuetype="trstring"/>
  <atv:parameter defaultvalue="" desc="address" name="series22Address" behavior="optional" group="Series 22" valuetype="address"/>
  <atv:parameter defaultvalue="#434348" desc="color" name="series22Color" behavior="optional" group="Series 22" valuetype="color"/>
  <atv:parameter defaultvalue="T{Series 23}" desc="name" name="series23Name" behavior="optional" group="Series 23" valuetype="trstring"/>
  <atv:parameter defaultvalue="" desc="address" name="series23Address" behavior="optional" group="Series 23" valuetype="address"/>
  <atv:parameter defaultvalue="#90ed7d" desc="color" name="series23Color" behavior="optional" group="Series 23" valuetype="color"/>
  <atv:parameter defaultvalue="T{Series 24}" desc="name" name="series24Name" behavior="optional" group="Series 24" valuetype="trstring"/>
  <atv:parameter defaultvalue="" desc="address" name="series24Address" behavior="optional" group="Series 24" valuetype="address"/>
  <atv:parameter defaultvalue="#f7a35c" desc="color" name="series24Color" behavior="optional" group="Series 24" valuetype="color"/>
  <atv:parameter defaultvalue="T{Series 25}" desc="name" name="series25Name" behavior="optional" group="Series 25" valuetype="trstring"/>
  <atv:parameter defaultvalue="" desc="address" name="series25Address" behavior="optional" group="Series 25" valuetype="address"/>
  <atv:parameter defaultvalue="#8085e9" desc="color" name="series25Color" behavior="optional" group="Series 25" valuetype="color"/>
  <atv:gridconfig height="20" gridstyle="lines" width="20" enabled="false"/>
  <atv:snapconfig height="10" width="10" enabled="false"/>
 </metadata>
 <rect x="0.5" stroke-width="1" height="129" atv:bindbr="1,1" fill-opacity="0" stroke="#000000" width="149" atv:bindtl="0,0" atv:refpy="65" visibility="visible" y="0.5" id="border" stroke-linecap="butt" fill="#ffffff" atv:refpx="75"/>
 <g atv:insensitive="true" atv:refpy="0" id="id_0" transform="matrix(0.8333,0,0,0.7222,0,0)" atv:refpx="0">
  <rect x="0" height="180.00" width="180.00" atv:refpy="90" y="0" id="id_1" fill="#fffcfd" atv:refpx="90"/>
 </g>
 <foreignObject x="1" height="128" atv:bindbr="1,1" width="148" atv:bindtl="0,0" y="1" id="fo_container">
  <div style="width:100%; height:100%;" xmlns="http://www.w3.org/1999/xhtml">
   <div style="width:100%; height:100%; visibility:visible; display:block;" id="highcharts_container_bar"/>
  </div>
 </foreignObject>
 <text x="75" font-family="Arial" atv:bindbr="0.5,0.5" text-anchor="middle" font-size="20" atv:bindtl="0.5,0.5" atv:refpy="56.127" visibility="visible" y="63.627" id="main_label" fill="#575757" atv:refpx="75">Dashboard</text>
 <text x="75" font-family="Arial" atv:bindbr="0.5,0.5" text-anchor="middle" font-size="16" atv:bindtl="0.5,0.5" atv:refpy="108.679" visibility="visible" y="82.373" id="sub_label" fill="#575757" atv:refpx="-354.674">Bar chart</text>
 <script type="text/ecmascript"><![CDATA[var MAX_SERIES_COUNT = 25;

// Id definitions
var MAIN_LABEL_ID = "main_label";
var SUB_LABEL_ID = "sub_label";
var BORDER_ID = "border";
var HIGHCHARTS_CONTAINER_ID = "highcharts_container_bar";

// Trigger definitions
var OPEN_DISPLAY_TRIGGER = "com.atvise.dashboard.openDisplay";
var SHOW_HIDE_BLINKING_FRAME_TRIGGER = "com.atvise.dashboard.showHideBlinkingFrame";
var SET_BLINKING_FRAME_STROKE_TRIGGER = "com.atvise.dashboard.setBlinkingFrameStroke";
var SET_ACTIVE_TRIGGER = "com.atvise.dashboard.setActive";
var SET_INACTIVE_TRIGGER = "com.atvise.dashboard.setInactive";

// Color Definitions
var BLINKING_FRAME_COLOR_INACTIVE = "#000000";

webMI.addOnload(function () {
	var queryParams = webMI.query;
	var chartDiv = document.getElementById(HIGHCHARTS_CONTAINER_ID);

	var addresses = [];
	var seriesNames = [];
	var seriesColors = [];
	var options = {};
	var chart = null;

	var addressIdx = 1;
	var seriesName = "";
	var seriesAddress = "";
	var seriesColor = "";

	// Query parameters
	var unit = queryParams["unit"] || "";
	var min = queryParams["min"] || null;
	var max = queryParams["max"] || null;
	var postDecimalFactor = Math.pow(10, queryParams["postDecimals"]);
	var seriesCount = queryParams["seriesCount"];
	var seriesOrientation = queryParams["seriesOrientation"];
	var right = queryParams["right"] || "";
	var activeNode = queryParams["activeNode"] || "";
	var activeValue = queryParams["activeValue"] || "";
	var alarmIndication = queryParams["alarmIndication"];
	var statusIndication = queryParams["statusIndication"];
	var colorInactive = queryParams["colorInactive"];
	var statusEnabled = queryParams["statusEnabled"];
	var statusTrigger = queryParams["statusTrigger"];
	var alarmAddress = queryParams["alarm"];
	var textColor = queryParams["textColor"];
	var seriesOrder = queryParams["seriesOrder"];

	var active = false;
	var hasRight = false;
	var nodeIsActive = false;
	var activeIndicators = {};
	var currentIndicator = "";

	var statusLabels = {};
	statusLabels.Good = "";
	statusLabels.Bad = "BAD";
	statusLabels.Uncertain = "UNCERTAIN";
	statusLabels.Unknown = "UNKNOWN";


	var sortFunction;
	var trendConfig;


	function round(value) {
		return Math.round(value * postDecimalFactor) / postDecimalFactor;
	}

	function sortAsc(prev, next) {
		return prev.y - next.y;
	}

	function sortDesc (prev, next) {
		return next.y - prev.y;
	}

	function formatLabels () {
		var label = round(this.y) + " " + unit;
		var statusLabel = getStatusLabel(this.point.status);

		if (statusLabel !== statusLabels.Good) {
			label += " (" + statusLabel + ")";
		}

		return label;
	};


	// Activate and deactivate display
	function deActivate() {
		if (right != "") {
			if ((String(activeValue) != "") && (activeNode != "")) {
				active = (nodeIsActive && hasRight);
			} else {
				active = hasRight;
			}
		} else {
			if ((String(activeValue) != "") && (activeNode != "")) {
				active = nodeIsActive;
			} else {
				active = true;
			}
		}

		if (active) {
			webMI.trigger.fire(SET_ACTIVE_TRIGGER, "", "");
			setIndicator();
		} else {
			webMI.trigger.fire(SET_INACTIVE_TRIGGER, "", "");
		}
	}


	// Set indicator
	function setIndicator() {
		if (currentIndicator != "" || !active)
			return;

		if (activeIndicators["trigger"]) {
			currentIndicator = "trigger";
		} else if (activeIndicators["status"]) {
			currentIndicator = "status";
		} else if (activeIndicators["alarm"]) {
			currentIndicator = "alarm";
		} else {
			currentIndicator = "";
			return;
		}

		if (active) {
			webMI.trigger.fire(SET_BLINKING_FRAME_STROKE_TRIGGER, activeIndicators[currentIndicator].color, "");
			webMI.trigger.fire(SHOW_HIDE_BLINKING_FRAME_TRIGGER, null, "");
		}

		var interval = activeIndicators[currentIndicator].interval;
		setTimeout(function() {
			if (active) {
				webMI.trigger.fire(SHOW_HIDE_BLINKING_FRAME_TRIGGER, false, "");
			}
			setTimeout(function() {
				currentIndicator = "";
				setIndicator();
			}, interval);
		}, interval);
	}

	function getStatusLabel (status) {
		var label = "";

		if (isGood(status)) {
			label = statusLabels.Good;
		} else if (isBad(status)) {
			label = statusLabels.Bad;
		} else if (isUncertain(status)) {
			label = statusLabels.Uncertain;
		} else {
			label = statusLabels.Unknown;
		}

		return label;
	}

	function isUndefined(status) {
		return typeof status === "undefined";
	}

	function isGood (status) {
		return !isUndefined(status) && (status == 0 || (status & 0xC0000000).toString(16) == 0);
	}

	function isUncertain (status) {
		return !isUndefined(status) && ((status & 0xC0000000).toString(16) == 40000000);
	}

	function isBad (status) {
		return !isUndefined(status) && ((status & 0x80000000).toString(16) != 0);
	}


	// Status handling
	function handleStatus(status) {
		if (statusEnabled != "Yes")
			return;

		if (statusTrigger != "") {
			webMI.trigger.fire(statusTrigger, status);
		} else {
			if (typeof statusIndication["ItemStatusBad"] == "undefined")
				statusIndication = {"ItemStatusBad": {color: "#ffff00", interval: "250"}};

			if (isGood(status))				//Good value state
				delete activeIndicators["status"];
			else if (isBad(status))			//Bad value state
				activeIndicators["status"] = {color: statusIndication["ItemStatusBad"].color, interval: parseInt(statusIndication["ItemStatusBad"].interval)};
			else if (isUncertain(status))	//Uncertain value state
				activeIndicators["status"] = {color: statusIndication["ItemStatusBad"].color, interval: parseInt(statusIndication["ItemStatusBad"].interval)};
			else							//Unknown value state
				activeIndicators["status"] = {color: statusIndication["ItemStatusBad"].color, interval: parseInt(statusIndication["ItemStatusBad"].interval)};

			setIndicator();
		}
	}

	// Alarm handling
	function initAlarm(address) {
		if (alarmIndication == "")
			alarmIndication = {};

		if (typeof alarmIndication["AlarmStatusOnUnacknowledged"] == "undefined")
			alarmIndication["AlarmStatusOnUnacknowledged"] = {color: "#ff0000", interval: "250"};

		if (typeof alarmIndication["AlarmStatusOnAcknowledged"] == "undefined")
			alarmIndication["AlarmStatusOnAcknowledged"] = {color: "#ff0000", interval: "500"};

		if (typeof alarmIndication["AlarmStatusOffUnacknowledged"] == "undefined")
			alarmIndication["AlarmStatusOffUnacknowledged"] = {color: "#ff0000", interval: "750"};

		if (typeof alarmIndication["AlarmStatusOnOffUnacknowledged"] == "undefined")
			alarmIndication["AlarmStatusOnOffUnacknowledged"] = {color: "#ff0000", interval: "1500"};

		webMI.alarm.subscribe(address, function(e) {
			if (e.state == 1)
				activeIndicators["alarm"] = {color: alarmIndication["AlarmStatusOnUnacknowledged"].color, interval: parseInt(alarmIndication["AlarmStatusOnUnacknowledged"].interval)};
			else if (e.state == 2)
				activeIndicators["alarm"] = {color: alarmIndication["AlarmStatusOnAcknowledged"].color, interval: parseInt(alarmIndication["AlarmStatusOnAcknowledged"].interval)};
			else if (e.state == 3)
				activeIndicators["alarm"] = {color: alarmIndication["AlarmStatusOffUnacknowledged"].color, interval: parseInt(alarmIndication["AlarmStatusOffUnacknowledged"].interval)};
			else if (e.state == 5)
				activeIndicators["alarm"] = {color: alarmIndication["AlarmStatusOnOffUnacknowledged"].color, interval: parseInt(alarmIndication["AlarmStatusOnOffUnacknowledged"].interval)};
			else
				delete activeIndicators["alarm"];

			setIndicator();
		});
	}

	webMI.gfx.setVisible(MAIN_LABEL_ID, false);
	webMI.gfx.setVisible(SUB_LABEL_ID, false);
	webMI.gfx.setVisible(BORDER_ID, false);

	if (seriesOrder === "Descending") {
		sortFunction = sortDesc;
	} else if (seriesOrder === "Ascending") {
		sortFunction = sortAsc;
	}

	options.trendName = chartDiv.id.split("_highcharts_container_bar")[0];
	options.trendGroup = "";
	options.trendConfig = {};

	trendConfig = options.trendConfig;

	trendConfig.chart = {};
	trendConfig.title = {};
	trendConfig.xAxis = {};
	trendConfig.yAxis = {};
	trendConfig.yAxis.labels = {};
	trendConfig.tooltip = {};
	trendConfig.plotOptions = {};
	trendConfig.plotOptions.series = {};
	trendConfig.plotOptions.series.dataLabels = {};
	trendConfig.plotOptions.series.states = {};
	trendConfig.plotOptions.series.states.hover = {};
	trendConfig.plotOptions.bar = {};
	trendConfig.plotOptions.bar.dataLabels = {};
	trendConfig.plotOptions.column = {};
	trendConfig.plotOptions.column.dataLabels = {};
	trendConfig.legend = {};
	trendConfig.series = [];
	trendConfig.credits = {};
	trendConfig.exporting = {};

	trendConfig.chart.type = seriesOrientation === "Vertical" ? "column" : "bar";
	trendConfig.chart.zoomType = "";
	trendConfig.chart.panning = false;

	trendConfig.title.text = "";

	trendConfig.xAxis.type = "category";
	trendConfig.xAxis.title = "";
	trendConfig.xAxis.lineWidth = 0;
	trendConfig.xAxis.gridLineWidth = 0;
	trendConfig.xAxis.minorGridLineWidth = 0;
	trendConfig.xAxis.majorGridLineWidth = 0;
	trendConfig.xAxis.lineColor = "transparent";
	trendConfig.xAxis.tickLength = 0;
	trendConfig.xAxis.minorTickLength = 0;
	trendConfig.xAxis.majorTickLength = 0;

	trendConfig.yAxis.min = min;
	trendConfig.yAxis.max = max;
	trendConfig.yAxis.title = "";
	trendConfig.yAxis.labels.enabled = false;
	trendConfig.yAxis.lineWidth = 0;
	trendConfig.yAxis.gridLineWidth = 0;
	trendConfig.yAxis.minorGridLineWidth = 0;
	trendConfig.yAxis.majorGridLineWidth = 0;
	trendConfig.yAxis.lineColor = "transparent";
	trendConfig.yAxis.tickLength = 0;
	trendConfig.yAxis.minorTickLength = 0;
	trendConfig.yAxis.majorTickLength = 0;

	trendConfig.plotOptions.bar.dataLabels.enabled = true;
	trendConfig.plotOptions.bar.dataLabels.formatter = formatLabels;
	trendConfig.plotOptions.bar.dataLabels.color = textColor;
	trendConfig.plotOptions.bar.animation = false;

	/*
    trendConfig.plotOptions.series.dataLabels.enabled = true;
    trendConfig.plotOptions.series.dataLabels.inside = false;
    trendConfig.plotOptions.series.dataLabels.align = "left";
	*/

	trendConfig.plotOptions.column.dataLabels.enabled = true;
	trendConfig.plotOptions.column.dataLabels.formatter = formatLabels;
	trendConfig.plotOptions.column.dataLabels.color = textColor;
	trendConfig.plotOptions.column.animation = false;

	trendConfig.series.push({data: []});

	trendConfig.tooltip.enabled = false;
	trendConfig.legend.enabled = false;
	trendConfig.credits.enabled = false;
	trendConfig.exporting.enabled = false;
	trendConfig.plotOptions.series.states.hover.enabled = false;

	options.trendConfig.atviseOptions = {
		configNode: "",
		configName: "",
		mode: "",
		source: "opcUA",
		enableCursor1: false,
		enableCursor2: false,
		disableDownSampling: true
	};

	for (addressIdx; addressIdx <= MAX_SERIES_COUNT; addressIdx++) {
		seriesAddress = queryParams["series" + addressIdx + "Address"];
		seriesName = queryParams["series" + addressIdx + "Name"];
		seriesColor = queryParams["series" + addressIdx + "Color"];

		if (seriesAddress && seriesName) {
			addresses.push(seriesAddress);
			seriesNames.push(seriesName);
			seriesColors.push(seriesColor);
		}
	}

	if (addresses.length > 0) {
		webMI.trendFactory.createTrend(chartDiv, options, function (trendInstance) {
			chart = trendInstance.chart;

			// Remove "prefix" SYSTEM.SECURITY.RIGHTS
			if (right.search(/SYSTEM\.SECURITY\.RIGHTS\./) != -1) {
				right = right.substring(23,right.length); 
			}
		
			// Right handling
			if (right != "") {
				webMI.addEvent(webMI.data, "clientvariableschange", function(e) {
					hasRight = false;
					if (("username" in e) && (e.username != "")) {
							hasRight = webMI.hasRight(right);
					}
					deActivate();
				});
			}

			// Check active node and value
			if ((activeNode != "") && (String(activeValue) != "")) {
				webMI.data.subscribe(activeNode, function(e) {
					var nodeActiveValue = e.value;
					if (typeof nodeActiveValue == "boolean") {
						nodeIsActive = (String(nodeActiveValue) == activeValue);
					} else if (typeof nodeActiveValue == "number") {
						try {
							var temp = parseFloat(activeValue);
							nodeIsActive = (nodeActiveValue == temp);
						} catch(e) {
							nodeIsActive = false;
						}
					} else {
						nodeIsActive = (nodeActiveValue == activeValue);
					}

					deActivate();
				});
			} else {
				deActivate();
			}

			// Blinking trigger
			webMI.trigger.connect("com.atvise.setBlinking", function(e) {
				if (e.value == "none"){
					delete activeIndicators["trigger"];
				} else {
					activeIndicators["trigger"] = {color: e.value, interval: 500};
				}	
				setIndicator();
			});

			// Open display trigger
			webMI.trigger.connect(OPEN_DISPLAY_TRIGGER, function (triggerObj) {
				if (active) {
					webMI.display.openDisplay(triggerObj.value);
				}
			}, "");

			if (alarmAddress) {
				initAlarm(alarmAddress);
			}

			deActivate()
			chartDiv.style.visibility = "visible";

			webMI.data.subscribeBlock(addresses, [], function(nodes) {
				var nodeIdx = 0;
				var seriesObj = {};
				var seriesData = [];
				var worstState = 0;
	
				// Map series data
				for(nodeIdx; nodeIdx < nodes.length; nodeIdx++) {
					seriesObj = {};
					seriesObj.y = nodes[nodeIdx].value;
					seriesObj.name = seriesNames[nodeIdx];
					seriesObj.color = seriesColors[nodeIdx];
					seriesObj.status = nodes[nodeIdx].status;
	
					if (typeof seriesObj.y !== "number") {
						seriesObj.y = 0;
					}
	
					// use worst value state for status handling
					if (typeof seriesObj.status === "undefined") {
						worstState = undefined;
					} else if (isGood(worstState) && (isUncertain(seriesObj.status) || isBad(seriesObj.status)) ||
						(isUncertain(worstState) && isBad(seriesObj.status))) {
						worstState = seriesObj.status;
					}
	
					seriesData.push(seriesObj);
				}

				// Sort series data
				if (sortFunction) {
					seriesData.sort(sortFunction);
				}

				// Cut entries
				if (seriesCount > 0 && seriesData.length > seriesCount) {
					seriesData = seriesData.slice(0, seriesCount);
				}
	
				chart.series[0].update({
					data: seriesData
				}, true);
	
				handleStatus(worstState);
	
			});
		});
	} else {
		webMI.trigger.fire(SET_INACTIVE_TRIGGER, "", "");
	}
});]]></script>
</svg>
