<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<svg width="80" xmlns="http://www.w3.org/2000/svg" xmlns:atv="http://webmi.atvise.com/2007/svgext" xmlns:xlink="http://www.w3.org/1999/xlink" height="30" version="1.2">
 <defs>
  <linearGradient y1="0" gradientUnits="objectBoundingBox" x1="1" x2="1" y2="1" id="linear_1">
   <stop stop-color="#ffffff" offset="0" stop-opacity="0"/>
   <stop stop-color="#ffffff" offset="1" stop-opacity="0"/>
  </linearGradient>
  <linearGradient y1="0" gradientUnits="objectBoundingBox" x1="1" x2="1" y2="1" id="linear_2">
   <stop stop-color="#ffffff" offset="0" stop-opacity="0.35"/>
   <stop stop-color="#ffffff" offset="1" stop-opacity="0.35"/>
  </linearGradient>
 </defs>
 <desc>Fires trigger "clicked".</desc>
 <title>Button</title>
 <metadata>
  <atv:parameter desc="base" valuetype="address" behavior="hidden" name="base"/>
  <atv:parameter substitute="$LABEL$" defaultvalue="T{Basic}" desc="label line 1" valuetype="trstring" behavior="optional" name="label"/>
  <atv:parameter substitute="$LABEL2$" desc="label line 2" valuetype="trstring" behavior="optional" name="label2"/>
  <atv:parameter substitute="$FONTFAMILY$" config="Times New Roman=Times New Roman,Bodoni,Garamond,Minion Web,ITC Stone Serif,MS Georgia,Bitstream Cyberbit,serif;Arial=MS Trebuchet,ITC Avant Garde Gothic,MS Arial,MS Verdana,Univers,Futura,ITC Stone Sans,Gill Sans,Akzidenz Grotesk,Helvetica,sans-serif;Courier=Courier,MS Courier New,Prestige,Everson Mono,monospace;Zapf-Chancery=Caflisch Script,Adobe Poetica,Sanvito,Ex Ponto,Snell Roundhand,Zapf-Chancery,cursive;Alpha Geometrique=Alpha Geometrique,Critter,Cottonwood,FB Reactor,Studz,fantasy" defaultvalue="Arial" desc="family" group="Font" valuetype="enum" behavior="hidden" name="fontFamily"/>
  <atv:parameter substitute="$FONTSIZE$" config="6;7;8;9;10;11;12;14;16;18;20;22;24;26;28;36;48;72" defaultvalue="12" desc="size" group="Font" valuetype="enum" behavior="optional" name="fontSize"/>
  <atv:parameter substitute="$FONTCOLOR$" defaultvalue="SYSTEM.GLOBALS.atvFontColor" desc="color" group="Font" valuetype="global" behavior="optional" name="fontColor"/>
  <atv:parameter substitute="$VISIBILITYLABEL$" config="visible=inherit;hidden=hidden" defaultvalue="inherit" desc="visibility label" group="Appearance" valuetype="enum" behavior="optional" name="visibilityLabel"/>
  <atv:parameter substitute="$VISIBILITYSYMBOL$" config="visible=inherit;hidden=hidden" defaultvalue="hidden" desc="visibility symbol" group="Appearance" valuetype="enum" behavior="optional" name="visibilitySymbol"/>
  <atv:parameter substitute="$SYMBOL$" config="SYSTEM.LIBRARY.ATVISE.OBJECTDISPLAYS.Symbols.20x20" defaultvalue="SYSTEM.LIBRARY.ATVISE.OBJECTDISPLAYS.Symbols.20x20.check" desc="symbol" group="Appearance" valuetype="display" behavior="optional" name="symbol"/>
  <atv:parameter defaultvalue="SYSTEM.GLOBALS.atvSymbolColor" desc="symbol color" group="Appearance" valuetype="global" behavior="optional" name="symbolColor"/>
  <atv:parameter substitute="" defaultvalue="100" desc="symbol scaling (%)" group="Appearance" valuetype="number" behavior="optional" name="symbolScaling"/>
  <atv:parameter substitute="$FILLCOLOR$" defaultvalue="SYSTEM.GLOBALS.atvFillColor" desc="fill color" group="Appearance" valuetype="global" behavior="optional" name="fillColor"/>
  <atv:parameter defaultvalue="SYSTEM.GLOBALS.atvInactiveColor" desc="fill color when inactive" group="Appearance" valuetype="global" behavior="optional" name="fillColorInactive"/>
  <atv:parameter defaultvalue="#FFFFFF" desc="stroke color pressed" group="Appearance" valuetype="color" behavior="optional" name="strokePressed"/>
  <atv:parameter defaultvalue="#FFFFFF" desc="focus stroke color" group="Appearance" valuetype="color" behavior="optional" name="focusStrokeColor"/>
  <atv:parameter substitute="$BORDERCOLOR$" defaultvalue="SYSTEM.GLOBALS.atvBorderColor" desc="border color" group="Appearance" valuetype="global" behavior="optional" name="borderColor"/>
  <atv:parameter defaultvalue="none" desc="extra border color" group="Appearance" valuetype="color" behavior="optional" name="extraBorderColor"/>
  <atv:parameter config="SYSTEM.SECURITY.RIGHTS" desc="necessary right" group="Security" valuetype="address" behavior="optional" name="right"/>
  <atv:parameter desc="activation address" group="Security" valuetype="address" behavior="optional" name="activeNode"/>
  <atv:parameter desc="activation value" group="Security" valuetype="string" behavior="optional" name="activeValue"/>
  <atv:parameter desc="group" group="Consistency" valuetype="string" behavior="optional" name="consistencyGroup"/>
  <atv:parameter config="write;read" defaultvalue="write" desc="function" group="Consistency" valuetype="enum" behavior="optional" name="consistencyFunction"/>
  <atv:parameter desc="tab index" group="Options" valuetype="number" behavior="optional" name="tabIndex"/>
  <atv:parameter desc="tooltip" group="Options" valuetype="trstring" behavior="optional" name="tooltip"/>
  <atv:gridconfig width="2" enabled="true" gridstyle="lines" height="2"/>
  <atv:snapconfig width="1" enabled="true" height="1"/>
 </metadata>
 <g atv:refpy="15" atv:refpx="40" id="button_clickarea">
  <rect width="80" rx="2.8" atv:bindbr="1,1" stroke="none" ry="2.8" x="0" y="0" stroke-width="4" fill="$BORDERCOLOR$" atv:refpy="16.017" atv:bindtl="0,0" atv:refpx="40.252" height="30" id="outer_frame" atv:dynamic="true"/>
  <rect width="78" rx="2.1" atv:bindbr="1,1" stroke="none" ry="2.1" x="1" y="1" stroke-width="4" fill="$FILLCOLOR$" atv:refpy="15.948" atv:bindtl="0,0" atv:refpx="40.245" height="28" id="button_bg" atv:dynamic="true"/>
  <rect width="76" rx="2.1" atv:bindbr="1,1" stroke="none" ry="2.1" x="2" y="2" stroke-width="1" fill="url(#linear_1)" fill-opacity="1" atv:refpy="15.881" atv:bindtl="0,0" atv:refpx="40.238" height="26" id="button_stroke" atv:dynamic="true"/>
  <text atv:bindbr="0.5,0.5" visibility="$VISIBILITYLABEL$" font-size="$FONTSIZE$" x="40" y="19.5" font-family="$FONTFAMILY$" fill="$FONTCOLOR$" text-anchor="middle" atv:refpy="14.5" atv:bindtl="0.5,0.5" atv:refpx="40" id="button_label">$LABEL$</text>
  <text atv:bindbr="0.5,0.5" visibility="hidden" font-size="$FONTSIZE$" x="40" y="11.5" font-family="$FONTFAMILY$" fill="$FONTCOLOR$" text-anchor="middle" atv:refpy="7" atv:bindtl="0.5,0.5" atv:refpx="40" id="button_label_1">$LABEL$</text>
  <text atv:bindbr="0.5,0.5" visibility="hidden" font-size="$FONTSIZE$" x="40" y="26.5" font-family="$FONTFAMILY$" fill="$FONTCOLOR$" text-anchor="middle" atv:refpy="22" atv:bindtl="0.5,0.5" atv:refpx="40" id="button_label_2">$LABEL2$</text>
  <svg width="20" atv:bindbr="0.5,0.5" visibility="$VISIBILITYSYMBOL$" x="30" y="5" xlink:href="$SYMBOL$" atv:refpy="20" atv:bindtl="0.5,0.5" atv:refpx="130" height="20" id="button_symbol">
   <atv:argument prefix="symbolColor" name="symbolColor"/>
  </svg>
  <rect width="78" rx="2.1" atv:bindbr="1,1" stroke="none" ry="2.1" x="1" y="1" stroke-width="4" fill="#d6d6d6" fill-opacity="0.001" atv:refpy="15.949" atv:bindtl="0,0" atv:refpx="40.246" height="28" id="id_6" atv:dynamic="true"/>
 </g>
 <script type="text/ecmascript"><![CDATA[var strokeNormal = "none";
var strokePressed = webMI.query["strokePressed"];
var extraBorderColor = webMI.query["extraBorderColor"];
var focusStrokeColor = webMI.query["focusStrokeColor"];
var fillColor = webMI.query["fillColor"];
var fillColorInactive = webMI.query["fillColorInactive"];
var display = webMI.query["display"];
var consistencyGroup = webMI.query["consistencyGroup"];
var consistencyFunction = webMI.query["consistencyFunction"];
var symbolScaling = parseInt(webMI.query["symbolScaling"],10);

/* calculation of visibility and positions due scaling && bindings */
webMI.addOnload(function () {
	var FRAME = {};
	FRAME.element = document.getElementById("outer_frame");
	FRAME.height = parseInt(FRAME.element.getAttribute("height"));
	FRAME.width = parseInt(FRAME.element.getAttribute("width"));

	var SYMBOL = {};
	SYMBOL.element = document.getElementById("button_clickarea").parentNode;
	SYMBOL.height = parseInt(SYMBOL.element.getAttribute("height"));
	SYMBOL.width = parseInt(SYMBOL.element.getAttribute("width"));

	/* set text position */
	if (webMI.query["visibilityLabel"] !== "hidden") {
		var oneLine = typeof webMI.query["label2"] === "undefined" || webMI.query["label2"] === "";

		var LABEL_1 = document.getElementById("button_label_1");
		var LABEL_2 = document.getElementById("button_label_2");

		var font = parseInt(webMI.query["fontSize"]);
		var space = Math.ceil((FRAME.height - font * 2) / 3);

		LABEL_1.setAttribute("y", space + font - 1);
		LABEL_2.setAttribute("y", FRAME.height - space - 1);

		if (!oneLine) {
			webMI.gfx.setVisible("button_label", false);
			if (SYMBOL.element.getAttribute("visibility") != "hidden") {
				webMI.gfx.setVisible("button_label_1", true);
				webMI.gfx.setVisible("button_label_2", true);
			}
		} else {
			webMI.gfx.setVisible("button_label_1", false);
			webMI.gfx.setVisible("button_label_2", false);
		}
	}

	/* set and scale icon position */
	if(symbolScaling != 0 && symbolScaling != 100){
		var scale = {};
		scale.x = FRAME.width / SYMBOL.width;
		scale.y = FRAME.height / SYMBOL.height;
		scale.value = symbolScaling / 100;

		var offset = {};
		offset.x = 20 * (scale.x - scale.value) / 2;
		offset.y = 20 * (scale.y - scale.value) / 2;

		var icon = document.getElementById("button_symbol");
		icon.setAttribute("viewBox", "0,0,20,20");
		icon.setAttribute("x", 30 * scale.x + offset.x);
		icon.setAttribute("y", 5 * scale.y + offset.y);
		icon.setAttribute("width", 20 * scale.value);
		icon.setAttribute("height", 20 * scale.value);
	}
});


if (consistencyGroup)
	var consistencyHandler = webMI.callExtension("SYSTEM.LIBRARY.ATVISE.QUICKDYNAMICS.Consistency Handler");

var tabHandler = webMI.callExtension("SYSTEM.LIBRARY.ATVISE.QUICKDYNAMICS.Tab Handler");
var tabIndex = (webMI.query["tabIndex"] == undefined) ? "" : webMI.query["tabIndex"];
var tooltip = (webMI.query["tooltip"] == undefined) ? "" : webMI.query["tooltip"];

var right = (webMI.query["right"] == undefined) ? "" : webMI.query["right"];
if (right.search(/SYSTEM\.SECURITY\.RIGHTS\./) != -1) {
	right = right.substring(23, right.length); //remove "prefix" SYSTEM.SECURITY.RIGHTS.
}

var active = false;
var hasRight = false;

if (right != "") {
	webMI.addEvent(webMI.data, "clientvariableschange", function (e) {
		hasRight = false;
		if (("username" in e) && (e.username != "")) {
			hasRight = webMI.hasRight(right);
		}
		deActivate();
	});
}

var activeValue = (webMI.query["activeValue"] == undefined) ? "" : webMI.query["activeValue"];
var activeNode = (webMI.query["activeNode"] == undefined) ? "" : webMI.query["activeNode"];
var nodeIsActive = false;

if ((activeNode != "") && (String(activeValue) != "")) {
	webMI.data.subscribe(activeNode, function (e) {
		var nodeActiveValue = e.value;
		if (typeof nodeActiveValue == "boolean") {
			nodeIsActive = (String(nodeActiveValue) == activeValue);
		} else if (typeof nodeActiveValue == "number") {
			try {
				var temp = parseFloat(activeValue);
				nodeIsActive = (nodeActiveValue == temp);
			} catch (e) {
				nodeIsActive = false;
			}
		} else {
			nodeIsActive = (nodeActiveValue == activeValue);
		}
		deActivate();
	});
} else {
	deActivate();
}

if (extraBorderColor != "none" && extraBorderColor != "") {
	webMI.gfx.setStroke("button_stroke", extraBorderColor);
}

function deActivate(forceDeActivate) {
	if (typeof forceDeActivate !== "undefined" && forceDeActivate) {
		active = false;
	} else if (right != "") {
		if ((String(activeValue) != "") && (activeNode != "")) {
			active = (nodeIsActive && hasRight);
		} else {
			active = hasRight;
		}
	} else {
		if ((String(activeValue) != "") && (activeNode != "")) {
			active = nodeIsActive;
		} else {
			active = true;
		}
	}
	if (active) {
		webMI.gfx.setFill("button_bg", fillColor);
		webMI.gfx.setVisible("button_stroke", null);
	} else {
		webMI.gfx.setFill("button_bg", fillColorInactive);
		webMI.gfx.setVisible("button_stroke", false);
	}
}

function release() {
	if (active) {
		webMI.gfx.setFill("button_stroke", "url(#linear_1)");
	}
	if (extraBorderColor == "none" || extraBorderColor == "") {
		webMI.gfx.setStroke("button_stroke", strokeNormal);
	} else {
		webMI.gfx.setStroke("button_stroke", extraBorderColor);
		webMI.gfx.setStrokeWidth("button_stroke", 1);
	}
}

function focusTH() {
	if (active) {
		webMI.gfx.setStroke("button_stroke", focusStrokeColor);
		if (extraBorderColor != "none" && extraBorderColor != "") {
			webMI.gfx.setStrokeWidth("button_stroke", 2);
		}
	}
}

function applyTH() {
	if (active) {
		webMI.trigger.fire("clicked", true, "");
	}
	if (consistencyGroup)
		consistencyFunction == "write" ? consistencyHandler.write(consistencyGroup) : consistencyHandler.read(consistencyGroup);
}

function backTH() {
}

function arrowTH(dir) {
}

function keyHandler(keyTH, param2) {
	if (keyTH == "focus") {
		focusTH();
	} else if (keyTH == "blur") {
		release();
	} else if (keyTH == "apply") {
		webMI.gfx.setFill("button_stroke", "url(#linear_2)");
		applyTH();
	} else if (keyTH == "releaseClick") {
		webMI.gfx.setFill("button_stroke", "url(#linear_1)");
	} else if (keyTH == "back") {
		backTH();
	} else if (keyTH == "arrow") {
		arrowTH(param2);
	} else if (keyTH == "isActive") {
		return active && param2(document.getElementById("button_clickarea").parentNode);
	}
}

webMI.addEvent("button_clickarea", "mousedown", function (e) {
	var id = "button_clickarea";
	var value = true;
	return function (value) {
		if (active) {
			webMI.gfx.setFill("button_stroke", "url(#linear_2)");
			webMI.gfx.setStroke("button_stroke", strokePressed);
		}
	}(value);
});

webMI.addEvent("button_clickarea", "mouseup", function (e) {
	var id = "button_clickarea";
	var value = true;
	return function (value) {
		release();
	}(value);
});

webMI.addEvent("button_clickarea", "mouseout", function (e) {
	var id = "button_clickarea";
	var value = true;
	return function (value) {
		release();
	}(value);
});

webMI.addEvent("button_clickarea", "click", function (e) {
	if (active) {
		tabHandler.setCurrentIndex(keyHandler, function () {
			webMI.trigger.fire("clicked", true, "")
		});
		//webMI.trigger.fire("clicked", true, "");
	}
	if (consistencyGroup)
		consistencyFunction == "write" ? consistencyHandler.write(consistencyGroup) : consistencyHandler.read(consistencyGroup);
});

webMI.addEvent("button_clickarea", "dragstart", function (e) {
	if (e.preventDefault) {
		e.preventDefault();
	}
});
webMI.addOnload(function () {
	var doc = document.getElementById("button_clickarea").ownerDocument;
	tabHandler.register(tabIndex, keyHandler, doc);
});

webMI.trigger.connect("com.atvise.setActive", function (e) {
	if (e.value) {
		deActivate();
	} else {
		deActivate(true);
	}
});

if (tooltip != "") {
	webMI.callExtension("SYSTEM.LIBRARY.ATVISE.QUICKDYNAMICS.Tooltip", {
		"auto": "true",
		"id": "button_clickarea",
		"text": tooltip
	});
}]]></script>
</svg>
