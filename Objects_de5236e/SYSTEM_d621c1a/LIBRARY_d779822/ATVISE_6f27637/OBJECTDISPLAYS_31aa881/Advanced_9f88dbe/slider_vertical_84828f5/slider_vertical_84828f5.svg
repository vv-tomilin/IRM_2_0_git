<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<svg version="1.2" xmlns:atv="http://webmi.atvise.com/2007/svgext" width="75" height="180" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
 <defs>
  <linearGradient id="linear_21" y1="-0.0183441" y2="1" x1="1" gradientUnits="objectBoundingBox" x2="1">
   <stop offset="0" stop-color="#6d6d6d"/>
   <stop offset="1" stop-color="#3e3e3e"/>
  </linearGradient>
  <linearGradient id="linear_1" y1="-0.0183441" y2="1" x1="1" gradientUnits="objectBoundingBox" x2="1">
   <stop offset="0" stop-color="#494949"/>
   <stop offset="1" stop-color="#000000"/>
  </linearGradient>
  <linearGradient id="linear_2" y1="0.986849" y2="-0.0183441" x1="0.238798" gradientUnits="objectBoundingBox" x2="0.238798">
   <stop offset="0" stop-color="#494949"/>
   <stop offset="1" stop-color="#000000"/>
  </linearGradient>
  <linearGradient id="linear_3" y1="-0.0459829" y2="0.55328" x1="0.875142" gradientUnits="objectBoundingBox" x2="0.875142">
   <stop offset="0" stop-color="#ff0000"/>
   <stop offset="1" stop-color="#620000"/>
  </linearGradient>
 </defs>
 <desc>Displays value of an address as a slider.</desc>
 <title>Slider vertical</title>
 <metadata>fillNotEditable
  <atv:parameter behavior="mandatory" desc="base" valuetype="address" name="base"/>
  <atv:parameter defaultvalue="" behavior="optional" desc="alarm address" valuetype="address" name="alarm"/>
  <atv:parameter config="Yes;No" defaultvalue="Yes" behavior="optional" desc="enable status monitoring" valuetype="enum" name="statusEnabled"/>
  <atv:parameter defaultvalue="" behavior="optional" desc="fire status trigger" valuetype="string" name="statusTrigger"/>
  <atv:parameter substitute="$LABEL$" defaultvalue="T{Label}" behavior="optional" desc="label" valuetype="trstring" name="label"/>
  <atv:parameter substitute="$U$" defaultvalue="" behavior="optional" desc="unit" valuetype="trstring" name="unit"/>
  <atv:parameter substitute="$MIN$" defaultvalue="0" behavior="mandatory" desc="minimum" valuetype="number" name="min"/>
  <atv:parameter substitute="$MAX$" defaultvalue="100" behavior="mandatory" desc="maximum" valuetype="number" name="max"/>
  <atv:parameter config="Times New Roman=Times New Roman,Bodoni,Garamond,Minion Web,ITC Stone Serif,MS Georgia,Bitstream Cyberbit,serif;Arial=MS Trebuchet,ITC Avant Garde Gothic,MS Arial,MS Verdana,Univers,Futura,ITC Stone Sans,Gill Sans,Akzidenz Grotesk,Helvetica,sans-serif;Courier=Courier,MS Courier New,Prestige,Everson Mono,monospace;Zapf-Chancery=Caflisch Script,Adobe Poetica,Sanvito,Ex Ponto,Snell Roundhand,Zapf-Chancery,cursive;Alpha Geometrique=Alpha Geometrique,Critter,Cottonwood,FB Reactor,Studz,fantasy" substitute="$FONTFAMILY$" defaultvalue="Arial" behavior="optional" desc="family" group="Font" valuetype="enum" name="fontFamily"/>
  <atv:parameter substitute="$FONTCOLOR$" defaultvalue="SYSTEM.GLOBALS.atvFontColor" behavior="optional" desc="text color" group="Font" valuetype="global" name="fontColor"/>
  <atv:parameter config="6;7;8;9;10;11;12;14;16;18;20;22;24;26;28;36;48;72" substitute="$FONTSIZEVALUE$" defaultvalue="12" behavior="optional" desc="size for value" group="Font" valuetype="enum" name="fontSizeValue"/>
  <atv:parameter config="6;7;8;9;10;11;12;14;16;18;20;22;24;26;28;36;48;72" substitute="$FONTSIZELABELS$" defaultvalue="10" behavior="optional" desc="size for label" group="Font" valuetype="enum" name="fontSizeLabels"/>
  <atv:parameter config="6;7;8;9;10;11;12;14;16;18;20;22;24;26;28;36;48;72" substitute="$FONTSIZEUNIT$" defaultvalue="10" behavior="optional" desc="size for unit" group="Font" valuetype="enum" name="fontSizeUnit"/>
  <atv:parameter defaultvalue="0" behavior="optional" desc="post decimal positions" group="Appearance" valuetype="number" name="decimalPositions"/>
  <atv:parameter substitute="$FILLCOLOR$" defaultvalue="SYSTEM.GLOBALS.atvFillColor" behavior="optional" desc="fill color" group="Appearance" valuetype="global" name="fillColor"/>
  <atv:parameter substitute="$BARCOLOR$" defaultvalue="SYSTEM.GLOBALS.atvAccent1" behavior="optional" desc="bar color" group="Appearance" valuetype="global" name="barColor"/>
  <atv:parameter defaultvalue="#b7b7b7" behavior="optional" desc="bar color when inactive" group="Appearance" valuetype="color" name="barColorInactive"/>
  <atv:parameter defaultvalue="#f9e199" behavior="optional" desc="bar color when not editable" group="Appearance" valuetype="color" name="barColorNotEditable"/>
  <atv:parameter defaultvalue="#00FF00" behavior="optional" desc="bar color limits on" group="Appearance" valuetype="color" name="barColorLimitsOn"/>
  <atv:parameter defaultvalue="off" behavior="optional" desc="limit low low (off=no limit)" group="Appearance" valuetype="string" name="limitLowLow"/>
  <atv:parameter defaultvalue="off" behavior="optional" desc="limit low (off=no limit)" group="Appearance" valuetype="string" name="limitLow"/>
  <atv:parameter defaultvalue="off" behavior="optional" desc="limit high (off=no limit)" group="Appearance" valuetype="string" name="limitHigh"/>
  <atv:parameter defaultvalue="off" behavior="optional" desc="limit high high (off=no limit)" group="Appearance" valuetype="string" name="limitHighHigh"/>
  <atv:parameter substitute="$LIMITLOWLOWFILL$" defaultvalue="#ff0000" behavior="optional" desc="limit low low color" group="Appearance" valuetype="color" name="limitLowLowFill"/>
  <atv:parameter substitute="$LIMITLOWFILL$" defaultvalue="#F9B233" behavior="optional" desc="limit low color" group="Appearance" valuetype="color" name="limitLowFill"/>
  <atv:parameter substitute="$LIMITHIGHFILL$" defaultvalue="#F9B233" behavior="optional" desc="limit high color" group="Appearance" valuetype="color" name="limitHighFill"/>
  <atv:parameter substitute="$LIMITHIGHHIGHFILL$" defaultvalue="#ff0000" behavior="optional" desc="limit high high color" group="Appearance" valuetype="color" name="limitHighHighFill"/>
  <atv:parameter config="SYSTEM.LIBRARY.ATVISE.OBJECTDISPLAYS.Symbols.scales" substitute="$SCALE$" defaultvalue="SYSTEM.LIBRARY.ATVISE.OBJECTDISPLAYS.Symbols.scales.2_scale_10_slider" behavior="optional" desc="displayed scale" group="Appearance" valuetype="display" name="scale"/>
  <atv:parameter defaultvalue="#ffffff" behavior="optional" desc="scale color" group="Appearance" valuetype="color" name="scaleColor"/>
  <atv:parameter substitute="$SMALLSCALECOLOR$" defaultvalue="#D7D7D7" behavior="optional" desc="small scale color" group="Appearance" valuetype="color" name="smallScaleColor"/>
  <atv:parameter substitute="$SYMBOLCOLOR$" defaultvalue="SYSTEM.GLOBALS.atvSymbolColor" behavior="optional" desc="symbol color" group="Appearance" valuetype="global" name="symbolColor"/>
  <atv:parameter substitute="$BORDERCOLOR$" defaultvalue="SYSTEM.GLOBALS.atvBorderColor" behavior="optional" desc="border color" group="Appearance" valuetype="global" name="borderColor"/>
  <atv:parameter defaultvalue="SYSTEM.GLOBALS.atvStatusIndication" behavior="optional" desc="status indication" group="Appearance" valuetype="global" name="statusIndication"/>
  <atv:parameter defaultvalue="SYSTEM.GLOBALS.atvAlarmIndication" behavior="optional" desc="alarm indication" group="Appearance" valuetype="global" name="alarmIndication"/>
  <atv:parameter config="Yes;No" defaultvalue="Yes" behavior="optional" desc="editable" group="Security" valuetype="enum" name="editable"/>
  <atv:parameter config="SYSTEM.SECURITY.RIGHTS" defaultvalue="" behavior="optional" desc="necessary right" group="Security" valuetype="address" name="right"/>
  <atv:parameter defaultvalue="" behavior="optional" desc="activation address" group="Security" valuetype="address" name="activeNode"/>
  <atv:parameter defaultvalue="off" behavior="optional" desc="activation value" group="Security" valuetype="string" name="activeValue"/>
  <atv:parameter behavior="optional" desc="address for minimum" group="Options" valuetype="address" name="nodeMin"/>
  <atv:parameter behavior="optional" desc="address for maximum" group="Options" valuetype="address" name="nodeMax"/>
  <atv:parameter behavior="optional" desc="address for limit low low" group="Options" valuetype="address" name="nodeLowLow"/>
  <atv:parameter behavior="optional" desc="address for limit low" group="Options" valuetype="address" name="nodeLow"/>
  <atv:parameter behavior="optional" desc="address for limit high" group="Options" valuetype="address" name="nodeHigh"/>
  <atv:parameter behavior="optional" desc="address for limit high high" group="Options" valuetype="address" name="nodeHighHigh"/>
  <atv:gridconfig width="10" enabled="true" height="10" gridstyle="lines"/>
  <atv:snapconfig width="2" enabled="false" height="2"/>
 </metadata>
 <text id="id_1" font-size="$FONTSIZELABELS$" fill="$FONTCOLOR$" atv:refpy="149.765" atv:refpx="11.26" font-family="$FONTFAMILY$" x="31.26" y="153.265" text-anchor="middle">$LABEL$</text>
 <rect id="id_20" ry="3.5" width="130" transform="matrix(0,-1,1,0,0,0)" fill="$FILLCOLOR$" stroke="$BORDERCOLOR$" atv:refpy="68.555" height="30" atv:refpx="26.765" stroke-width="1" x="-137.555" y="17.765" rx="3.5"/>
 <rect id="id_31" ry="2.5" width="125" transform="matrix(0,-1,1,0,0,0)" fill="#FFFFFF" stroke="none" atv:refpy="68.555" height="25" atv:refpx="26.632" stroke-width="1" x="-135.055" y="20.132" rx="2.5"/>
 <rect id="bar" width="122" transform="matrix(0,-1,1,0,0,0)" fill="$BARCOLOR$" stroke="none" atv:refpy="132.555" height="22.482" atv:refpx="32.506" stroke-width="1" x="-133.555" y="21.265"/>
 <text id="id_3" font-size="$FONTSIZEUNIT$" fill="$FONTCOLOR$" atv:refpy="174.124" atv:refpx="31.492" font-family="$FONTFAMILY$" x="31.492" y="177.624" text-anchor="middle">$U$</text>
 <text id="slider_value" font-size="$FONTSIZEVALUE$" fill="$FONTCOLOR$" atv:refpy="162.624" atv:refpx="31.492" font-family="$FONTFAMILY$" x="31.492" y="167.124" text-anchor="middle">0</text>
 <g id="slider_pointer" transform="matrix(0,-0.407,0.407,0,29.4505,155.9392)" atv:refpy="-767.151" atv:refpx="-264.065">
  <polygon id="id_442" fill="$BORDERCOLOR$" atv:refpy="52.672" points="43.504,61 54.999,53.391 66.494,61" atv:refpx="366.526" stroke-width="1"/>
  <path id="id_443" d="M29.999,83.194C29.999,69.409 41.214,58.194 54.999,58.194C68.784,58.194 79.999,69.409 79.999,83.194C79.999,96.979 68.784,108.194 54.999,108.194C41.214,108.194 29.999,96.98 29.999,83.194" fill="$BORDERCOLOR$" atv:refpy="854.195" atv:refpx="253.728" stroke-width="1"/>
  <g id="id_683" transform="matrix(1,0,0,1,-314.132,-846.264)" atv:refpy="52.5" atv:refpx="55">
   <polygon id="id_444" fill="#FFFFFF" atv:refpy="77.764" points="365.132,906.264 369.132,891.264 373.132,906.264" atv:refpx="87.148"/>
  </g>
  <g id="id_684" transform="matrix(1,0,0,1,-314.132,-846.264)" atv:refpy="52.5" atv:refpx="55">
   <polygon id="id_445" fill="$SYMBOLCOLOR$" atv:refpy="898.764" points="367.132,906.264 369.132,891.264 371.132,906.264 &#x9;&#x9;&#x9;&#x9;" atv:refpx="369.132"/>
  </g>
  <path id="id_446" d="M30.999,83.194C30.999,69.96 41.766,59.194 54.999,59.194C68.232,59.194 78.999,69.96 78.999,83.194C78.999,96.426 68.232,107.194 54.999,107.194C41.766,107.194 30.999,96.427 30.999,83.194" fill="$FILLCOLOR$" atv:refpy="854.195" atv:refpx="253.728" stroke-width="1"/>
  <line id="id_447" y1="73.195" fill="none" stroke="$SYMBOLCOLOR$" atv:refpy="854.195" stroke-miterlimit="10" y2="93.195" atv:refpx="254.228" stroke-width="0.5" x1="55" stroke-linejoin="round" x2="55"/>
  <line id="id_448" y1="75.195" fill="none" stroke="$SYMBOLCOLOR$" atv:refpy="854.195" stroke-miterlimit="10" y2="91.195" atv:refpx="258.228" stroke-width="0.5" x1="59" stroke-linejoin="round" x2="59"/>
  <line id="id_449" y1="79.195" fill="none" stroke="$SYMBOLCOLOR$" atv:refpy="854.195" stroke-miterlimit="10" y2="87.195" atv:refpx="262.228" stroke-width="0.5" x1="63" stroke-linejoin="round" x2="63"/>
  <line id="id_450" y1="91.195" fill="none" stroke="$SYMBOLCOLOR$" atv:refpy="854.195" stroke-miterlimit="10" y2="75.195" atv:refpx="250.228" stroke-width="0.5" x1="51" stroke-linejoin="round" x2="51"/>
  <line id="id_451" y1="87.195" fill="none" stroke="$SYMBOLCOLOR$" atv:refpy="854.195" stroke-miterlimit="10" y2="79.195" atv:refpx="246.228" stroke-width="0.5" x1="47" stroke-linejoin="round" x2="47"/>
 </g>
 <rect id="barControl" opacity="0.01" width="25.118" fill="" stroke="none" atv:refpy="458.73" height="123.7" atv:refpx="83.789" stroke-width="1" x="49.6" y="10"/>
 <svg id="id_7" width="40" transform="matrix(1,0,0,1.206,0,0)" atv:refpy="71.555" height="102" atv:refpx="31.765" x="11.765" y="9.161" xlink:href="$SCALE$">
  <atv:argument prefix="scaleColor" value="" name="scaleColor"/>
  <atv:argument prefix="smallScaleColor" value="" name="scaleColorSmall"/>
 </svg>
 <path id="limit_low" d="M12.265,133.554L17.265,133.554L14.765,136.054Z" fill="$LIMITLOWFILL$" stroke="none" atv:refpy="134.806" atv:refpx="14.765" stroke-width="0.5"/>
 <path id="limit_low_low" d="M12.265,133.554L17.265,133.554L14.765,136.054Z" fill="$LIMITLOWLOWFILL$" stroke="none" atv:refpy="134.806" atv:refpx="14.765" stroke-width="0.5"/>
 <path id="limit_high" d="M12.265,133.554L17.265,133.554L14.765,131.054Z" fill="$LIMITHIGHFILL$" stroke="none" atv:refpy="131.305" atv:refpx="14.765" stroke-width="0.5"/>
 <path id="limit_high_high" d="M12.265,133.554L17.265,133.554L14.765,131.054Z" fill="$LIMITHIGHHIGHFILL$" stroke="none" atv:refpy="132.305" atv:refpx="14.765" stroke-width="0.5"/>
 <rect id="blinking_frame" ry="2.001" width="127.131" transform="matrix(0,-1,1,0,0,0)" fill="none" stroke="none" atv:refpy="68.889" height="27.149" atv:refpx="26.271" stroke-width="2" x="-136.153" y="19.1" rx="1.996"/>
 <text id="min" font-size="9" fill="$SMALLSCALECOLOR$" atv:refpy="139.97" atv:refpx="15.01" font-family="$FONTFAMILY$" x="17.01" y="142.97" text-anchor="end">$MIN$</text>
 <text id="max" font-size="9" fill="$SMALLSCALECOLOR$" atv:refpy="6" atv:refpx="11.141" font-family="$FONTFAMILY$" x="17.141" y="9" text-anchor="end">$MAX$</text>
 <rect id="activeIndicator" width="1" fill="none" stroke="none" atv:refpy="0.5" height="1" stroke-width="2" atv:refpx="0.5" x="0" y="0"/>
 <script type="text/ecmascript"><![CDATA[

var AggregateManager = webMI.callExtension("SYSTEM.LIBRARY.ATVISE.QUICKDYNAMICS.Aggregate Manager");
 webMI.addOnunload(function unloadAggregateManager() {
	AggregateManager.destroy();
	AggregateManager = null;
});

var base = (webMI.query["base"] == undefined) ? "" : webMI.query["base"];
var decimalPositions = webMI.query["decimalPositions"];
var min = (webMI.query["min"] == undefined) ? "" : parseFloat(webMI.query["min"]);
var max = (webMI.query["max"] == undefined) ? "" : parseFloat(webMI.query["max"]);
var nodeMin = (webMI.query["nodeMin"] == undefined) ? "" : webMI.query["nodeMin"];
var nodeMax = (webMI.query["nodeMax"] == undefined) ? "" : webMI.query["nodeMax"];
var nodeLowLow = (webMI.query["nodeLowLow"] == undefined ? "" : webMI.query["nodeLowLow"]);
var nodeLow = (webMI.query["nodeLow"] == undefined) ? "" : webMI.query["nodeLow"];
var nodeHigh = (webMI.query["nodeHigh"] == undefined) ? "" : webMI.query["nodeHigh"];
var nodeHighHigh = (webMI.query["nodeHighHigh"] == undefined) ? "" : webMI.query["nodeHighHigh"];
var fontColor=webMI.query["fontColor"];
var barColor=webMI.query["barColor"];
var barColorInactive = webMI.query["barColorInactive"];
var barColorNotEditable = webMI.query["barColorNotEditable"];
var barColorLimitsOn = webMI.query["barColorLimitsOn"];
var limitlowlowfill=webMI.query["limitLowLowFill"];
var limitlowfill=webMI.query["limitLowFill"];
var limithighfill=webMI.query["limitHighFill"];
var limithighhighfill=webMI.query["limitHighHighFill"];
var scaleColor = webMI.query["scaleColor"];
var alarmToSubscribe = webMI.query["alarm"];
var alarmIndication = webMI.query["alarmIndication"];
var statusEnabled = webMI.query["statusEnabled"];
var statusTrigger = webMI.query["statusTrigger"];
var statusIndication = webMI.query["statusIndication"];
var activeIndicators = {};

var limitlowlow = (webMI.query["limitLowLow"] == undefined) ? "" : webMI.query["limitLowLow"];
if (limitlowlow != "") {
	limitlowlow = (limitlowlow != "off") ? parseFloat(limitlowlow) : "";
}
var limitlow = (webMI.query["limitLow"] == undefined) ? "" : webMI.query["limitLow"];
if (limitlow != "") {
	limitlow = (limitlow != "off") ? parseFloat(limitlow) : "";
}
var limithigh = (webMI.query["limitHigh"] == undefined) ? "" : webMI.query["limitHigh"];
if (limithigh != "") {
	limithigh = (limithigh != "off") ? parseFloat(limithigh) : "";
}
var limithighhigh = (webMI.query["limitHighHigh"] == undefined) ? "" : webMI.query["limitHighHigh"];
if (limithighhigh != "") {
	limithighhigh = (limithighhigh != "off") ? parseFloat(limithighhigh) : "";
}


var nodes=new Array(0,0,0,0,0,0,0); //array for base, min, max, limitLowLow, limitLow, LimitHigh, LimitHighhigh
var nodesToSubscribe= new Array();
var i=0;
// set array to remember which nodes are specified
if (nodeMin != "") {
	nodes[0] = 1;
	nodesToSubscribe[i]=nodeMin;
	i++;
}
if (nodeMax != "") {
	nodes[1] = 1;
	nodesToSubscribe[i]=nodeMax;
	i++;
}
if (nodeLowLow != "") {
	nodes[2] = 1;
	nodesToSubscribe[i]=nodeLowLow;
	i++;
}
if (nodeLow != "") {
	nodes[3] = 1;
	nodesToSubscribe[i]=nodeLow;
	i++;
}
if (nodeHigh != "") {
	nodes[4] = 1;
	nodesToSubscribe[i]=nodeHigh;
	i++;
}
if (nodeHighHigh != "") {
	nodes[5] = 1;
	nodesToSubscribe[i]=nodeHighHigh;
	i++;
}


if (base != "")  {
	AggregateManager.subscribeNodeOrAggregate(base, manageNodeResult, manageAggregateResult);

	function manageAggregateResult(subscribeResult){
		if(nodesToSubscribe.length > 0) {
			webMI.data.subscribeBlock(nodesToSubscribe,[], function(subscribeBlockResult){
				subscribeBlockResult["data"] = subscribeResult;
				manageSubcription(subscribeBlockResult);
			});
		} else {
			subscribeResult["data"] = subscribeResult;
			manageSubcription(subscribeResult);
		}
	}

	function manageNodeResult(subscribeResult){
		if(nodesToSubscribe.length > 0) {
			webMI.data.subscribeBlock(nodesToSubscribe,[], function(e2){
				e2["data"] = subscribeResult;
				manageSubcription(e2);
			});
		} else {
			subscribeResult["data"] = subscribeResult;
			manageSubcription(subscribeResult);
		}
	}


	function manageSubcription(e) {
		i=0;
		if (nodes[0] == 1) { // if node for minimum is specified, set node value as minimum
			min = parseFloat(e[i].value);
			i++;
		}
		webMI.gfx.setText("min", min);
		if (nodes[1] == 1) { // if node for maximum is specified, set node value as maximum
			max = parseFloat(e[i].value);
			i++;
		}
		webMI.gfx.setText("max", max);
		if (nodes[2] == 1) { // if node for limit LowLow is specified, set node value as limit LowLow else value from display parameter is taken
			limitlowlow = parseFloat(e[i].value);
			i++;
		}
		if (nodes[3] == 1) { // if node for limit Low is specified, set node value as limit Low else value from display parameter is taken
			limitlow = parseFloat(e[i].value);
			i++;
		}
		if (nodes[4] == 1) { // if node for limit High is specified, set node value as limit High else value from display parameter taken
			limithigh = parseFloat(e[i].value);
			i++;
		}
		if (nodes[5] == 1) { // if node for limit HighHigh is specified, set node value as limit HighHigh else value from display parameter taken
			limithighhigh = parseFloat(e[i].value);
			i++;
		}

		if (String(limitlowlow) == "" || (String(min) != "" && limitlowlow < min) || (String(max) != "" && limitlowlow > max)) {
			webMI.gfx.setVisible("limit_low_low", false);
		} else {
			webMI.gfx.setMoveY("limit_low_low", webMI.translate(limitlowlow, min, max, 0, -122));
			webMI.gfx.setVisible("limit_low_low", null);
		}
		if (String(limitlow) == "" || (String(min) != "" && limitlow < min) || (String(max) != "" && limitlow > max)) {
			webMI.gfx.setVisible("limit_low", false);
		} else {
			webMI.gfx.setMoveY("limit_low", webMI.translate(limitlow, min, max, 0, -122));
			webMI.gfx.setVisible("limit_low", null);
		}
		if (String(limithigh) == "" || (String(min) != "" && limithigh < min) || (String(max) != "" && limithigh > max)) {
			webMI.gfx.setVisible("limit_high", false);
		} else {
			webMI.gfx.setMoveY("limit_high", webMI.translate(limithigh, min, max, 0, -122));
			webMI.gfx.setVisible("limit_high", null);
		}
		if (String(limithighhigh) == "" || (String(min) != "" && limithighhigh < min) || (String(max) != "" && limithighhigh > max)) {
			webMI.gfx.setVisible("limit_high_high", false);
		} else {
			webMI.gfx.setMoveY("limit_high_high", webMI.translate(limithighhigh, min, max, 0, -122));
			webMI.gfx.setVisible("limit_high_high", null);
		}

		if(typeof e["data"].value != "undefined"){
			var value = e["data"].value;
            decimalPositions = parseFloat(decimalPositions);
            var formatString = "%0." + decimalPositions + "f";
            value = webMI.sprintf(formatString, value);
            webMI.gfx.setText("slider_value", value);

			value = e["data"].value;
            var sliderValue=value;
            if (String(min) != "" && String(max) != "") {
                if (min > value) {
                    sliderValue = min;
                }
                if (value > max) {
                    sliderValue = max;
                }
            }
            webMI.gfx.setMoveY("slider_pointer", webMI.translate(sliderValue, min, max, 0, -122));
            webMI.gfx.setScaleY("bar", webMI.translate(sliderValue, min, max, 0, 1));
            webMI.gfx.setFill("slider_value",fontColor);
		}

		if (String(limitlow) != "" || String(limitlowlow) != "" || String(limithigh) != "" || String(limithighhigh) != "") webMI.gfx.setFill("bar", barColorLimitsOn);
		else webMI.gfx.setFill("bar" ,barColor);

		if (String(limitlow) != "" && value <= limitlow) {
			webMI.gfx.setFill("slider_value",limitlowfill);
			webMI.gfx.setFill("bar",limitlowfill);
		}
		if (String(limitlowlow) != "" && value <= limitlowlow) {
			webMI.gfx.setFill("slider_value",limitlowlowfill);
			webMI.gfx.setFill("bar",limitlowlowfill);
		}
		if (String(limithigh) != "" && value >= limithigh) {
			webMI.gfx.setFill("slider_value",limithighfill);
			webMI.gfx.setFill("bar",limithighfill);
		}
		if (String(limithighhigh) != "" && value >= limithighhigh) {
			webMI.gfx.setFill("slider_value",limithighhighfill);
			webMI.gfx.setFill("bar",limithighhighfill);
		}
		if (typeof e["data"].status != "undefined")
			handleStatus(e["data"].status);
	}
}

function handleStatus(status) {
	if (statusEnabled != "Yes")
		return;

	if (statusTrigger != "") {
		webMI.trigger.fire(statusTrigger, status);
	} else {
		if (typeof statusIndication["ItemStatusBad"] == "undefined")
			statusIndication = {"ItemStatusBad": {color: "#ffff00", interval: "250"}};

		if (status == 0 || (status & 0xC0000000).toString(16) == 0)	//Good value state
			delete activeIndicators["status"];
		else if ((status & 0x80000000).toString(16) != 0)			//Bad value state
			activeIndicators["status"] = {color: statusIndication["ItemStatusBad"].color, interval: parseInt(statusIndication["ItemStatusBad"].interval)};
		else if ((status & 0xC0000000).toString(16) == 40000000)	//Uncertain value state
			activeIndicators["status"] = {color: statusIndication["ItemStatusBad"].color, interval: parseInt(statusIndication["ItemStatusBad"].interval)};
		else														//Unknown value state
			activeIndicators["status"] = {color: statusIndication["ItemStatusBad"].color, interval: parseInt(statusIndication["ItemStatusBad"].interval)};

		setIndicator();
	}
}

function initAlarm(address) {
	if (alarmIndication == "")
		alarmIndication = {};

	if (typeof alarmIndication["AlarmStatusOnUnacknowledged"] == "undefined")
		alarmIndication["AlarmStatusOnUnacknowledged"] = {color: "#ff0000", interval: "250"};

	if (typeof alarmIndication["AlarmStatusOnAcknowledged"] == "undefined")
		alarmIndication["AlarmStatusOnAcknowledged"] = {color: "#ff0000", interval: "500"};

	if (typeof alarmIndication["AlarmStatusOffUnacknowledged"] == "undefined")
		alarmIndication["AlarmStatusOffUnacknowledged"] = {color: "#ff0000", interval: "750"};

	if (typeof alarmIndication["AlarmStatusOnOffUnacknowledged"] == "undefined")
		alarmIndication["AlarmStatusOnOffUnacknowledged"] = {color: "#ff0000", interval: "1500"};

	webMI.alarm.subscribe(address, function(e) {
		if (e.state == 1)
			activeIndicators["alarm"] = {color: alarmIndication["AlarmStatusOnUnacknowledged"].color, interval: parseInt(alarmIndication["AlarmStatusOnUnacknowledged"].interval)};
		else if (e.state == 2)
			activeIndicators["alarm"] = {color: alarmIndication["AlarmStatusOnAcknowledged"].color, interval: parseInt(alarmIndication["AlarmStatusOnAcknowledged"].interval)};
		else if (e.state == 3)
			activeIndicators["alarm"] = {color: alarmIndication["AlarmStatusOffUnacknowledged"].color, interval: parseInt(alarmIndication["AlarmStatusOffUnacknowledged"].interval)};
		else if (e.state == 5)
			activeIndicators["alarm"] = {color: alarmIndication["AlarmStatusOnOffUnacknowledged"].color, interval: parseInt(alarmIndication["AlarmStatusOnOffUnacknowledged"].interval)};
		else
			delete activeIndicators["alarm"];

		setIndicator();
	});
}

if (alarmToSubscribe != "")
	initAlarm(alarmToSubscribe);

var currentIndicator = "";
function setIndicator() {
	if (currentIndicator != "")
		return;

	if (activeIndicators["trigger"]) {
		currentIndicator = "trigger";
	} else if (activeIndicators["status"]) {
		currentIndicator = "status";
	} else if (activeIndicators["alarm"]) {
		currentIndicator = "alarm";
	} else {
		currentIndicator = "";
		return;
	}

	indicationActive = true;

	webMI.gfx.setStroke("blinking_frame", activeIndicators[currentIndicator].color);
	webMI.gfx.setVisible("blinking_frame", null);

	var interval = activeIndicators[currentIndicator].interval;
	setTimeout(function() {
		webMI.gfx.setVisible("blinking_frame", false);
		setTimeout(function() {
			currentIndicator = "";
			setIndicator();
		}, interval);
	}, interval);
}

webMI.trigger.connect("com.atvise.setBlinking", function(e){
	if (e.value == "none"){
		delete activeIndicators["trigger"];
	} else {
		activeIndicators["trigger"] = {color: e.value, interval: 500};
	}	
	setIndicator();
});

var right = (webMI.query["right"] == undefined) ? "" : webMI.query["right"];
if (right.search(/SYSTEM\.SECURITY\.RIGHTS\./) != -1) {
	right = right.substring(23,right.length); //remove "prefix" SYSTEM.SECURITY.RIGHTS.
}

var active = false;
var hasRight = false;

if (right != "") {
	webMI.addEvent(webMI.data, "clientvariableschange", function(e) {
		hasRight=false;
		if (("username" in e) && (e.username != "")) {
				hasRight = webMI.hasRight(right);
		}
		deActivate();
	});
}

var activeValue = (webMI.query["activeValue"] == undefined) ? "" :webMI.query["activeValue"];
var activeNode = (webMI.query["activeNode"] == undefined) ? "" : webMI.query["activeNode"];
var nodeIsActive = false;

if ((activeNode != "") && (String(activeValue) != "")) {
	webMI.data.subscribe(activeNode, function(e) {
		var nodeActiveValue = e.value;
		if (typeof nodeActiveValue == "boolean") {
			nodeIsActive = (String(nodeActiveValue) == activeValue);
		} else if (typeof nodeActiveValue == "number") {
			try {
				var temp = parseFloat(activeValue);
				nodeIsActive = (nodeActiveValue == temp);
			} catch(e) {
				nodeIsActive = false;
			}
		} else {
			nodeIsActive = (nodeActiveValue == activeValue);
		}
		if (typeof e.status != "undefined")
			handleStatus(e.status);
		deActivate();
	});
} else {
	deActivate();
}

function deActivate() {
	if (right != "") {
		if ((String(activeValue) != "") && (activeNode != "")) {
			active=(nodeIsActive && hasRight);
		} else {
			active=hasRight;
		}
	} else {
		if ((String(activeValue) != "") && (activeNode != "")) {
			active=nodeIsActive;
		} else {
			active=true;
		}
	}
	if (webMI.query["editable"] == "No") {
		webMI.gfx.setFill("bar", barColorNotEditable);
		webMI.gfx.setX("activeIndicator", "0"); // Position eines Rectangle-Elements als Boolean zur dynamischen Verwendung im Quick Dynamic eingesetzt
	} else if (active) {
		webMI.gfx.setFill("bar", barColor);
		webMI.gfx.setX("activeIndicator", "1"); // Position eines Rectangle-Elements als Boolean zur dynamischen Verwendung im Quick Dynamic eingesetzt
	}
	if (!active) {
		webMI.gfx.setFill("bar", barColorInactive);
		webMI.gfx.setX("activeIndicator", "0"); // Position eines Rectangle-Elements als Boolean zur dynamischen Verwendung im Quick Dynamic eingesetzt
	}
}

webMI.callExtension("SYSTEM.LIBRARY.ATVISE.QUICKDYNAMICS.Set Slider Vertical", {
	"id": "barControl",
	"ele": document.getElementById("barControl"),
	"node": webMI.query.base,
	"min": min,
	"max": max,
	"decimalPositions": decimalPositions
});]]></script>
</svg>
