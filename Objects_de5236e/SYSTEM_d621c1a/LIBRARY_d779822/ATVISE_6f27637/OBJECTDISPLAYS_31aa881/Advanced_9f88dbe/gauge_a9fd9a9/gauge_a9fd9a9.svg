<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<svg version="1.2" xmlns:atv="http://webmi.atvise.com/2007/svgext" width="100" height="100" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
 <defs/>
 <desc>Displays value of an address as gauge.</desc>
 <title>Gauge</title>
 <metadata>
  <atv:parameter behavior="mandatory" desc="base" valuetype="address" name="base"/>
  <atv:parameter defaultvalue="" behavior="optional" desc="alarm address" valuetype="address" name="alarm"/>
  <atv:parameter config="Yes;No" defaultvalue="Yes" behavior="optional" desc="enable status monitoring" valuetype="enum" name="statusEnabled"/>
  <atv:parameter defaultvalue="" behavior="optional" desc="fire status trigger" valuetype="string" name="statusTrigger"/>
  <atv:parameter substitute="$LABEL$" defaultvalue="T{Label}" behavior="optional" desc="label" valuetype="trstring" name="label"/>
  <atv:parameter defaultvalue="0" behavior="mandatory" desc="minimum" valuetype="number" name="min"/>
  <atv:parameter defaultvalue="100" behavior="mandatory" desc="maximum" valuetype="number" name="max"/>
  <atv:parameter config="Times New Roman=Times New Roman,Bodoni,Garamond,Minion Web,ITC Stone Serif,MS Georgia,Bitstream Cyberbit,serif;Arial=MS Trebuchet,ITC Avant Garde Gothic,MS Arial,MS Verdana,Univers,Futura,ITC Stone Sans,Gill Sans,Akzidenz Grotesk,Helvetica,sans-serif;Courier=Courier,MS Courier New,Prestige,Everson Mono,monospace;Zapf-Chancery=Caflisch Script,Adobe Poetica,Sanvito,Ex Ponto,Snell Roundhand,Zapf-Chancery,cursive;Alpha Geometrique=Alpha Geometrique,Critter,Cottonwood,FB Reactor,Studz,fantasy" substitute="$FONTFAMILY$" defaultvalue="Arial" behavior="optional" desc="family" group="Font" valuetype="enum" name="fontFamily"/>
  <atv:parameter substitute="$FONTCOLOR$" defaultvalue="SYSTEM.GLOBALS.atvFontColor" behavior="optional" desc="color" group="Font" valuetype="global" name="fontColor"/>
  <atv:parameter config="6;7;8;9;10;11;12;14;16;18;20;22;24;26;28;36;48;72" substitute="$FONTSIZEVALUE$" defaultvalue="10" behavior="optional" desc="size for value" group="Font" valuetype="enum" name="fontSizeValue"/>
  <atv:parameter config="6;7;8;9;10;11;12;14;16;18;20;22;24;26;28;36;48;72" substitute="$FONTSIZELABELS$" defaultvalue="10" behavior="optional" desc="size for label" group="Font" valuetype="enum" name="fontSizeLabels"/>
  <atv:parameter defaultvalue="0" behavior="optional" desc="post decimal positions" group="Appearance" valuetype="number" name="decimalPositions"/>
  <atv:parameter substitute="$POINTERCOLOR$" defaultvalue="SYSTEM.GLOBALS.atvAccent1" behavior="optional" desc="pointer color" group="Appearance" valuetype="global" name="pointerColor"/>
  <atv:parameter defaultvalue="#00FF00" behavior="optional" desc="pointer color limits on" group="Appearance" valuetype="color" name="pointerColorLimitsOn"/>
  <atv:parameter defaultvalue="off" behavior="optional" desc="limit low low (off=no limit)" group="Appearance" valuetype="string" name="limitLowLow"/>
  <atv:parameter defaultvalue="off" behavior="optional" desc="limit low (off=no limit)" group="Appearance" valuetype="string" name="limitLow"/>
  <atv:parameter defaultvalue="off" behavior="optional" desc="limit high (off=no limit)" group="Appearance" valuetype="string" name="limitHigh"/>
  <atv:parameter defaultvalue="off" behavior="optional" desc="limit high high (off=no limit)" group="Appearance" valuetype="string" name="limitHighHigh"/>
  <atv:parameter substitute="$LIMITLOWLOWFILL$" defaultvalue="#ff0000" behavior="optional" desc="limit low low color" group="Appearance" valuetype="color" name="limitLowLowFill"/>
  <atv:parameter substitute="$LIMITLOWFILL$" defaultvalue="#F9B233" behavior="optional" desc="limit low color" group="Appearance" valuetype="color" name="limitLowFill"/>
  <atv:parameter substitute="$LIMITHIGHFILL$" defaultvalue="#F9B233" behavior="optional" desc="limit high color" group="Appearance" valuetype="color" name="limitHighFill"/>
  <atv:parameter substitute="$LIMITHIGHHIGHFILL$" defaultvalue="#ff0000" behavior="optional" desc="limit high high color" group="Appearance" valuetype="color" name="limitHighHighFill"/>
  <atv:parameter config="SYSTEM.LIBRARY.ATVISE.OBJECTDISPLAYS.Symbols.scales" substitute="$SCALE$" defaultvalue="SYSTEM.LIBRARY.ATVISE.OBJECTDISPLAYS.Symbols.scales.scale_60_gauge" behavior="optional" desc="displayed scale" group="Appearance" valuetype="display" name="scale"/>
  <atv:parameter defaultvalue="#D7D7D7" behavior="optional" desc="scale color" group="Appearance" valuetype="color" name="scaleColor"/>
  <atv:parameter substitute="$FILLCOLOR$" defaultvalue="#FFFFFF" behavior="optional" desc="fill color" group="Appearance" valuetype="color" name="fill"/>
  <atv:parameter substitute="$GAUGEFILL$" defaultvalue="SYSTEM.GLOBALS.atvFillColor" behavior="optional" desc="gauge fill color" group="Appearance" valuetype="global" name="gaugeFill"/>
  <atv:parameter substitute="$BORDERCOLOR$" defaultvalue="SYSTEM.GLOBALS.atvBorderColor" behavior="optional" desc="border color" group="Appearance" valuetype="global" name="borderColor"/>
  <atv:parameter defaultvalue="SYSTEM.GLOBALS.atvStatusIndication" behavior="optional" desc="status indication" group="Appearance" valuetype="global" name="statusIndication"/>
  <atv:parameter defaultvalue="SYSTEM.GLOBALS.atvAlarmIndication" behavior="optional" desc="alarm indication" group="Appearance" valuetype="global" name="alarmIndication"/>
  <atv:parameter behavior="optional" desc="address for minimum" group="Options" valuetype="address" name="nodeMin"/>
  <atv:parameter behavior="optional" desc="address for maximum" group="Options" valuetype="address" name="nodeMax"/>
  <atv:parameter behavior="optional" desc="address for limit low low" group="Options" valuetype="address" name="nodeLowLow"/>
  <atv:parameter behavior="optional" desc="address for limit low" group="Options" valuetype="address" name="nodeLow"/>
  <atv:parameter behavior="optional" desc="address for limit high" group="Options" valuetype="address" name="nodeHigh"/>
  <atv:parameter behavior="optional" desc="address for limit high high" group="Options" valuetype="address" name="nodeHighHigh"/>
  <atv:gridconfig width="10" enabled="true" height="10" gridstyle="lines"/>
  <atv:snapconfig width="2" enabled="true" height="2"/>
 </metadata>
 <path id="id_2" d="M25.003,83.416L75.003,83.416C91.484,72.404 98.819,51.905 93.065,32.937C87.312,13.969 69.824,1 50.003,1C30.182,1 12.694,13.969 6.941,32.937C1.186,51.905 8.522,72.404 25.003,83.416" fill="$GAUGEFILL$" stroke="$BORDERCOLOR$" atv:refpy="42.208" atv:refpx="50.003" stroke-width="1"/>
 <path id="blinking_frame" d="M25.616,82.451L74.459,82.451C90.559,71.702 97.724,51.691 92.103,33.175C86.483,14.659 69.4,2 50.037,2C30.675,2 13.592,14.659 7.972,33.175C2.35,51.691 9.516,71.702 25.616,82.451" fill="none" stroke="none" atv:refpy="42.226" atv:refpx="50.038" stroke-width="1"/>
 <text id="id_157" font-size="$FONTSIZELABELS$" fill="$FONTCOLOR$" atv:refpy="91.5" atv:refpx="49" font-family="$FONTFAMILY$" x="49" y="95" text-anchor="middle">$LABEL$</text>
 <path id="id_3" d="M31.59,80.3L73.675,80.3C88.947,70.582 95.659,51.448 90.223,33.793C84.787,16.14 68.474,4.094 50.002,4.094C31.529,4.093 15.217,16.14 9.781,33.793C4.345,51.448 11.056,70.582 26.33,80.3" fill="$FILLCOLOR$" atv:refpy="42.534" atv:refpx="50.003"/>
 <svg id="scale" width="88" transform="matrix(0.875,0,0,0.875,0,0)" atv:refpy="45.938" height="88" atv:refpx="50" x="13.143" y="8.5" xlink:href="$SCALE$">
  <atv:argument prefix="scaleColor" value="" name="scaleColor"/>
 </svg>
 <path id="limit_low" d="M46.8,9.799L50,6.599L50,13Z" fill="$LIMITLOWFILL$" stroke="none" atv:refpy="46.019" atv:refpx="50" stroke-width="0"/>
 <path id="limit_low_low" d="M46.8,9.799L50,6.599L50,13Z" fill="$LIMITLOWLOWFILL$" stroke="none" atv:refpy="46.019" atv:refpx="50" stroke-width="0"/>
 <path id="limit_high" d="M53.2,9.799L50,6.599L50,13Z" fill="$LIMITHIGHFILL$" stroke="none" atv:refpy="46.019" atv:refpx="50" stroke-width="0"/>
 <path id="limit_high_high" d="M53.2,9.799L50,6.599L50,13Z" fill="$LIMITHIGHHIGHFILL$" stroke="none" atv:refpy="46.019" atv:refpx="50" stroke-width="0"/>
 <g id="gauge_pointer" atv:refpy="46.019" atv:refpx="50">
  <polyline id="gauge_pointer_col" fill="$POINTERCOLOR$" stroke="none" atv:refpy="29" points="46,44 50,14 54,44" atv:refpx="49.765" stroke-width="0.5"/>
  <circle id="id_7" cx="50" r="5" fill="$FILLCOLOR$" stroke="$FILLCOLOR$" atv:refpy="46.251" atv:refpx="49.75" stroke-width="0.5" cy="46.251"/>
  <polyline id="id_10" fill="$FILLCOLOR$" stroke="none" atv:refpy="27" points="49.5,42 50,32 50.5,42" atv:refpx="53.5" stroke-width="0.5"/>
  <circle id="id_4" cx="50" r="4.5" fill="$GAUGEFILL$" stroke="#D7D7D7" atv:refpy="46.251" atv:refpx="49.75" stroke-width="0.5" cy="46.251"/>
 </g>
 <text id="gauge_value" font-size="$FONTSIZEVALUE$" fill="$FONTCOLOR$" atv:refpy="72.5" atv:refpx="50" font-family="$FONTFAMILY$" x="50" y="76" text-anchor="middle">0</text>
 <script type="text/ecmascript"><![CDATA[var AggregateManager = webMI.callExtension("SYSTEM.LIBRARY.ATVISE.QUICKDYNAMICS.Aggregate Manager");
 webMI.addOnunload(function unloadAggregateManager() {
	AggregateManager.destroy();
	AggregateManager = null;
});

var base = (webMI.query["base"] == undefined) ? "" : webMI.query["base"];
var decimalPositions = webMI.query["decimalPositions"];
var min = (webMI.query["min"] == undefined) ? "" : parseFloat(webMI.query["min"]);
var max = (webMI.query["max"] == undefined) ? "" : parseFloat(webMI.query["max"]);
var nodeMin = (webMI.query["nodeMin"] == undefined) ? "" : webMI.query["nodeMin"];
var nodeMax = (webMI.query["nodeMax"] == undefined) ? "" : webMI.query["nodeMax"];
var nodeLowLow = (webMI.query["nodeLowLow"] == undefined ? "" : webMI.query["nodeLowLow"]);
var nodeLow = (webMI.query["nodeLow"] == undefined) ? "" : webMI.query["nodeLow"];
var nodeHigh = (webMI.query["nodeHigh"] == undefined) ? "" : webMI.query["nodeHigh"];
var nodeHighHigh = (webMI.query["nodeHighHigh"] == undefined) ? "" : webMI.query["nodeHighHigh"];
var pointerColor=webMI.query["pointerColor"];
var pointerColorLimitsOn = webMI.query["pointerColorLimitsOn"];
var limitlowlowfill=webMI.query["limitLowLowFill"];
var limitlowfill=webMI.query["limitLowFill"];
var limithighfill=webMI.query["limitHighFill"];
var limithighhighfill=webMI.query["limitHighHighFill"];
var fontColor=webMI.query["fontColor"];
var scaleColor = webMI.query["scaleColor"];
var alarmToSubscribe = webMI.query["alarm"];
var alarmIndication = webMI.query["alarmIndication"];
var statusEnabled = webMI.query["statusEnabled"];
var statusTrigger = webMI.query["statusTrigger"];
var statusIndication = webMI.query["statusIndication"];
var activeIndicators = {};

var limitlowlow = (webMI.query["limitLowLow"] == undefined) ? "" : webMI.query["limitLowLow"];
if (limitlowlow != "") {
	limitlowlow = (limitlowlow != "off") ? parseFloat(limitlowlow) : "";
}
var limitlow = (webMI.query["limitLow"] == undefined) ? "" : webMI.query["limitLow"];
if (limitlow != "") {
	limitlow = (limitlow != "off") ? parseFloat(limitlow) : "";
}
var limithigh = (webMI.query["limitHigh"] == undefined) ? "" : webMI.query["limitHigh"];
if (limithigh != "") {
	limithigh = (limithigh != "off") ? parseFloat(limithigh) : "";
}
var limithighhigh = (webMI.query["limitHighHigh"] == undefined) ? "" : webMI.query["limitHighHigh"];
if (limithighhigh != "") {
	limithighhigh = (limithighhigh != "off") ? parseFloat(limithighhigh) : "";
}

var nodes=new Array(0,0,0,0,0,0,0); //array for base, min, max, limitLowLow, limitLow, LimitHigh, LimitHighhigh
var nodesToSubscribe= new Array();
var i=0;
// set array to remember which nodes are specified
if (nodeMin != "") {
	nodes[0] = 1;
	nodesToSubscribe[i]=nodeMin;
	i++;
}
if (nodeMax != "") {
	nodes[1] = 1;
	nodesToSubscribe[i]=nodeMax;
	i++;
}
if (nodeLowLow != "") {
	nodes[2] = 1;
	nodesToSubscribe[i]=nodeLowLow;
	i++;
}
if (nodeLow != "") {
	nodes[3] = 1;
	nodesToSubscribe[i]=nodeLow;
	i++;
}
if (nodeHigh != "") {
	nodes[4] = 1;
	nodesToSubscribe[i]=nodeHigh;
	i++;
}
if (nodeHighHigh != "") {
	nodes[5] = 1;
	nodesToSubscribe[i]=nodeHighHigh;
	i++;
}

if (base != "") { // base is specified

	AggregateManager.subscribeNodeOrAggregate(base, manageNodeResult, manageAggregateResult);

	function manageAggregateResult(subscribeResult){
		if(nodesToSubscribe.length > 0) {
			webMI.data.subscribeBlock(nodesToSubscribe,[], function(subscribeBlockResult){
				subscribeBlockResult["data"] = subscribeResult;
				manageSubcription(subscribeBlockResult);
			});
		} else {
			subscribeResult["data"] = subscribeResult;
			manageSubcription(subscribeResult);
		}
	}

	function manageNodeResult(subscribeResult){
		if(nodesToSubscribe.length > 0) {
			webMI.data.subscribeBlock(nodesToSubscribe,[], function(e2){
				e2["data"] = subscribeResult;
				manageSubcription(e2);
			});
		} else {
			subscribeResult["data"] = subscribeResult;
			manageSubcription(subscribeResult);
		}
	}

	function manageSubcription(e) {
		i=0;

		if (nodes[0] == 1) { // if node for minimum is specified, set node value as minimum
			min = parseFloat(e[i].value);
			i++;
		}
		webMI.gfx.setText("min", min);
		if (nodes[1] == 1) { // if node for maximum is specified, set node value as maximum
			max = parseFloat(e[i].value);
			i++;
		}
		webMI.gfx.setText("max", max);
		if (nodes[2] == 1) { // if node for limit LowLow is specified, set node value as limit LowLow else value from display parameter is taken
			limitlowlow = parseFloat(e[i].value);
			i++;
		}
		if (nodes[3] == 1) { // if node for limit Low is specified, set node value as limit Low else value from display parameter is taken
			limitlow = parseFloat(e[i].value);
			i++;
		}
		if (nodes[4] == 1) { // if node for limit High is specified, set node value as limit High else value from display parameter taken
			limithigh = parseFloat(e[i].value);
			i++;
		}
		if (nodes[5] == 1) { // if node for limit HighHigh is specified, set node value as limit HighHigh else value from display parameter taken
			limithighhigh = parseFloat(e[i].value);
			i++;
		}

		if (String(limitlowlow) == "" || (String(min) != "" && limitlowlow < min) || (String(max) != "" && limitlowlow > max)) {
			webMI.gfx.setVisible("limit_low_low", false);
		} else {
			webMI.gfx.setRotation("limit_low_low", Math.round(webMI.translate(limitlowlow, min, max, -150, 150)));
			webMI.gfx.setVisible("limit_low_low", null);
		}
		if (String(limitlow) == "" || (String(min) != "" && limitlow < min) || (String(max) != "" && limitlow > max)) {
			webMI.gfx.setVisible("limit_low", false);
		} else {
			webMI.gfx.setRotation("limit_low", Math.round(webMI.translate(limitlow, min, max, -150, 150)));
			webMI.gfx.setVisible("limit_low", null);
		}
		if (String(limithigh) == "" || (String(min) != "" && limithigh < min) || (String(max) != "" && limithigh > max)) {
			webMI.gfx.setVisible("limit_high", false);
		} else {
			webMI.gfx.setRotation("limit_high", Math.round(webMI.translate(limithigh, min, max, -150, 150)));
			webMI.gfx.setVisible("limit_high", null);
		}
		if (String(limithighhigh) == "" || (String(min) != "" && limithighhigh < min) || (String(max) != "" && limithighhigh > max)) {
			webMI.gfx.setVisible("limit_high_high", false);
		} else {
			webMI.gfx.setRotation("limit_high_high", Math.round(webMI.translate(limithighhigh, min, max, -150, 150)));
			webMI.gfx.setVisible("limit_high_high", null);
		}

		if(e["data"].value) {
		   var value = e["data"].value;
		   decimalPositions = parseFloat(decimalPositions);
		   var formatString = "%0." + decimalPositions + "f";
		   value = webMI.sprintf(formatString, value);
		   webMI.gfx.setText("gauge_value", value);

		   var value = e["data"].value;
		   var gaugeValue=value;
		   if (String(min) != "" && String(max) != "") {
			   if (min > value) {
				   gaugeValue = min;
			   }
			   if (value > max) {
				   gaugeValue = max;
			   }
		   }
		   webMI.gfx.setRotation("gauge_pointer", Math.round(webMI.translate(gaugeValue, min, max, -150, 150)));
		   webMI.gfx.setFill("gauge_value",fontColor);
		}

		if (String(limitlow) != "" || String(limitlowlow) != "" || String(limithigh) != "" || String(limithighhigh) != "") webMI.gfx.setFill("gauge_pointer_col", pointerColorLimitsOn);
		else webMI.gfx.setFill("gauge_pointer_col" ,pointerColor);

		if (String(limitlow) != "" && value <= limitlow) {
			webMI.gfx.setFill("gauge_value",limitlowfill);
			webMI.gfx.setFill("gauge_pointer_col",limitlowfill);
		}
		if (String(limitlowlow) != "" && value <= limitlowlow) {
			webMI.gfx.setFill("gauge_value",limitlowlowfill);
			webMI.gfx.setFill("gauge_pointer_col",limitlowlowfill);
		}
		if (String(limithigh) != "" && value >= limithigh) {
			webMI.gfx.setFill("gauge_value",limithighfill);
			webMI.gfx.setFill("gauge_pointer_col",limithighfill);
		}
		if (String(limithighhigh) != "" && value >= limithighhigh) {
			webMI.gfx.setFill("gauge_value",limithighhighfill);
			webMI.gfx.setFill("gauge_pointer_col",limithighhighfill);
		}
		if (typeof e["data"].status != "undefined")
			handleStatus(e["data"].status);
	};
}


function handleStatus(status) {
	if (statusEnabled != "Yes")
		return;

	if (statusTrigger != "") {
		webMI.trigger.fire(statusTrigger, status);
	} else {
		if (typeof statusIndication["ItemStatusBad"] == "undefined")
			statusIndication = {"ItemStatusBad": {color: "#ffff00", interval: "250"}};

		if (status == 0 || (status & 0xC0000000).toString(16) == 0)	//Good value state
			delete activeIndicators["status"];
		else if ((status & 0x80000000).toString(16) != 0)			//Bad value state
			activeIndicators["status"] = {color: statusIndication["ItemStatusBad"].color, interval: parseInt(statusIndication["ItemStatusBad"].interval)};
		else if ((status & 0xC0000000).toString(16) == 40000000)	//Uncertain value state
			activeIndicators["status"] = {color: statusIndication["ItemStatusBad"].color, interval: parseInt(statusIndication["ItemStatusBad"].interval)};
		else														//Unknown value state
			activeIndicators["status"] = {color: statusIndication["ItemStatusBad"].color, interval: parseInt(statusIndication["ItemStatusBad"].interval)};

		setIndicator();
	}
}

function initAlarm(address) {
	if (alarmIndication == "")
		alarmIndication = {};

	if (typeof alarmIndication["AlarmStatusOnUnacknowledged"] == "undefined")
		alarmIndication["AlarmStatusOnUnacknowledged"] = {color: "#ff0000", interval: "250"};

	if (typeof alarmIndication["AlarmStatusOnAcknowledged"] == "undefined")
		alarmIndication["AlarmStatusOnAcknowledged"] = {color: "#ff0000", interval: "500"};

	if (typeof alarmIndication["AlarmStatusOffUnacknowledged"] == "undefined")
		alarmIndication["AlarmStatusOffUnacknowledged"] = {color: "#ff0000", interval: "750"};

	if (typeof alarmIndication["AlarmStatusOnOffUnacknowledged"] == "undefined")
		alarmIndication["AlarmStatusOnOffUnacknowledged"] = {color: "#ff0000", interval: "1500"};

	webMI.alarm.subscribe(address, function(e) {
		if (e.state == 1)
			activeIndicators["alarm"] = {color: alarmIndication["AlarmStatusOnUnacknowledged"].color, interval: parseInt(alarmIndication["AlarmStatusOnUnacknowledged"].interval)};
		else if (e.state == 2)
			activeIndicators["alarm"] = {color: alarmIndication["AlarmStatusOnAcknowledged"].color, interval: parseInt(alarmIndication["AlarmStatusOnAcknowledged"].interval)};
		else if (e.state == 3)
			activeIndicators["alarm"] = {color: alarmIndication["AlarmStatusOffUnacknowledged"].color, interval: parseInt(alarmIndication["AlarmStatusOffUnacknowledged"].interval)};
		else if (e.state == 5)
			activeIndicators["alarm"] = {color: alarmIndication["AlarmStatusOnOffUnacknowledged"].color, interval: parseInt(alarmIndication["AlarmStatusOnOffUnacknowledged"].interval)};
		else
			delete activeIndicators["alarm"];

		setIndicator();
	});
}

if (alarmToSubscribe != "")
	initAlarm(alarmToSubscribe);

var currentIndicator = "";
function setIndicator() {
	if (currentIndicator != "")
		return;

	if (activeIndicators["trigger"]) {
		currentIndicator = "trigger";
	} else if (activeIndicators["status"]) {
		currentIndicator = "status";
	} else if (activeIndicators["alarm"]) {
		currentIndicator = "alarm";
	} else {
		currentIndicator = "";
		return;
	}

	indicationActive = true;

	webMI.gfx.setFill("blinking_frame", activeIndicators[currentIndicator].color);
	webMI.gfx.setVisible("blinking_frame", null);

	var interval = activeIndicators[currentIndicator].interval;
	setTimeout(function() {
		webMI.gfx.setVisible("blinking_frame", false);
		setTimeout(function() {
			currentIndicator = "";
			setIndicator();
		}, interval);
	}, interval);
}


webMI.trigger.connect("com.atvise.setBlinking", function(e){
	if (e.value == "none"){
		delete activeIndicators["trigger"];
	} else {
		activeIndicators["trigger"] = {color: e.value, interval: 500};
	}	
	setIndicator();
});
]]></script>
</svg>
