<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<svg xmlns:xlink="http://www.w3.org/1999/xlink" height="30" xmlns="http://www.w3.org/2000/svg" width="160" xmlns:atv="http://webmi.atvise.com/2007/svgext" version="1.2">
 <defs>
  <linearGradient x2="1" y2="1" id="linear_2" gradientUnits="objectBoundingBox" y1="0" x1="1">
   <stop stop-color="#ffffff" offset="0" stop-opacity="0.35"/>
   <stop stop-color="#ffffff" offset="1" stop-opacity="0.35"/>
  </linearGradient>
 </defs>
 <title>Picker Date</title>
 <metadata>
  <atv:parameter valuetype="address" name="base" desc="base" behavior="mandatory"/>
  <atv:parameter valuetype="address" name="alarm" desc="alarm address" defaultvalue="" behavior="optional"/>
  <atv:parameter valuetype="enum" config="Yes;No" name="statusEnabled" desc="enable status monitoring" defaultvalue="Yes" behavior="optional"/>
  <atv:parameter valuetype="string" name="statusTrigger" desc="fire status trigger" defaultvalue="" behavior="optional"/>
  <atv:parameter valuetype="string" name="name" desc="name" behavior="optional"/>
  <atv:parameter substitute="$FONTFAMILY$" valuetype="enum" config="Times New Roman=Times New Roman,Bodoni,Garamond,Minion Web,ITC Stone Serif,MS Georgia,Bitstream Cyberbit,serif;Arial=MS Trebuchet,ITC Avant Garde Gothic,MS Arial,MS Verdana,Univers,Futura,ITC Stone Sans,Gill Sans,Akzidenz Grotesk,Helvetica,sans-serif;Courier=Courier,MS Courier New,Prestige,Everson Mono,monospace;Zapf-Chancery=Caflisch Script,Adobe Poetica,Sanvito,Ex Ponto,Snell Roundhand,Zapf-Chancery,cursive;Alpha Geometrique=Alpha Geometrique,Critter,Cottonwood,FB Reactor,Studz,fantasy" name="fontFamily" desc="family" defaultvalue="Arial" group="Font" behavior="optional"/>
  <atv:parameter substitute="$FONTSIZE$" valuetype="enum" config="6;7;8;9;10;11;12;14;16;18;20;22;24;26;28;36;48;72" name="fontSize" desc="size" defaultvalue="14" group="Font" behavior="optional"/>
  <atv:parameter substitute="$FONTCOLOR$" valuetype="global" name="fontColor" desc="color" defaultvalue="SYSTEM.GLOBALS.atvFontColor" group="Font" behavior="optional"/>
  <atv:parameter substitute="$FILLCOLOR$" valuetype="global" name="fillColor" desc="fill color" defaultvalue="SYSTEM.GLOBALS.atvFillColor" group="Appearance" behavior="optional"/>
  <atv:parameter substitute="$INPUTFILL$" valuetype="color" name="inputFill" desc="value field fill color" defaultvalue="#0A222E" group="Appearance" behavior="optional"/>
  <atv:parameter valuetype="color" name="inputFillInactive" desc="value field fill color inactive" defaultvalue="#b7b7b7" group="Appearance" behavior="optional"/>
  <atv:parameter substitute="$SYMBOLCOLOR$" valuetype="global" name="symbolColor" desc="symbol color" defaultvalue="SYSTEM.GLOBALS.atvSymbolColor" group="Appearance" behavior="optional"/>
  <atv:parameter valuetype="color" name="buttonStrokePressed" desc="button stroke color pressed" defaultvalue="#ffffff" group="Appearance" behavior="optional"/>
  <atv:parameter valuetype="color" name="focusStrokeColor" desc="focus stroke color" defaultvalue="#FFFFFF" group="Appearance" behavior="optional"/>
  <atv:parameter substitute="$BORDERCOLOR$" valuetype="global" name="borderColor" desc="border color" defaultvalue="SYSTEM.GLOBALS.atvBorderColor" group="Appearance" behavior="optional"/>
  <atv:parameter valuetype="global" name="statusIndication" desc="status indication" defaultvalue="SYSTEM.GLOBALS.atvStatusIndication" group="Appearance" behavior="optional"/>
  <atv:parameter valuetype="global" name="alarmIndication" desc="alarm indication" defaultvalue="SYSTEM.GLOBALS.atvAlarmIndication" group="Appearance" behavior="optional"/>
  <atv:parameter valuetype="enum" config="Yes;No" name="showTime" desc="show time" defaultvalue="Yes" group="Options" behavior="optional"/>
  <atv:parameter valuetype="string" name="consistencyGroup" desc="consistency group" group="Options" behavior="optional"/>
  <atv:parameter valuetype="number" name="tabIndex" desc="tab index" group="Options" behavior="optional"/>
  <atv:parameter valuetype="trstring" name="tooltip" desc="tooltip" group="Options" behavior="optional"/>
  <atv:parameter valuetype="address" config="SYSTEM.SECURITY.RIGHTS" name="right" desc="necessary right" group="Security" behavior="optional"/>
  <atv:parameter valuetype="address" name="activeNode" desc="activation address" group="Security" behavior="optional"/>
  <atv:parameter valuetype="string" name="activeValue" desc="activation value" group="Security" behavior="optional"/>
  <atv:parameter valuetype="bool" name="openCentered" desc="open picker centered" defaultvalue="true" group="Appearance" behavior="optional"/>
  <atv:gridconfig height="2" gridstyle="lines" width="2" enabled="true"/>
  <atv:snapconfig height="2" width="2" enabled="true"/>
 </metadata>
 <desc>Opens a dialog to enter the date.</desc>
 <g atv:refpy="15" id="datepicker_clickarea" atv:refpx="80">
  <rect atv:refpy="16" atv:bindtl="0,0" fill="$BORDERCOLOR$" ry="3" rx="3" height="30" stroke-width="1" x="0" width="160" id="id_2" atv:refpx="80" y="0" atv:bindbr="1,1"/>
  <rect atv:refpy="-94.112" atv:bindtl="0,0" fill="$FILLCOLOR$" ry="2.408" rx="2.408" height="28" stroke-width="1" x="1" width="158" id="id_0" atv:refpx="164.164" y="1" atv:bindbr="1,1"/>
  <rect atv:refpy="10" atv:bindtl="0,0" fill="$INPUTFILL$" ry="3" rx="3" height="22" stroke-width="2" stroke="none" x="4" width="128" id="input_bg" atv:refpx="214.155" y="4" atv:bindbr="1,1"/>
  <rect atv:refpy="10" atv:bindtl="0,0" fill="none" ry="3" rx="3" height="22" stroke-width="2" stroke="none" x="4" width="128" id="blinking_frame" atv:refpx="214.155" y="4" atv:bindbr="1,1"/>
  <rect atv:refpy="40.844" atv:bindtl="0,0" fill="none" ry="2.1" rx="2.1" height="26" stroke-width="2" stroke="none" x="2" width="156" id="focus_frame" atv:refpx="214.713" y="2" atv:bindbr="1,1"/>
  <text atv:refpy="19" font-family="$FONTFAMILY$" atv:bindtl="1,0.5" fill="$FONTCOLOR$" x="130.5" text-anchor="end" id="datepicker_label" atv:refpx="447.703" y="20.25" font-size="$FONTSIZE$" atv:bindbr="1,0.5">T{Picker Date}</text>
  <rect atv:refpy="-24.796" atv:bindtl="1,0.5" fill="none" ry="2.755" rx="2.755" height="20" stroke-width="0.5" stroke="none" x="135.5" width="20" id="button_bg" atv:refpx="533.75" y="5" atv:bindbr="1,0.5"/>
  <svg atv:refpy="14.1" atv:bindtl="1,0.5" height="20" x="151.667" width="20" id="id_1" transform="matrix(0.9,0,0,0.9,0,0)" atv:refpx="145" y="6.667" atv:bindbr="1,0.5" xlink:href="SYSTEM.LIBRARY.ATVISE.OBJECTDISPLAYS.Symbols.20x20.calendar">
   <atv:argument name="symbolColor" prefix="symbolColor"/>
  </svg>
  <rect atv:refpy="-24.796" atv:bindtl="1,0.5" fill="#000000" ry="2.755" fill-opacity="0.01" rx="2.755" height="20" stroke-width="0.5" stroke="none" x="135.5" width="20" id="button_stroke" atv:refpx="533.75" y="5" atv:bindbr="1,0.5"/>
 </g>
 <script type="text/ecmascript"><![CDATA[var base = webMI.query["base"] == undefined ? "" : webMI.query["base"];
var name = webMI.query["name"] == undefined ? "dpt" : webMI.query["name"];
var showTime = webMI.query["showTime"] == "Yes" ? true : false;
var timestamp = 0;

var inputFill = webMI.query["inputFill"];
var inputFillInactive = webMI.query["inputFillInactive"];
var fillColor = webMI.query["fillColor"];
var buttonStrokePressed = webMI.query["buttonStrokePressed"];
var focusStrokeColor = webMI.query["focusStrokeColor"];
var arrowFill = webMI.query["arrowFill"];
var consistencyGroup = webMI.query["consistencyGroup"];

if (base){
	if (consistencyGroup) {
		var consistencyHandler = webMI.callExtension("SYSTEM.LIBRARY.ATVISE.QUICKDYNAMICS.Consistency Handler");
		consistencyHandler.register(consistencyGroup, base, updateDisplayValue);
	} else {
		webMI.data.subscribe(base,function(e){
			updateDisplayValue(e.value);
			if (typeof e.status != "undefined")
				handleStatus(e.status);
		});
	}
}

var tabHandler = webMI.callExtension("SYSTEM.LIBRARY.ATVISE.QUICKDYNAMICS.Tab Handler");
var tabIndex = (webMI.query["tabIndex"] == undefined) ? "" : webMI.query["tabIndex"];
var tooltip = (webMI.query["tooltip"] == undefined) ? "" : webMI.query["tooltip"];
var alarmToSubscribe = webMI.query["alarm"];
var alarmIndication = webMI.query["alarmIndication"];
var statusEnabled = webMI.query["statusEnabled"];
var statusTrigger = webMI.query["statusTrigger"];
var statusIndication = webMI.query["statusIndication"];
var activeIndicators = {};
var openCentered = webMI.query["openCentered"];

var right = (webMI.query["right"] == undefined) ? "" : webMI.query["right"];
if (right.search(/SYSTEM\.SECURITY\.RIGHTS\./) != -1) {
	right = right.substring(23,right.length); //remove "prefix" SYSTEM.SECURITY.RIGHTS.
}

var active = false;
var hasRight = false;
var isSetActive = true; //isSetActive is set by the com.atvise.setActive trigger.

if (right != "") {
	webMI.addEvent(webMI.data, "clientvariableschange", function(e) {
		hasRight=false;
		if (("username" in e) && (e.username != "")) {
				hasRight = webMI.hasRight(right);
		}
		deActivate();
	});
}

var activeValue = (webMI.query["activeValue"] == undefined) ? "" :webMI.query["activeValue"];
var activeNode = (webMI.query["activeNode"] == undefined) ? "" : webMI.query["activeNode"];
var nodeIsActive = false;

if ((activeNode != "") && (String(activeValue) != "")) {
	webMI.data.subscribe(activeNode, function(e) {
		var nodeActiveValue = e.value;
		if (typeof nodeActiveValue == "boolean") {
			nodeIsActive = (String(nodeActiveValue) == activeValue);
		} else if (typeof nodeActiveValue == "number") {
			try {
				var temp = parseFloat(activeValue);
				nodeIsActive = (nodeActiveValue == temp);
			} catch(e) {
				nodeIsActive = false;
			}
		} else {
			nodeIsActive = (nodeActiveValue == activeValue);
		}
		if (typeof e.status != "undefined")
			handleStatus(e.status);
		deActivate();
	});
} else {
	deActivate();
}

function deActivate() {
	if (right != "") {
		if ((String(activeValue) != "") && (activeNode != "")) {
			active=(nodeIsActive && hasRight);
		} else {
			active=hasRight;
		}
	} else {
		if ((String(activeValue) != "") && (activeNode != "")) {
			active=nodeIsActive;
		} else {
			active=true;
		}
	}
	active = active && isSetActive;
	if (active) {
		webMI.gfx.setFill("input_bg", inputFill);
		webMI.gfx.setFill("button_bg", fillColor);
		webMI.gfx.setVisible("button_stroke", null);
	} else {
		webMI.gfx.setFill("input_bg", inputFillInactive);
		webMI.gfx.setFill("button_bg", inputFillInactive);
		webMI.gfx.setVisible("button_stroke", false);
	}
}

function handleStatus(status) {
	if (statusEnabled != "Yes")
		return;

	if (statusTrigger != "") {
		webMI.trigger.fire(statusTrigger, status);
	} else {
		if (typeof statusIndication["ItemStatusBad"] == "undefined")
			statusIndication = {"ItemStatusBad": {color: "#ffff00", interval: "250"}};

		if (status == 0 || (status & 0xC0000000).toString(16) == 0)	//Good value state
			delete activeIndicators["status"];
		else if ((status & 0x80000000).toString(16) != 0)			//Bad value state
			activeIndicators["status"] = {color: statusIndication["ItemStatusBad"].color, interval: parseInt(statusIndication["ItemStatusBad"].interval)};
		else if ((status & 0xC0000000).toString(16) == 40000000)	//Uncertain value state
			activeIndicators["status"] = {color: statusIndication["ItemStatusBad"].color, interval: parseInt(statusIndication["ItemStatusBad"].interval)};
		else														//Unknown value state
			activeIndicators["status"] = {color: statusIndication["ItemStatusBad"].color, interval: parseInt(statusIndication["ItemStatusBad"].interval)};

		setIndicator();
	}
}

function initAlarm(address) {
	if (alarmIndication == "")
		alarmIndication = {};

	if (typeof alarmIndication["AlarmStatusOnUnacknowledged"] == "undefined")
		alarmIndication["AlarmStatusOnUnacknowledged"] = {color: "#ff0000", interval: "250"};

	if (typeof alarmIndication["AlarmStatusOnAcknowledged"] == "undefined")
		alarmIndication["AlarmStatusOnAcknowledged"] = {color: "#ff0000", interval: "500"};

	if (typeof alarmIndication["AlarmStatusOffUnacknowledged"] == "undefined")
		alarmIndication["AlarmStatusOffUnacknowledged"] = {color: "#ff0000", interval: "750"};

	if (typeof alarmIndication["AlarmStatusOnOffUnacknowledged"] == "undefined")
		alarmIndication["AlarmStatusOnOffUnacknowledged"] = {color: "#ff0000", interval: "1500"};

	webMI.alarm.subscribe(address, function(e) {
		if (e.state == 1)
			activeIndicators["alarm"] = {color: alarmIndication["AlarmStatusOnUnacknowledged"].color, interval: parseInt(alarmIndication["AlarmStatusOnUnacknowledged"].interval)};
		else if (e.state == 2)
			activeIndicators["alarm"] = {color: alarmIndication["AlarmStatusOnAcknowledged"].color, interval: parseInt(alarmIndication["AlarmStatusOnAcknowledged"].interval)};
		else if (e.state == 3)
			activeIndicators["alarm"] = {color: alarmIndication["AlarmStatusOffUnacknowledged"].color, interval: parseInt(alarmIndication["AlarmStatusOffUnacknowledged"].interval)};
		else if (e.state == 5)
			activeIndicators["alarm"] = {color: alarmIndication["AlarmStatusOnOffUnacknowledged"].color, interval: parseInt(alarmIndication["AlarmStatusOnOffUnacknowledged"].interval)};
		else
			delete activeIndicators["alarm"];

		setIndicator();
	});
}

if (alarmToSubscribe != "")
	initAlarm(alarmToSubscribe);

var currentIndicator = "";
function setIndicator() {
	if (currentIndicator != "")
		return;

	if (activeIndicators["trigger"]) {
		currentIndicator = "trigger";
	} else if (activeIndicators["status"]) {
		currentIndicator = "status";
	} else if (activeIndicators["alarm"]) {
		currentIndicator = "alarm";
	} else {
		currentIndicator = "";
		return;
	}

	indicationActive = true;

	webMI.gfx.setStroke("blinking_frame", activeIndicators[currentIndicator].color);
	webMI.gfx.setVisible("blinking_frame", null);

	var interval = activeIndicators[currentIndicator].interval;
	setTimeout(function() {
		webMI.gfx.setVisible("blinking_frame", false);
		setTimeout(function() {
			currentIndicator = "";
			setIndicator();
		}, interval);
	}, interval);
}

function getDisplayParameters(){
	var passObj = {};
	for (var i in webMI.query)
		passObj[i] = webMI.query[i];
	passObj["popupId"] = name;
	passObj["timestamp"] = timestamp;
	return passObj;
}

function focusTH(){
	if (active) {
		webMI.gfx.setStroke("focus_frame", focusStrokeColor);
	}
}

function blurTH(){
	if (active) {
		webMI.gfx.setStroke("focus_frame", "none");
	}
}

function applyTH(){
	if (active) {
		webMI.callExtension("SYSTEM.LIBRARY.ATVISE.QUICKDYNAMICS.Open Picker", {
			"picker":"SYSTEM.LIBRARY.ATVISE.OBJECTDISPLAYS.Advanced.dialogs.datepicker_dialog",
			"openCentered": openCentered,
			"width":287,
			"height":160,
			"callingElementWidth": webMI.gfx.getWidth("id_0"),
			"callingElementHeight": webMI.gfx.getHeight("id_0"),
			"title":"Pick date:",
			"parameters": getDisplayParameters()
		});
	}
}

function backTH(){}

function arrowTH(dir){}

function keyHandler(keyTH,param2){
	if (keyTH == "focus"){
		focusTH();
	} else if (keyTH == "blur"){
		blurTH();
	} else if (keyTH == "apply"){
		applyTH();
	} else if (keyTH == "space"){
		applyTH();
	} else if (keyTH == "back"){
		backTH();
	} else if (keyTH == "arrow"){
		arrowTH(param2);
	} else if (keyTH == "isActive"){
		return active && param2(document.getElementById("datepicker_clickarea").parentNode);
	}
}

webMI.addEvent("datepicker_clickarea", "click", function(e) {
	var id = "datepicker_clickarea";
	var value = true;
	return function(value){
		if (active) {
			tabHandler.setCurrentIndex(keyHandler);
			webMI.callExtension("SYSTEM.LIBRARY.ATVISE.QUICKDYNAMICS.Open Picker", {
				"picker":"SYSTEM.LIBRARY.ATVISE.OBJECTDISPLAYS.Advanced.dialogs.datepicker_dialog",
				"openCentered": openCentered,
				"width":287,
				"height":160,
				"callingElementWidth": webMI.gfx.getWidth("id_0"),
				"callingElementHeight": webMI.gfx.getHeight("id_0"),
				"title":"Pick date:",
				"parameters": getDisplayParameters()
			});
		}
	}(value);
});

webMI.addEvent("datepicker_clickarea", "mousedown", function(e) {
var id = "datepicker_clickarea";
var value = true;
return function(value) {
	if (active) {
		webMI.gfx.setStroke("focus_frame", buttonStrokePressed);
		webMI.gfx.setStroke("button_stroke", buttonStrokePressed);
		webMI.gfx.setFill("button_bg", "url(#linear_2)");
	}
} (value);
});

webMI.addEvent("datepicker_clickarea", ["mouseup","mouseout"], function(e) {
var id = "datepicker_clickarea";
var value = true;
return function(value) {
	if (active) {
		webMI.gfx.setStroke("focus_frame", "none");
		webMI.gfx.setStroke("button_stroke", "none");
		webMI.gfx.setFill("button_bg", "none");
	}
} (value);
});

webMI.addEvent("datepicker_clickarea", "dragstart", function(e) {
	if (e.preventDefault) {
		e.preventDefault();
	}
});

webMI.trigger.connect("com.atvise.datepicker_" + name, function(e) {
	if (base){
		updateNodeValue(e.value);
	} else {
		updateDisplayValue(e.value);
	}
});

webMI.trigger.connect("com.atvise.setActive",function(e){
	isSetActive = e.value;
	deActivate();
});

webMI.trigger.connect("com.atvise.setBlinking", function(e){
	if (e.value == "none"){
		delete activeIndicators["trigger"];
	} else {
		activeIndicators["trigger"] = {color: e.value, interval: 500};
	}	
	setIndicator();
});

webMI.addOnload(function() {
	webMI.gfx.setText("datepicker_label", "");
	var doc = document.getElementById("datepicker_clickarea").ownerDocument;
	tabHandler.register(tabIndex,keyHandler,doc);
});

function updateDisplayValue(value) {
	timestamp = value;
	webMI.trigger.fire("valuechanged", timestamp, "");
	var date = new Date(value);
	var day = date.getDate();
	var month = date.getMonth()+1;
	var year = date.getFullYear();
	var hours = date.getHours();
	var minutes = date.getMinutes();
	var seconds = date.getSeconds();
	var text = preNull(day) + "." + preNull(month) + "." + year;
	if (showTime) {
		text += " " + preNull(hours) + ":" + preNull(minutes) + "." + preNull(seconds);
	}
	webMI.gfx.setText("datepicker_label", text);
}

function updateNodeValue(value){
	if (consistencyGroup){
		consistencyHandler.set(consistencyGroup, base, value);
		updateDisplayValue(value);
	} else {
		webMI.data.write(base,value);
	}
}

function preNull(value) {
	return (value < 10) ? "0" + value : value;
}
if (tooltip != ""){
	webMI.callExtension("SYSTEM.LIBRARY.ATVISE.QUICKDYNAMICS.Tooltip", {"auto":"true", "id":"datepicker_clickarea", "text":tooltip});
}]]></script>
</svg>
