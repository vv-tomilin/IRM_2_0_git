<?xml version="1.0" encoding="UTF-8"?>
<script>
  <metadata>
    <priority>0</priority>
  </metadata>
  <code><![CDATA[/**
 * Code for the button_inc_dec object display
 * ------------------------------------------
 * This button increments or decrements the value of an address.
 * In addition the trigger "valuechanged" with the new value (=incremented or decremented value) will be fired.
 */


/**
 * DECLARATION SECTION
 */

var base = (webMI.query["base"] == undefined) ? "" : webMI.query["base"];
var step = (webMI.query["step"] == undefined) ? "" : parseFloat(webMI.query["step"]);
var min = (webMI.query["min"] == undefined) ? "" : parseFloat(webMI.query["min"]);
var max = (webMI.query["max"] == undefined) ? "" : parseFloat(webMI.query["max"]);
var interval = parseFloat(webMI.query["interval"]);
var extraBorderColor = webMI.query["extraBorderColor"];
var fillColor = webMI.query["fillColor"];
var fillColorInactive = webMI.query["fillColorInactive"];
var strokeNormal = "none";
var strokePressed = webMI.query["strokePressed"];
var focusStrokeColor = webMI.query["focusStrokeColor"];
var symbolUp = (webMI.query["symbolUp"] == undefined) ? "" : webMI.query["symbolUp"];
var symbolDown = (webMI.query["symbolDown"] == undefined) ? "" : webMI.query["symbolDown"];
var tabHandler = webMI.callExtension("SYSTEM.LIBRARY.ATVISE.QUICKDYNAMICS.Tab Handler");
var tabIndex = (webMI.query["tabIndex"] == undefined) ? "" : webMI.query["tabIndex"];
var tooltip = (webMI.query["tooltip"] == undefined) ? "" : webMI.query["tooltip"];
var visibilitySymbol = webMI.query["visibilitySymbol"];
var visibilityLabel = webMI.query["visibilityLabel"];
var right = (webMI.query["right"] == undefined) ? "" : webMI.query["right"];
var activeValue = (webMI.query["activeValue"] == undefined) ? "" :webMI.query["activeValue"];
var activeNode = (webMI.query["activeNode"] == undefined) ? "" : webMI.query["activeNode"];
var curValue = 0;
var isPressed = false;
var isRunning = false;
var activeTimer;
var active = false;
var isActivationNodeSet = activeNode != "" && String(activeValue) != "";

/**
 * RUNTIME SECTION
 */

var rightsHandlingProperties = {
	right: right,
	checkBaseNodeWriteRight: false,
	isActivationNodeSet: isActivationNodeSet,
	notifierConfiguration: {},
	setActiveTrigger: false,
	handleStatus: false
};

if (typeof rightsHandling === "function") rightsHandling(rightsHandlingProperties);

if (visibilitySymbol != "hidden") {
	if (step > 0) {
		webMI.gfx.setVisible("button_symbol_up", null);
		webMI.gfx.setVisible("button_symbol_down",false);
	}
	if (step < 0) {
		webMI.gfx.setVisible("button_symbol_up", false);
		webMI.gfx.setVisible("button_symbol_down",null);
	}
}

if (visibilityLabel != "hidden") {
	var prefix = (step > 0) ? "+" : "";
	webMI.gfx.setText("button_label", prefix + step);
}

if (typeof extraBorderColor != "undefined" && extraBorderColor != "none" && extraBorderColor != "") {
	webMI.gfx.setStroke("button_stroke", extraBorderColor);
}

if (tooltip != ""){
	webMI.callExtension("SYSTEM.LIBRARY.ATVISE.QUICKDYNAMICS.Tooltip", {"auto":"true", "id":"button_clickarea", "text":tooltip}, false);
}

webMI.addOnload(function() {
	var doc = document.getElementById("button_clickarea").ownerDocument;
	tabHandler.register(tabIndex,keyHandler,doc);
});

/**
 * FUNCTION SECTION
 */

function setActiveLayout() {
	webMI.gfx.setFill("button_bg", fillColor);
	webMI.gfx.setVisible("button_stroke", null);
}

function setInactiveLayout() {
	webMI.gfx.setFill("button_bg", fillColorInactive);
	webMI.gfx.setVisible("button_stroke", false);
}

if (base != "") {
	webMI.data.subscribe(base, function(e) {
		var numValue = parseFloat(e.value);

		curValue = isNaN(numValue) ? e.value : numValue;
	});
}

function release(stayFocued) {
	if (active) {
		webMI.gfx.setFill("button_stroke", "url(#linear_1)");
		if (extraBorderColor == "none" || extraBorderColor == "") {
			if (stayFocued == false) webMI.gfx.setStroke("button_stroke", strokeNormal);
		} else {
			webMI.gfx.setStroke("button_stroke", extraBorderColor);
			webMI.gfx.setStrokeWidth("button_stroke", 1);
		}
		buttonPressed(false);
	}
}

function focusTH(){
	if (active) {
		webMI.gfx.setStroke("button_stroke", focusStrokeColor);
		if (typeof extraBorderColor != "undefined" && extraBorderColor != "none" && extraBorderColor != "") {
			webMI.gfx.setStrokeWidth("button_stroke", 2);
		}
	}
}

function applyTH(){
	if (active){
		var newValue = (curValue+step);
		if ((String(max) != "") && (newValue > max)) newValue = max;
		if ((String(min) != "") && (newValue < min)) newValue = min;
		if (newValue != curValue) {
			webMI.data.write(base, newValue);
			webMI.trigger.fire("valuechanged", newValue, "");
		}
	}
}

function backTH() {
}

function arrowTH(dir) {
}

function keyHandler(keyTH,param2) {
	if (keyTH == "focus") {
		focusTH();
	} else if (keyTH == "blur") {
		release(false);
	} else if (keyTH == "apply") {
		webMI.gfx.setFill("button_stroke", "url(#linear_2)");
		applyTH();
	} else if (keyTH == "releaseClick") {
		webMI.gfx.setFill("button_stroke", "url(#linear_1)");
	} else if (keyTH == "back") {
		backTH();
	} else if (keyTH == "arrow") {
		arrowTH(param2);
	} else if (keyTH == "isActive") {
		return active && param2(document.getElementById("button_clickarea").parentNode);
	}
}

function buttonPressed(pressed) {
	if (typeof curValue === "number") {
		isPressed = pressed;
		if (isPressed && step != "" && curValue != undefined) {
			//Execute action once on mousedown
			var newValue = (curValue+step);
			if ((String(max) != "") && (newValue > max)) newValue = max;
			if ((String(min) != "") && (newValue < min)) newValue = min;
			if (newValue != curValue) {
				webMI.data.write(base, newValue);
				webMI.trigger.fire("valuechanged", newValue, "");
			}
			// Execute action while holding mousedown
			if (interval > 0) {
				isRunning = true;
				activeTimer = setTimeout(doInDecrement, interval);
			}
		} else if(isRunning && activeTimer != undefined) {
			isRunning = false;
			clearTimeout(activeTimer);
		}
	}
}

function doInDecrement() {
	if (isRunning && isPressed) {
		var calcStep = ((step<0)?(-1)*step:step) -1;
		var newValue = (curValue+step);
		if ((String(max) != "") && (newValue > max)) newValue = max;
		if ((String(min) != "") && (newValue < min)) newValue = min;
		if (newValue != curValue) {
			webMI.data.write(base, newValue);
			webMI.trigger.fire("valuechanged", newValue, "");
		}
		activeTimer = setTimeout(doInDecrement, interval);
	}
}

/**
 * EVENT SECTION
 */

webMI.addEvent("button_clickarea", "mousedown", function(e) {
	if (active) {
		tabHandler.setCurrentIndex(keyHandler);
		webMI.gfx.setFill("button_stroke", "url(#linear_2)");
		webMI.gfx.setStroke("button_stroke", strokePressed);
		buttonPressed(true);
	}
});

webMI.addEvent("button_clickarea", "mouseup", function(e) {
	release(true);
});

webMI.addEvent("button_clickarea", "mouseout", function(e) {
	release(false);
});

webMI.addEvent("button_clickarea", "dragstart", function(e) {
	if (e.preventDefault) {
		e.preventDefault();
	}
});]]></code>
</script>
