<?xml version="1.0" encoding="UTF-8"?>
<script>
  <metadata>
    <priority>0</priority>
  </metadata>
  <code><![CDATA[/**
 * Code for in_out_date object display
 * -----------------------------------
 * This control allows to enter a date.
 * In addition the trigger "valuechanged" will be fired.
*/


/**
 * DECLARATION SECTION
 */

//parameters
var base = (webMI.query["base"] == undefined) ? "" : webMI.query["base"];
var format = webMI.query["format"];
var min = webMI.query["min"];
var max = webMI.query["max"];
var outputNode = webMI.query["outputNode"];
var consistencyGroup = webMI.query["consistencyGroup"];

//variables
var now = new Date();
var _value = { "date": now, "time": now.getTime(), "day": now.getDate(), "month": now.getMonth(), "year": now.getFullYear(), "hours": now.getHours(), "minutes": now.getMinutes(), "seconds": now.getSeconds(), "millis": now.getMilliseconds() };
var minDate, maxDate;
var defaults = { "day": 1, "month": 1, "year": 1970 };
var dayDisplay = "day";
var monthDisplay = "month";

if (consistencyGroup)
	var consistencyHandler = webMI.callExtension("SYSTEM.LIBRARY.ATVISE.QUICKDYNAMICS.Consistency Handler");

/**
 * RUNTIME SECTION
 */

var rightsHandlingProperties = {
	right: right,
	checkBaseNodeWriteRight: false,
	isActivationNodeSet: null,
	notifierConfiguration: {"id":"outer_border", "node_1": webMI.query["base"], "right_1": "read"},
	setActiveTrigger: false,
	handleStatus: false
};

if (typeof rightsHandling === "function") rightsHandling(rightsHandlingProperties);

//set minimum date
if (min) {
	minDate = parseDate(min);
}

//set maximum date
if (max) {
	maxDate = parseDate(max);
}

//subscribe to node
if (base != "") {
	if (consistencyGroup) {
		consistencyHandler.register(consistencyGroup, base, update);
	} else {
		webMI.data.subscribe(base, function(e) {
			var millis = 0;

			//check if a value is given
			if (e.value) {
				millis = e.value;

				//if not number, try to parse
				if (typeof millis != "number") {
					millis = parseInt(e.value, 10);

					if (isNaN(millis)) {
						millis = 0;
					}
				}
			}

			//set new date
			var newDate = new Date(millis);
			_value.day = newDate.getDate();
			_value.month = newDate.getMonth();
			_value.year = newDate.getFullYear();
			_value.hours = newDate.getHours();
			_value.minutes = newDate.getMinutes();
			_value.seconds = newDate.getSeconds();
			_value.millis = newDate.getMilliseconds();
			
			//set internal date and update display
			updateDate();
			updateDisplay();
		});
	}
//no base defined
} else {
	//set internal date and display initial value
	updateDate();
	updateDisplay();
}

//move label and buttons according to format
if (format == "mm.dd.yyyy") {
	dayDisplay = "month";
	monthDisplay = "day";
	
	var dayLabel = webMI.gfx.getText("label_day");
	
	webMI.gfx.setText("label_day", webMI.gfx.getText("label_month"));
	webMI.gfx.setText("label_month", dayLabel);

	/* do not move
	webMI.gfx.setMoveX("label_month", webMI.translate(-1, -1, 0, -40, 0));
	webMI.gfx.setMoveX("month", webMI.translate(-1, -1, 0, -40, 0));
	webMI.gfx.setMoveX("label_day", webMI.translate(1, 0, 1, 0, 40));
	webMI.gfx.setMoveX("day", webMI.translate(1, 0, 1, 0, 40));
	*/
}

/**
 * FUNCTION SECTION
 */

//set day, month or year
function setField(value, button) {
	//convert to number if not
	if (typeof value != "number" || isNaN(value)) {
		value = parseInt(value, 10);
		
		if (isNaN(value)) {
			value = defaults[button];
		}
	}
	
	if (button == "month") {
		value--;
	}
	
	//set correct month
	//e.g. 31.12.2011 minus one month should be 30.11.2011 and not 31.11.2011 = 01.12.2011;
	//     31.01.2011 plus  one month should be 28.02.2011 and not 31.02.2011 = 03.03.2011
	if(button == "month" && _value.day >= 30) {// && ((_value.month != 0 && step == -1) || (_value.month != 11 && step == 1))) {
		var oldMonth = _value.month;
		_value.month = value;
		var newDate = new Date(_value.year, _value.month, _value.day, 0, 0, 0, 0);

		while ((newDate.getMonth() == oldMonth) || (newDate.getMonth() > (oldMonth + 1))) {
			newDate = new Date(newDate.getFullYear(), newDate.getMonth(), newDate.getDate() - 1, 0, 0, 0, 0);
		}
		
		_value.day = newDate.getDate();
		_value.month = newDate.getMonth();
		_value.year = newDate.getFullYear();
	}else{
		_value[button] = value;
	}
	
	updateDate();
	valueUpdated(true);
	
	//update displayed values only 
	if ((base == "") || (base == undefined)) {
		updateDisplay();
	}
}

//parse string to date object
function parseDate(str) {
	//parse string in correct format to date object
	var date = new Date(0);
	
	if (typeof str == "string" && str) {
		var match = str.match(/\d+/g);
	
		if (match) {
			var day = match[0];
			var month = match[1];
			var year = match[2];

			//mm.dd.yyyy
			if (format == "mm.dd.yyyy") {
				month = match[0];
				day = match[1];
			}
			
			if (!day) { day = defaults["day"]; }
			if (!month) { month = defaults["month"]; }
			if (!year) { year = defaults["year"]; }	

			month--;
			date.setDate(day);
			date.setMonth(month);
			date.setFullYear(year);
		}
	}
	
	return date;
}

//update display
function updateDisplay() {
	webMI.trigger.fire("setValue", _value.day, dayDisplay);
	webMI.trigger.fire("setValue", _value.month + 1, monthDisplay);
	webMI.trigger.fire("setValue", _value.year, "year");
}

//set date
function updateDate() {
	_value.date = new Date(_value.year, _value.month, _value.day, _value.hours, _value.minutes, _value.seconds, _value.millis);
	
	//check against maxDate
	if (maxDate && (_value.date.getTime() > maxDate.getTime())) {
		_value.date = maxDate;
	//check against minDate
	} else if (minDate && (_value.date.getTime() < minDate.getTime())) {
		_value.date = minDate;
	}
	
	_value.time = _value.date.getTime();
	_value.day = _value.date.getDate();
	_value.month = _value.date.getMonth();
	_value.year = _value.date.getFullYear();
	_value.hours = _value.date.getHours();
	_value.minutes = _value.date.getMinutes();
	_value.seconds = _value.date.getSeconds();
	_value.millis = _value.date.getMilliseconds();
}

//value has been changed by display
function valueUpdated(fireTrigger) {
	//update node
	if (base != "" && !consistencyGroup) {
		webMI.data.write(base, _value.time);
	}

	if (outputNode) {
		webMI.data.write(outputNode, _value.time);
	}
	
	//fire trigger
	if (fireTrigger) {
		webMI.trigger.fire("valuechanged", _value.time, "");
	}

	//update consistency value
	if (consistencyGroup)
		consistencyHandler.set(consistencyGroup, base, _value.time);
}

//update externally by trigger or consistency handler
function update(value) {
	var date = new Date(value);
	_value.day = date.getDate();
	_value.month = date.getMonth();
	_value.year = date.getFullYear();
	_value.hours = date.getHours();
	_value.minutes = date.getMinutes();
	_value.seconds = date.getSeconds();
	_value.millis = date.getMilliseconds();

	updateDate();
	//valueUpdated(false);

	//update displayed values only
	if ((base == "") || (base == undefined) || consistencyGroup) {
		updateDisplay();
	}
}

function setActiveLayout() {
}

function setInactiveLayout() {
}

/**
 * TRIGGER SECTION
 */

//connect to valuechanged-triggers
webMI.trigger.connect("valuechanged", function(e) { setField(e.value, dayDisplay); }, "day");
webMI.trigger.connect("valuechanged", function(e) { setField(e.value, monthDisplay); }, "month");
webMI.trigger.connect("valuechanged", function(e) {	setField(e.value, "year"); }, "year");

//connect to updateDate-trigger
webMI.trigger.connect("updateTime", function(e) {
	var date = new Date(e.value);
	_value.hours = date.getHours();
	_value.minutes = date.getMinutes();
	_value.seconds = date.getSeconds();
	_value.millis = date.getMilliseconds();
});

//connect to setValue-trigger
webMI.trigger.connect("setValue", function(e) {
	update(e.value);
});]]></code>
</script>
