<?xml version="1.0" encoding="UTF-8"?>
<script>
  <metadata>
    <priority>0</priority>
  </metadata>
  <code><![CDATA[/**
 * Code for the button_switch object display
 * -----------------------------------------
 * This button will be in "On" state if the value of "base" equals the parameter "value On".
 * If no "outputNode" is specified, the value of "base" will be switched between "value On to be set" (= state "On") and "value Off to be set" (=state Off").
 * If an "outputNode" is specified, then this node will be switched between "value On to be set" (= state "On") and "value Off to be set".
 */


/**
 * DECLARATION SECTION
 */

var base = (webMI.query["base"] == undefined) ? "" : webMI.query["base"];
var onText = webMI.query["labelOn"];
var offText = webMI.query["labelOff"];
var onFill = (webMI.query["fillOn"] == undefined) ? "" : webMI.query["fillOn"];
var offFill = (webMI.query["fillOff"] == undefined) ? "" : webMI.query["fillOff"];
var fillColorInactive = webMI.query["fillColorInactive"];
var strokeNormal = "none";
var strokePressed = webMI.query["strokePressed"];
var extraBorderColor = webMI.query["extraBorderColor"];
var focusStrokeColor = webMI.query["focusStrokeColor"];
var valueOn = (webMI.query["valueOn"] == undefined) ? "" : webMI.query["valueOn"];
var outputNode = (webMI.query["outputNode"] == undefined) ? "" : webMI.query["outputNode"];
var outputValueOn = webMI.query["outputValueOn"];
var outputValueOff = webMI.query["outputValueOff"];
var visibilityLabel = webMI.query["visibilityLabel"];
var visibilitySymbol = webMI.query["visibilitySymbol"];
var symbolOn = (webMI.query["symbolOn"] == undefined) ? "" : webMI.query["symbolOn"];
var symbolOff = (webMI.query["symbolOff"] == undefined) ? "" : webMI.query["symbolOff"];
var currentValue = outputValueOff;
var tabHandler = webMI.callExtension("SYSTEM.LIBRARY.ATVISE.QUICKDYNAMICS.Tab Handler");
var tabIndex = (webMI.query["tabIndex"] == undefined) ? "" : webMI.query["tabIndex"];
var tooltip = (webMI.query["tooltip"] == undefined) ? "" : webMI.query["tooltip"];
var alarmToSubscribe = webMI.query["alarm"];
var alarmIndication = webMI.query["alarmIndication"];
var statusEnabled = webMI.query["statusEnabled"];
var statusTrigger = webMI.query["statusTrigger"];
var statusIndication = webMI.query["statusIndication"];
var right = (webMI.query["right"] == undefined) ? "" : webMI.query["right"];
var activeValue = (webMI.query["activeValue"] == undefined) ? "" :webMI.query["activeValue"];
var activeNode = (webMI.query["activeNode"] == undefined) ? "" : webMI.query["activeNode"];
var active = false;
var isActivationNodeSet = activeNode != "" && String(activeValue) != "";

/**
 * RUNTIME SECTION
 */

var rightsHandlingProperties = {
	right: right,
	checkBaseNodeWriteRight: true,
	isActivationNodeSet: isActivationNodeSet,
	notifierConfiguration: {},
	setActiveTrigger: false,
	handleStatus: true
};

if (typeof rightsHandling === "function") rightsHandling(rightsHandlingProperties);

if (typeof extraBorderColor != "undefined" && extraBorderColor != "none" && extraBorderColor != "") {
	webMI.gfx.setStroke("button_stroke", extraBorderColor);
}

if (alarmToSubscribe != "")
	initAlarm(alarmToSubscribe);

if (base != "") {
	webMI.data.subscribe(base, function(e) {
		currentValue = e.value;
		if ((String(currentValue) != "")) {
			if (compareValue(currentValue, valueOn)) {
				if (visibilityLabel != "hidden") webMI.gfx.setText("button_label",onText);
				if (visibilitySymbol != "hidden") {
					if (symbolOff != "") webMI.gfx.setVisible("button_symbol_on", null);
					if (symbolOn != "") webMI.gfx.setVisible("button_symbol_off", false);
				}
				if (active) {
					webMI.gfx.setFill("button_stroke", "url(#linear_2)");
					if (onFill != "") webMI.gfx.setFill("button_bg", onFill);
				}
			} else {
				if (visibilityLabel != "hidden") webMI.gfx.setText("button_label",offText);
				if (visibilitySymbol != "hidden") {
					if (symbolOff != "") webMI.gfx.setVisible("button_symbol_on", false);
					if (symbolOn != "") webMI.gfx.setVisible("button_symbol_off", null);
				}
				if (active) {
					webMI.gfx.setFill("button_stroke", "url(#linear_1)");
					if (offFill != "") webMI.gfx.setFill("button_bg", offFill);
				}
			}
		}
		if (typeof e.status != "undefined" && typeof handleStatus === "function")
			handleStatus(e.status);
	});
} else {
	webMI.gfx.setFill("button_stroke", "url(#linear_1)");
	if (visibilityLabel != "hidden") webMI.gfx.setText("button_label",offText);
	if (offFill != "") webMI.gfx.setFill("button_bg", offFill);
	if (visibilitySymbol != "hidden") {
		if (symbolOff != "") webMI.gfx.setVisible("button_symbol_on", false);
		if (symbolOn != "") webMI.gfx.setVisible("button_symbol_off", null);
	}
}

if (tooltip != ""){
	webMI.callExtension("SYSTEM.LIBRARY.ATVISE.QUICKDYNAMICS.Tooltip", {"auto":"true", "id":"button_clickarea", "text":tooltip});
}

webMI.addOnload(function() {
	var doc = document.getElementById("button_clickarea").ownerDocument;
	tabHandler.register(tabIndex,keyHandler,doc);
});

/**
 * FUNCTION SECTION
 */

function setActiveLayout() {
	if (compareValue(currentValue, valueOn)){
		webMI.gfx.setFill("button_stroke", "url(#linear_2)");
		if (onFill != "") webMI.gfx.setFill("button_bg", onFill);
		if (visibilityLabel != "hidden") webMI.gfx.setText("button_label",onText);
		if (visibilitySymbol != "hidden") {
			if (symbolOff != "") webMI.gfx.setVisible("button_symbol_on", null);
			if (symbolOn != "") webMI.gfx.setVisible("button_symbol_off", false);
		}
	} else {
		webMI.gfx.setFill("button_stroke", "url(#linear_1)");
		if (offFill != "") webMI.gfx.setFill("button_bg", offFill);
		if (visibilityLabel != "hidden") webMI.gfx.setText("button_label",offText);
		if (visibilitySymbol != "hidden") {
			if (symbolOff != "") webMI.gfx.setVisible("button_symbol_on", false);
			if (symbolOn != "") webMI.gfx.setVisible("button_symbol_off", null);
		}
	}
	webMI.gfx.setVisible("button_stroke", null);
}

function setInactiveLayout() {
	webMI.gfx.setFill("button_bg", fillColorInactive);
	webMI.gfx.setVisible("button_stroke", false);
}

function compareValue(value1, value2) {
	// value2 is always a string
	var equal = false;
	switch (typeof value1) {
		case "boolean" :
			if (value1 == true) {
				if ((value2 == "true") || (value2 == "1")) {
					equal=true;
				} else {
					equal=false;
				}
			}
			if (value1 == false) {
				if ((value2 == "false") || (value2 == "0")) {
					equal=true;
				} else {
					equal=false;
				}
			}
		break;
		case "number" :
			try {
				var temp = parseFloat(value2);
				equal = (value1 == temp);
			} catch(e) {
				equal = false;
			}
		break;
		default: equal = (value1 == value2); break;
	}
	return equal;
}

function release() {
	if (active) {
		if (typeof extraBorderColor != "undefined") {
			webMI.gfx.setFill("button_stroke", "url(#linear_1)");
		}
		if (typeof extraBorderColor == "undefined" || extraBorderColor == "none" || extraBorderColor == "") {
			webMI.gfx.setStroke("button_stroke", strokeNormal);
		} else {
			webMI.gfx.setStroke("button_stroke", extraBorderColor);
			webMI.gfx.setStrokeWidth("button_stroke", 1);
		}
	}
}

function focusTH() {
	if (active) {
		webMI.gfx.setStroke("button_stroke", focusStrokeColor);
		if (typeof extraBorderColor != "undefined" && extraBorderColor != "none" && extraBorderColor != "") {
			webMI.gfx.setStrokeWidth("button_stroke", 2);
		}
	}
}

function applyTH() {
	clickFunction(true);
}

function backTH() {
}

function arrowTH(dir) {
}

function keyHandler(keyTH,param2){
	if (keyTH == "focus"){
		focusTH();
	} else if (keyTH == "blur"){
		release();
	} else if (keyTH == "apply"){
		applyTH();
	} else if (keyTH == "back"){
		backTH();
	} else if (keyTH == "arrow"){
		arrowTH(param2);
	} else if (keyTH == "isActive"){
		return active && param2(document.getElementById("button_clickarea").parentNode);
	}
}

function clickFunction(fireTrigger) {
	if (active && (String(currentValue) != "")) {
		if (compareValue(currentValue, valueOn)) {
			if (fireTrigger)
				webMI.trigger.fire("valuechanged", outputValueOff, "");
			if (outputNode != "") {
				webMI.data.write(outputNode, outputValueOff);
			} else {
				if (base != "") webMI.data.write(base, outputValueOff);
			}
			if (base == "") {
				webMI.gfx.setFill("button_stroke", "url(#linear_1)");
				if (visibilityLabel != "hidden") webMI.gfx.setText("button_label",offText);
				if (offFill != "") webMI.gfx.setFill("button_bg", offFill);
				if (visibilitySymbol != "hidden") {
					if (symbolOff != "") webMI.gfx.setVisible("button_symbol_on", false);
					if (symbolOn != "") webMI.gfx.setVisible("button_symbol_off", null);
				}
				currentValue=outputValueOff;
			}
		} else {
			if (fireTrigger)
				webMI.trigger.fire("valuechanged", outputValueOn, "");
			if (outputNode != "") {
				webMI.data.write(outputNode, outputValueOn);
			} else {
				if (base != "") webMI.data.write(base, outputValueOn);
			}
			if (base == "") {
				webMI.gfx.setFill("button_stroke", "url(#linear_2)");
				if (visibilityLabel != "hidden") webMI.gfx.setText("button_label",onText);
				if (onFill != "") webMI.gfx.setFill("button_bg", onFill);
				if (visibilitySymbol != "hidden") {
					if (symbolOff != "") webMI.gfx.setVisible("button_symbol_on", null);
					if (symbolOn != "") webMI.gfx.setVisible("button_symbol_off", false);
				}
				currentValue=valueOn;
			}
		}
	}
}

/**
 * EVENT SECTION
 */

webMI.addEvent("button_clickarea", ["mouseup","mouseout"], function(e) {
	var id = "button_clickarea";
	var value = true;
	return function(value) {
		release();
	} (value);
});

webMI.addEvent("button_clickarea", "mousedown", function(e) {
	var id = "button_clickarea";
	var value = true;
	return function(value) {
			if (active) webMI.gfx.setStroke("button_stroke", strokePressed);
	} (value);
});

webMI.addEvent("button_clickarea", "dragstart", function(e) {
	if (e.preventDefault) e.preventDefault();
});

webMI.addEvent("button_clickarea", "click", function(e) {
	var id = "button_clickarea";
	var value = true;
	return function(value) {
		if (active) tabHandler.setCurrentIndex(keyHandler);
		clickFunction(true);
	} (value);
});

/**
 * TRIGGER SECTION
 */

webMI.trigger.connect("setValue", function(e) {
	var value = e.value;
	var isClicked = currentValue == "1";

	if (isClicked == value) {
		clickFunction(false);
	}

}, "");]]></code>
</script>
