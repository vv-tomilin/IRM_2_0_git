<?xml version="1.0" encoding="UTF-8"?>
<script>
	<metadata>
		<priority>0</priority>
	</metadata>
	<code><![CDATA[/**
 * Code for the layout element button favorites object display
 * ----------------------------------------
 * This script supports the display evaluating the favorite selection.
 */


/**
 * DECLARATION SECTION
 */
var activeDisplay, activeQuery;
var checkActiveState = false;
var configNode = webMI.query["configNode"];
var contextMenuFillColor = webMI.query["context_menu_fill_color"];
var contextMenuHoverColor = webMI.query["context_menu_hover_color"];
var listOfFavorites = [];
var menuObj = {};
var popUpX = 0;
var popUpY = 42;
var symbolColor = webMI.query["symbolColor"];
var symbolColorActive = webMI.query["symbolColorActive"];
var selfId = document.getElementById("button_fav").parentNode.parentNode.id;
var username;


/**
 * UI SETUP SECTION
 */
var contextMenuStyle = {
	itemHeight: 50,
	itemFill: contextMenuFillColor,
	itemPadding: 10,
	itemMargin: 5,
	itemBorderRadius: 3,
	itemBorder: "1px #d7d7d7 solid",
	maxRows: 5,
	fontFamily: webMI.query["context_menu_font_family"],
	fontSize: webMI.query["context_menu_font_size"],
	fontFill: webMI.query["context_menu_font_color"],
	hoverFontFill: webMI.query["context_menu_font_color_hover"],
	width: 140,
	fill: 0,
	stroke: "#565656",
	strokeWidth: 0,
	hoverFill: contextMenuHoverColor,
	closeTime: 0,
	zIndex: 100,
	showType: "right",
	alignment: "left"
};

webMI.gfx.setStroke("button_fav_button_symbol_id_0", symbolColor);
webMI.gfx.setWidth("button_fav_button_bg", webMI.gfx.getWidth("button_fav_button_bg") - 2);
webMI.gfx.setHeight("button_fav_button_bg", webMI.gfx.getHeight("button_fav_button_bg") - 2);
webMI.gfx.setX("button_fav_button_bg", "2");
webMI.gfx.setY("button_fav_button_bg", "2");


/**
 * RUNTIME SECTION
 */
if (webMI.getMethodSupport().indexOf("AddNode") == -1)
	webMI.trigger.fire("com.atvise.setActive", false, "button_fav");

if (username) {
	webMI.addOnload(function () {
		setConfigIfLoggedIn();
	});
}

setConfigIfLoggedIn();


/**
 * FUNCTION SECTION
 */
function checkDisplay() {
	var activeFoundInFavorites = false;

	for (var i = 0; i < listOfFavorites.length; i++) {
		if (compareDisplay(listOfFavorites[i].address, activeDisplay)) {
			activeFoundInFavorites = true;
			continue;
		}
	}

	checkActiveState = activeFoundInFavorites;

	if (activeFoundInFavorites) {
		webMI.gfx.setFill("button_fav_button_bg", contextMenuFillColor);
		webMI.gfx.setFill("button_fav_button_symbol", webMI.query["fontColorActive2"]);
		webMI.trigger.fire("com.atvise.setButtonSymbolColor", {
			"newColor": symbolColorActive,
			"currentColor": symbolColor,
			"buttonId": selfId + "_button_fav"
		});
	} else {
		webMI.gfx.setFill("button_fav_button_bg", contextMenuHoverColor);
		webMI.gfx.setFill("button_fav_button_symbol", webMI.query["fontColor2"]);
		webMI.trigger.fire("com.atvise.setButtonSymbolColor", {
			"newColor": symbolColor,
			"currentColor": symbolColorActive,
			"buttonId": selfId + "_button_fav"
		});
	}
}

function compareDisplay(favorite, actual) {
	var match = false;
	if (actual)
		actual = actual.replace("%20", " ");
	if (favorite === actual)
		match = true;
	return match;
}

function addFav(favName, displayAddress, query) {
	listOfFavorites.push({name: favName, address: displayAddress, query: query});
	webMI.gfx.setFillOpacity("button_fav_button_symbol_id_0", 1);
	writeConfig(configNode, username, listOfFavorites);
	checkDisplay();
}

function removeFav(displayAddress, query, window) {
	var addressFoundInFavorites = null;

	for (var i = 0; i < listOfFavorites.length; i++) {
		if (compareDisplay(listOfFavorites[i].address, displayAddress) && listOfFavorites[i].query == query) {
			addressFoundInFavorites = i;
			continue;
		}
	}

	if (addressFoundInFavorites != null) {
		listOfFavorites.splice(addressFoundInFavorites, 1);
		window.close();
		closeContextMenu();
		writeConfig(configNode, username, listOfFavorites);
	}
	checkDisplay();
}

function addOrRemoveFav(doAdd, display, query) {
	if (doAdd) {
		getNameInputForFav(display, query);
	} else {
		webMI.display.openWindow({
			display: "SYSTEM.LIBRARY.ATVISE.OBJECTDISPLAYS.Advanced.dialogs.message_dialog",
			extern: false,
			width: 675,
			height: 425,
			menubar: false,
			modal: true,
			movable: true,
			resizable: false,
			scrollbars: false,
			status: false,
			title: "T{Favorites} ",
			toolbar: false,
			query: {
				btn1: "T{OK}",
				btn2: "T{Cancel}",
				headline: "T{Remove favorite}?",
				msg1: display,
				action_btn1: "com.atvise.favorites.remove",
				displayAddress: display,
				id: configNode,
				query: query,
				backgroundColor: webMI.query["popup_fill"],
				fontColor: webMI.query["popup_font_color"],
				fontSize: webMI.query["popup_font_size"],
				fontFamily: webMI.query["popup_font_family"]
			}
		});
	}
}

function getNameInputForFav(display_address, query) {
	webMI.display.openWindow({
		display: "SYSTEM.LIBRARY.ATVISE.OBJECTDISPLAYS.Advanced.layoutelements.fav_input",
		extern: false,
		width: 780,
		height: 257.5,
		menubar: false,
		modal: true,
		movable: true,
		resizable: false,
		scrollbars: false,
		status: false,
		title: "T{Favorites} ",
		toolbar: false,
		query: {
			displayAddress: display_address,
			id: configNode,
			query: query,
			fillColor: webMI.query["popup_fill"],
			fontColor: webMI.query["popup_font_color"],
			fontSize: webMI.query["popup_font_size"],
			fontFamily: webMI.query["popup_font_family"],
			isLoggedIn: typeof username != "undefined"
		}
	});
}

function openFav(favDisplayAddress, query) {
	return function () {
		webMI.display.openDisplay(favDisplayAddress, query, "content");
	};
}

function openContextMenu() {
	menuObj = {};
	var activeFoundInFavorites = null;
	for (var i = 0; i < listOfFavorites.length; i++) {
		menuObj[i] = {
			text: listOfFavorites[i].name,
			value: openFav(listOfFavorites[i].address, listOfFavorites[i].query),
			textAlign: webMI.query["contextMenuTextAlignment"]
		};

		if (compareDisplay(listOfFavorites[i].address, activeDisplay) && listOfFavorites[i].query == activeQuery) {
			activeFoundInFavorites = i;
		}
	}
	menuObj[i + 1] = {textAlign: webMI.query["contextMenuTextAlignment"]};
	if (activeFoundInFavorites != null) {
		menuObj[i + 1].text = "T{Remove}";
		menuObj[i + 1].menuPosition = "bottom";
		menuObj[i + 1].value = function () {
			addOrRemoveFav(false, activeDisplay, activeQuery)
		};
	} else {
		menuObj[i + 1].text = "T{Add}";
		menuObj[i + 1].menuPosition = "bottom";
		menuObj[i + 1].value = function () {
			addOrRemoveFav(true, activeDisplay, activeQuery)
		};
	}
	webMI.callExtension("SYSTEM.LIBRARY.ATVISE.QUICKDYNAMICS.Open Context Menu", {
		"id": "button_fav",
		onEvent: "immediately",
		menuObj: menuObj,
		active: function () {
			return true;
		},
		"x": popUpX,
		"y": popUpY,
		"itemsCount": 5,
		"elementHeight": webMI.gfx.getHeight("button_fav") / webMI.gfx.getScreenCTM().d * webMI.gfx.getScreenCTM("button_fav").d,
		"minWidth": webMI.gfx.getWidth("button_fav") / webMI.gfx.getScreenCTM().a * webMI.gfx.getScreenCTM("button_fav").a,
		"style": contextMenuStyle
	});
}

function closeContextMenu() {
	webMI.callExtension("SYSTEM.LIBRARY.ATVISE.QUICKDYNAMICS.Open Context Menu", {
		"id": "",
		onEvent: "immediately"
	});
}

function setConfigIfLoggedIn() {
	var consoleOutput = {};
	consoleOutput["Written"] = function () {
		console.log("Configuration for user " + username + " written.");
	};

	if (webMI.getMethodSupport().indexOf("CheckNodeExists") > -1) {
		webMI.data.call("CheckNodeExists", {"address": configNode}, function (e) {
			if (e.result) {
				webMI.data.read(configNode, function (e) { // Read if config node exists
					webMI.data.call("CheckNodeExists", {"address": configNode + "." + username}, function (e) {
						if (e.result) {
							webMI.data.read(configNode + "." + username, function (e) {
								if (e.value) {
									listOfFavorites = JSON.parse(e.value); // Read saved config from user's config node
									checkDisplay();
								}
							});
						} else {
							addNode(configNode + "." + username, JSON.stringify(listOfFavorites), consoleOutput["Written"]);
						}
					});
				});
			} else {
				// If config node does not exist
				addNode(
					configNode,
					"",
					function () {
						addNode(configNode + "." + username, JSON.stringify(listOfFavorites), consoleOutput["Written"]);
					}
				);
			}
		});
	} else {
		webMI.data.read(configNode, function (e) { // Read if config node exists
			if (e.error && e.error != "0") { // If config node does not exist
				addNode(
					configNode,
					"",
					function () {
						addNode(configNode + "." + username, JSON.stringify(listOfFavorites), consoleOutput["Written"]);
					}
				);  // Add and then write to config node for current user
			} else {
				webMI.data.read(configNode + "." + username, function (e) {
					if (e.error && e.error != "0") {
						addNode(configNode + "." + username, JSON.stringify(listOfFavorites), consoleOutput["Written"]);
					} else {
						if (e.value == "")
							listOfFavorites = [];
						else
							listOfFavorites = JSON.parse(e.value); // Read saved config from user's config node
						checkDisplay();
					}
				});
			}
		});
	}
}

function addNode(node, value, callback) {
	if (webMI.getMethodSupport().indexOf("AddNode") < 0) {
		console.warn("The AddNode method is not supported, please add the configuration node manually");
	} else {
		webMI.data.call("AddNode", {
			"address": node,
			"typeDefinition": "i=62",
			"dataType": "STRING",
			"value": value,
			"nodeClass": "NODECLASS_VARIABLE",
			"writePolicy": 2
		}, callback);
	}
}

function writeConfig(configNode, username, configuration) {
	var jsonListOfFavorites = JSON.stringify(listOfFavorites);
	if (jsonListOfFavorites.length <= parseInt(webMI.query["sizeLimit"])) {
		webMI.data.write(configNode + "." + username, jsonListOfFavorites);
	} else {
		listOfFavorites.pop();
		webMI.display.openWindow({
			display: "SYSTEM.LIBRARY.ATVISE.OBJECTDISPLAYS.Advanced.dialogs.message_dialog_small",
			extern: false,
			width: 510,
			height: 200,
			menubar: false,
			modal: true,
			movable: true,
			resizable: false,
			scrollbars: false,
			status: false,
			title: "T{Size limit exceeded} ",
			toolbar: false,
			query: {
				button: "T{OK}",
				headline: "T{Size limit exceeded}",
				message: "T{The current display can not be added to the favorites, because the config node would exceed its size limit.}",
				backgroundColor: webMI.query["popup_fill"],
				fontColor: webMI.query["popup_font_color"],
				fontSize: webMI.query["popup_font_size"],
				fontFamily: webMI.query["popup_font_family"]
			}
		});
	}
}

function setButtonColors(menuInfo) {
	if (checkActiveState || (menuInfo != undefined && menuInfo.menu == menuObj && menuInfo.opened == true)) {
		webMI.gfx.setFill("button_fav_button_bg", contextMenuFillColor);
		webMI.gfx.setFill("button_fav_button_symbol", webMI.query["fontColorActive2"]);
		webMI.trigger.fire("com.atvise.setButtonSymbolColor", {
			"newColor": symbolColorActive,
			"currentColor": symbolColor,
			"buttonId": selfId + "_button_fav"
		});
	} else {
		webMI.gfx.setFill("button_fav_button_bg", contextMenuHoverColor);
		webMI.gfx.setFill("button_fav_button_symbol", webMI.query["fontColor2"]);
		webMI.trigger.fire("com.atvise.setButtonSymbolColor", {
			"newColor": symbolColor,
			"currentColor": symbolColorActive,
			"buttonId": selfId + "_button_fav"
		});
	}
}


/**
 * EVENT SECTION
 */
webMI.addEvent(webMI.data, "clientvariableschange", function (e) {
	if ("username" in e) {
		username = (e.username != "") ? e.username : null;
		loggedIn = (e.username != "");
		if (loggedIn) {
			setConfigIfLoggedIn();
		} else {
			listOfFavorites = [];
			webMI.gfx.setFillOpacity("button_fav_button_symbol_id_0", 0);
		}
	}
});


/**
 * TRIGGER SECTION
 */
webMI.trigger.connect("com.atvise.iframe.onloadFrame", function (e) {
	if (e.value.name != "content") return;

	activeDisplay = e.value.content;
	if (webMI.rootWindow.displaysJs.postfix.indexOf("svg") > -1)
		activeDisplay = activeDisplay.replace(".svg", "");
	activeQuery = e.value.query;
	checkDisplay();
});

webMI.trigger.connect("com.atvise.favorites.add", function (e) {
	if (e.context.id == configNode)
		addFav(e.context.favName, e.context.displayAddress, e.context.query);
});

webMI.trigger.connect("com.atvise.favorites.remove", function (e) {
	setConfigIfLoggedIn(); //required for update with multiple favorite buttons
	if (e.value.webMI.query["id"] == configNode)
		removeFav(e.value.webMI.query["displayAddress"], e.value.webMI.query["query"], e.value);
});

webMI.trigger.connect("clicked", function (e) {
	openContextMenu();
}, "button_fav");

webMI.trigger.connect("com.atvise.popup_status", function (e) {
	setButtonColors(e.value);
});]]></code>
</script>