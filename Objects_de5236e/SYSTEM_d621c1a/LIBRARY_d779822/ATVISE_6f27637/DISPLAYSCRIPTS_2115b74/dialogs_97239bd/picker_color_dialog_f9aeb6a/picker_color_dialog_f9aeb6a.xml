<?xml version="1.0" encoding="UTF-8"?>
<script>
	<metadata>
		<priority>0</priority>
	</metadata>
	<code><![CDATA[/**
 * Code for the picker color object display
 * ----------------------------------------
 * This script supports the dialog handling generate a color in hex format.
 * The user can generate his color in different ways, by clicking on to the base colors on the top circle,
 * by manually setting the RGB/HSV values or simply by entering a color in hex format.
 */


/**
 * DECLARATION SECTION
 */
var rValue = 0;
var gValue = 0;
var bValue = 0;
var hValue = 0;
var sValue = 0;
var vValue = 0;
var aValue = 100;

var colors = ["id_27", "id_24", "id_23", "id_22", "id_21", "id_20", "id_16", "id_3", "id_0", "id_25", "id_26", "id_28"];
var hexColor = "#ffffff";
var initHexColor = true;
var updateHexColor = true;


/**
 * RUNTIME SECTION
 * Runtime code has to be executed after onload to take care all other resources are ready
 */
webMI.addOnload(function () {
	for (var i = 0; i < colors.length; ++i)
		addEvent(colors[i]);

	if ("color" in webMI.query) {
		hexColor = webMI.query.color;
		webMI.gfx.setFill("preview", hexColor);
	}

	initHexColor = true;
	webMI.trigger.fire("setValue", hexColor, "hexvalue");
});


/*
 * FUNCTION SECTION
 */
function updateValues() {
	// webMI.gfx.setFill("preview", hexColor);
	webMI.gfx.setFillOpacity("preview", aValue * 0.01);
	updateHexColor = false;
	webMI.trigger.fire("setValue", rValue, "rvalue");
	webMI.trigger.fire("setValue", gValue, "gvalue");
	webMI.trigger.fire("setValue", bValue, "bvalue");
	webMI.trigger.fire("setValue", hValue, "hvalue");
	webMI.trigger.fire("setValue", sValue, "svalue");
	webMI.trigger.fire("setValue", vValue, "vvalue");
	webMI.trigger.fire("setValue", aValue, "avalue");
	updateHexColor = true;
}

function HSVobject(hue, saturation, value) {
	// Object definition.
	this.h = hue;
	this.s = saturation;
	this.v = value;
	this.validate = function () {
		if (this.h <= 0) {
			this.h = 0;
		}
		if (this.s <= 0) {
			this.s = 0;
		}
		if (this.v <= 0) {
			this.v = 0;
		}
		if (this.h > 360) {
			this.h = 360;
		}
		if (this.s > 100) {
			this.s = 100;
		}
		if (this.v > 100) {
			this.v = 100;
		}
	};
}

function RGBobject(red, green, blue) {
	// Object definition.
	this.r = red;
	this.g = green;
	this.b = blue;
	this.validate = function () {
		if (this.r <= 0) {
			this.r = 0;
		}
		if (this.g <= 0) {
			this.g = 0;
		}
		if (this.b <= 0) {
			this.b = 0;
		}
		if (this.r > 255) {
			this.r = 255;
		}
		if (this.g > 255) {
			this.g = 255;
		}
		if (this.b > 255) {
			this.b = 255;
		}
	};
}

function hexify(number) {
	var digits = '0123456789ABCDEF';
	var lsd = number % 16;
	var msd = (number - lsd) / 16;
	var hexified = digits.charAt(msd) + digits.charAt(lsd);
	return hexified;
}

function decimalize(hexNumber) {
	var digits = '0123456789ABCDEF';
	return ((digits.indexOf(hexNumber.charAt(0).toUpperCase()) * 16) + digits.indexOf(hexNumber.charAt(1).toUpperCase()));
}

function hex2RGB(colorString, RGB) {
	RGB.r = decimalize(colorString.substring(1, 3));
	RGB.g = decimalize(colorString.substring(3, 5));
	RGB.b = decimalize(colorString.substring(5, 7));
}

function RGB2hex(RGB) {
	var hex = "";
	if (typeof RGB == "string" && RGB.indexOf(",") > -1) {
		var parts = RGB.split(",");
		if (parts.length == 3) {
			var parsedRGB = {
				r: (parts[0].split("(")[1]).replace(" ", ""),
				g: parts[1].replace(" ", ""),
				b: (parts[2].split(")")[0]).replace(" ", "")
			};
			return RGB2hex(parsedRGB);
		}
	} else {
		hex = "#" + hexify(RGB.r) + hexify(RGB.g) + hexify(RGB.b);
	}
	return hex;
}

function rgbChange() {
	var RGB = new RGBobject(rValue, gValue, bValue);
	var HSV = new HSVobject(hValue, sValue, vValue);
	RGB.validate();
	RGB2HSV(RGB, HSV);
	var newHexColor = RGB2hex(RGB);
	webMI.trigger.fire("setValue", newHexColor, "hexvalue");
}

function hsvChange() {
	var RGB = new RGBobject(rValue, gValue, bValue);
	var HSV = new HSVobject(hValue, sValue, vValue);
	HSV.validate();
	HSV2RGB(HSV, RGB);
	var newHexColor = RGB2hex(RGB);
	if (updateHexColor)
		webMI.trigger.fire("setValue", newHexColor, "hexvalue");
}

function hexChange() {
	var colorString = hexColor;
	var RGB = new RGBobject(0, 0, 0);
	var HSV = new HSVobject(0, 0, 0);
	hex2RGB(colorString, RGB);
	RGB2HSV(RGB, HSV);
	rValue = Math.round(RGB.r);
	gValue = Math.round(RGB.g);
	bValue = Math.round(RGB.b);
	hValue = Math.round(HSV.h);
	sValue = Math.round(HSV.s);
	vValue = Math.round(HSV.v);
	updateValues();
}

function RGB2HSV(RGB, HSV) {
	r = RGB.r / 255;
	g = RGB.g / 255;
	b = RGB.b / 255; // Scale to unity.

	var minVal = Math.min(r, g, b);
	var maxVal = Math.max(r, g, b);
	var delta = maxVal - minVal;

	HSV.v = maxVal;

	if (delta == 0) {
		HSV.h = 0;
		HSV.s = 0;
	} else {
		HSV.s = delta / maxVal;
		var del_R = (((maxVal - r) / 6) + (delta / 2)) / delta;
		var del_G = (((maxVal - g) / 6) + (delta / 2)) / delta;
		var del_B = (((maxVal - b) / 6) + (delta / 2)) / delta;

		if (r == maxVal) {
			HSV.h = del_B - del_G;
		}
		else if (g == maxVal) {
			HSV.h = (1 / 3) + del_R - del_B;
		}
		else if (b == maxVal) {
			HSV.h = (2 / 3) + del_G - del_R;
		}

		if (HSV.h < 0) {
			HSV.h += 1;
		}
		if (HSV.h > 1) {
			HSV.h -= 1;
		}
	}
	HSV.h *= 360;
	HSV.s *= 100;
	HSV.v *= 100;
}

function HSV2RGB(HSV, RGB) {
	var h = HSV.h / 360;
	var s = HSV.s / 100;
	var v = HSV.v / 100;
	if (s == 0) {
		RGB.r = v * 255;
		RGB.g = v * 255;
		RGB.b = v * 255;
	} else {
		var_h = h * 6;
		var_i = Math.floor(var_h);
		var_1 = v * (1 - s);
		var_2 = v * (1 - s * (var_h - var_i));
		var_3 = v * (1 - s * (1 - (var_h - var_i)));

		if (var_i == 0) {
			var_r = v;
			var_g = var_3;
			var_b = var_1
		}
		else if (var_i == 1) {
			var_r = var_2;
			var_g = v;
			var_b = var_1
		}
		else if (var_i == 2) {
			var_r = var_1;
			var_g = v;
			var_b = var_3
		}
		else if (var_i == 3) {
			var_r = var_1;
			var_g = var_2;
			var_b = v
		}
		else if (var_i == 4) {
			var_r = var_3;
			var_g = var_1;
			var_b = v
		}
		else {
			var_r = v;
			var_g = var_1;
			var_b = var_2
		}
		;

		RGB.r = var_r * 255;
		RGB.g = var_g * 255;
		RGB.b = var_b * 255;
	}
}

function addEvent(id) {
	webMI.addEvent(id, "click", function (e) {
		var newHexColor = RGB2hex(webMI.gfx.getFill(id));
		webMI.trigger.fire("setValue", newHexColor, "hexvalue");
	});
};


/**
 * TRIGGER SECTION
 */
webMI.trigger.connect("valuechanged", function (e) {
	rValue = e.value;
	if (updateHexColor)
		rgbChange();
}, "rvalue");

webMI.trigger.connect("valuechanged", function (e) {
	gValue = e.value;
	if (updateHexColor)
		rgbChange();
}, "gvalue");

webMI.trigger.connect("valuechanged", function (e) {
	bValue = e.value;
	if (updateHexColor)
		rgbChange();
}, "bvalue");

webMI.trigger.connect("valuechanged", function (e) {
	hValue = e.value;
	if (updateHexColor)
		hsvChange();
}, "hvalue");

webMI.trigger.connect("valuechanged", function (e) {
	sValue = e.value;
	if (updateHexColor)
		hsvChange();
}, "svalue");

webMI.trigger.connect("valuechanged", function (e) {
	vValue = e.value;
	if (updateHexColor)
		hsvChange();
}, "vvalue");

webMI.trigger.connect("valuechanged", function (e) {
	aValue = e.value;
	updatePreview();
}, "avalue");

webMI.trigger.connect("valuechanged", function (e) {
	var newHexColor;
	if (e.value.indexOf("#") < 0) {
		newHexColor = "#" + e.value;
	} else {
		newHexColor = e.value;
	}

	if(newHexColor != hexColor || initHexColor){
		initHexColor = false;
		hexColor = newHexColor;
		hexChange();
	}

	webMI.gfx.setFill("preview", hexColor);
}, "hexvalue");

webMI.trigger.connect("clicked", function (e) {
	var id = "id_18";
	var value = true;
	return function (value) {
		if ("name" in webMI.query) {
			webMI.trigger.fire("valuechanged_" + webMI.query.name, {
				hex: hexColor,
				r: rValue,
				g: gValue,
				b: bValue,
				h: hValue,
				s: sValue,
				v: vValue,
				a: aValue
			});
		}

		webMI.display.closeWindow();
	}(value);
}, "id_18");]]></code>
</script>