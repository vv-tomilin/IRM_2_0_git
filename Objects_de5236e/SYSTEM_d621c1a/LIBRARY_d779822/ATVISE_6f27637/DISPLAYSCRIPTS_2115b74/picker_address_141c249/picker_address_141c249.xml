<?xml version="1.0" encoding="UTF-8"?>
<script>
  <metadata>
    <priority>0</priority>
  </metadata>
  <code><![CDATA[/**
 * Code for the picker_address object display
 * ------------------------------------------
 * This control allows you to select a node.
 * In addition the trigger "valuechanged" will be fired.
 * An additional border indicates the current value's negative state or an additionally defined alarm. The colors and blinking intervals are defined in global lists.
 */


/**
 * DECLARATION SECTION
 */

var isTouch = (navigator.userAgent.indexOf("Mobi") > -1);

var useSVGKeyboard = webMI.callExtension("SYSTEM.LIBRARY.ATVISE.QUICKDYNAMICS.Configuration", {"action":"existsIndexParameter", "parameterName":"useSVGKeyboard"});
if(useSVGKeyboard == "true") {
	isTouch = true;
}

var base = typeof webMI.query["base"] == "undefined" ? "" : webMI.query["base"];
var baseNode = typeof webMI.query["baseNode"] == "undefined" ? "" : webMI.query["baseNode"];
var inputFill = typeof webMI.query["fill"] != "undefined" ? webMI.query["fill"] : webMI.query["inputFill"];
var buttonFill = typeof webMI.query["fillColor"] != "undefined" ? webMI.query["fillColor"] : webMI.query["buttonFill"];
var fillColorInactive = typeof webMI.query["inputFillInactive"] != "undefined" ? webMI.query["inputFillInactive"] : webMI.query["fillColorInactive"];
var strokeFillPressed = webMI.query["strokePressed"];
var focusStrokeColor = webMI.query["focusStrokeColor"];
var contextFill = typeof webMI.query["contextFill"] == "undefined" ? "#ffffff" : webMI.query["contextFill"];
var contextFontColor = webMI.query["contextFontColor"] == undefined ? "#000000" : webMI.query["contextFontColor"];
var contextStroke = typeof webMI.query["contextStroke"] == "undefined" ? "#000000" : webMI.query["contextStroke"];
var contextStrokeWidth = typeof webMI.query["contextStrokeWidth"] == "undefined" ? 2 : parseInt(webMI.query["contextStrokeWidth"]);
var contextHoverColor = webMI.query["contextHoverColor"] == undefined ? "#efefef" : webMI.query["contextHoverColor"];
var contextFontColorHover = typeof webMI.query["context_menu_font_color_hover"] == "undefined" ? contextFontColor : webMI.query["context_menu_font_color_hover"];
var onDemand = webMI.query["onDemand"] == "No" ? "0" : "1";
var itemsCount = webMI.query["itemsCount"];
var right = typeof webMI.query["right"] == "undefined" ? "" : webMI.query["right"];
var consistencyGroup = webMI.query["consistencyGroup"];
var alarmToSubscribe = webMI.query["alarm"];
var alarmIndication = webMI.query["alarmIndication"];
var statusEnabled = webMI.query["statusEnabled"];
var statusTrigger = webMI.query["statusTrigger"];
var statusIndication = webMI.query["statusIndication"];
var tabIndex = (webMI.query["tabIndex"] == undefined) ? "" : webMI.query["tabIndex"];
var tooltip = (webMI.query["tooltip"] == undefined) ? "" : webMI.query["tooltip"];
var activeValue = (webMI.query["activeValue"] == undefined) ? "" :webMI.query["activeValue"];
var activeNode = (webMI.query["activeNode"] == undefined) ? "" : webMI.query["activeNode"];
var showBaseVariables = webMI.query["showBaseVariables"];
var showObjects = webMI.query["showObjects"];
var showDisplays = webMI.query["showDisplays"];
var showArchives = webMI.query["showArchives"];
var showAlarms = webMI.query["showAlarms"];
var showVariableTypes = webMI.query["showVariableTypes"];
var keyboard = webMI.query["keyboard"];

var contextMenuStyle = {};
if (typeof webMI.query["context_menu_font_family"] != "undefined") contextMenuStyle.fontFamily = webMI.query["context_menu_font_family"];
if (typeof webMI.query["context_menu_font_size"] != "undefined") contextMenuStyle.fontSize = parseInt(webMI.query["context_menu_font_size"]);
if (typeof webMI.query["contextMenuTextAlignment"] != "undefined") contextMenuStyle.showType = webMI.query["contextMenuTextAlignment"];
contextMenuStyle.fontFill = contextFontColor;
contextMenuStyle.fill = contextFill;
contextMenuStyle.stroke = contextStroke;
contextMenuStyle.strokeWidth = contextStrokeWidth;
contextMenuStyle.hoverFill = contextHoverColor;
contextMenuStyle.hoverFontFill = contextFontColorHover;

var myWidth = 160;
var active = false;
var curValue = "";
var hasBrowseNodes = webMI.getMethodSupport().indexOf("BrowseNodes") !== -1;
var isSetActive = true; //isSetActive is set by the com.atvise.setActive trigger


var isIOSDevice = /(iPod|iPhone|iPad)/.test(navigator.userAgent);
var storedEvent = { keyCode: null, shiftKey: false };
var foreignObject;
var inputActive = false;
var inputFO = webMI.dom.createElement("http://www.w3.org/1999/xhtml", "input");
inputFO.type = "text";
inputFO.id = "html_input_" + document.getElementById("addresspicker_input_clickarea").id;
inputFO.style.width = "100%";
inputFO.style.height = "100%";
inputFO.style.borderWidth = "0px";
inputFO.style.boxSizing = "border-box";
inputFO.style.padding = "0px 5px 0px 0px";
inputFO.style.textAlign = "right";
inputFO.style.color = webMI.query["fontColor"];
inputFO.style.fontFamily = webMI.query["fontFamily"];
inputFO.style.fontSize = parseFloat(webMI.query["fontSize"]) + "px";


var isActivationNodeSet = activeNode != "" && String(activeValue) != "";

/**
 * RUNTIME SECTION
 */

var rightsHandlingProperties = {
	right: right,
	checkBaseNodeWriteRight: true,
	isActivationNodeSet: isActivationNodeSet,
	notifierConfiguration: {"id":"addresspicker_stroke", "node_1": webMI.query["base"], "right_1": "read", "node_2": webMI.query["alarm"], "right_2": "readEvent"},
	setActiveTrigger: true,
	handleStatus: true
};

if (typeof rightsHandling === "function") rightsHandling(rightsHandlingProperties);

if (baseNode) {
	if (consistencyGroup) {
		var consistencyHandler = webMI.callExtension("SYSTEM.LIBRARY.ATVISE.QUICKDYNAMICS.Consistency Handler");
		consistencyHandler.register(consistencyGroup, baseNode, updateDisplayValue);
	} else {
		webMI.data.subscribe(baseNode, function(e) {
			updateDisplayValue(e.value);
			if (typeof e.status != "undefined" && typeof handleStatus === "function") 
				handleStatus(e.status);
		});
	}
}

var tabHandler = webMI.callExtension("SYSTEM.LIBRARY.ATVISE.QUICKDYNAMICS.Tab Handler");

if (tooltip != "") {
	webMI.callExtension("SYSTEM.LIBRARY.ATVISE.QUICKDYNAMICS.Tooltip", {"auto":"true", "id":"addresspicker_clickarea", "text":tooltip});
	webMI.callExtension("SYSTEM.LIBRARY.ATVISE.QUICKDYNAMICS.Tooltip", {"auto":"true", "id":"addresspicker_input_clickarea", "text":tooltip});
}

if (alarmToSubscribe != "") 
	initAlarm(alarmToSubscribe);

//mobile safari is not triggering blur event on a svg button click
if (isIOSDevice) {
	window.window.addEventListener("touchstart", touchstartHandler);
}

inputFO.onblur = blurHandler;

webMI.addOnload(function() {
	var doc = document.getElementById("addresspicker_clickarea").ownerDocument;
	tabHandler.register(tabIndex, keyHandler, doc);
});

if (!hasBrowseNodes) {
	webMI.gfx.setVisible("id_1", false);
}

/**
 * FUNCTION SECTION
 */

function setActiveLayout() {
	webMI.gfx.setFill("addresspicker_bg", inputFill);
	webMI.gfx.setFill("button_bg", buttonFill);
}

function setInactiveLayout() {
	webMI.gfx.setFill("addresspicker_bg", fillColorInactive);
	webMI.gfx.setFill("button_bg", fillColorInactive);
}

function updateDisplayValue(value) {
	webMI.trigger.fire("valuechanged", value, "");
	if (value.indexOf(base) > -1) 
		value = value.substring(value.indexOf(base) + base.length + 1);
	webMI.gfx.setText("input_label", value);
	curValue = value;
}

function updateNodeValue(value) {
	if (consistencyGroup) {
		consistencyHandler.set(consistencyGroup, baseNode, value);
		updateDisplayValue(value);
	} else {
		webMI.data.write(baseNode, value);
	}
}

// moeglichkeit ueber parameter nur "historisierte" Datenpunkte einzuschraenkeN!?!
function createMenuFromAdress(startAddress, callback) {
	var types = ["i=61"];
	if (showBaseVariables == "Yes") types.push("i=62");
	if (showObjects == "Yes") types.push("ObjectTypes.PROJECT");
	if (showDisplays == "Yes") types.push("VariableTypes.ATVISE.Display");
	if (showArchives == "Yes") types.push("ns=1;s=ObjectTypes.ATVISE.ArchiveGroup.Data");
	if (showAlarms == "Yes") types.push("ns=1;s=ObjectTypes.ATVISE.Alarm");
	if (showVariableTypes == "Yes") types.push("VariableTypes.PROJECT");

	webMI.data.call("BrowseNodes", { startAddress: startAddress, endLevel: onDemand, vTypes: types, mapping: ["name:nodeid:splitnamespace", "text:browsename"] }, function(e) {
		var nodes = e;
		if (nodes == null) return;
		function getFn(value) {
			return function(e) {
				if (baseNode) {
					updateNodeValue(value);
				} else {
					updateDisplayValue(value);
				}
			};
		};
		var menuObj = {};
		if (startAddress == base) 
			menuObj["none"] = { text: "[none]", value: getFn("") };
		function translateMenu(submenuObj, subnodes) {
			for (i in subnodes){
				if (typeof subnodes[i]["name"] == "undefined") continue;
				submenuObj[i] = {};
				submenuObj[i]["text"] = subnodes[i]["text"];
				submenuObj[i]["value"] = getFn(subnodes[i]["name"]);
				submenuObj[i]["address"] = subnodes[i]["address"];
				if (typeof subnodes[i]["childs"] == "undefined" || subnodes[i]["childs"] == null) continue;
				else if (typeof subnodes[i]["childs"] == "object") {
					submenuObj[i]["sub"] = {};
					translateMenu(submenuObj[i]["sub"], subnodes[i]["childs"]);
				} else if (typeof subnodes[i]["childs"] == "string") {
					submenuObj[i]["sub"] = function(address,callback){return createMenuFromAdress(address,callback)};
					submenuObj[i]["base"] = subnodes[i]["name"];
				}
			}
			// Check if two Portal DB spaces exist
			var dbspaces = {};
			for (var propertyText in submenuObj) {
				if (!isNaN((propertyText.substr(0, propertyText.indexOf('.'))))) dbspaces[(propertyText.substr(0, propertyText.indexOf('.')))] = true;
			}

			if (Object.keys(dbspaces).length > 1) {
				for (var propertyText in submenuObj) {
					if (typeof submenuObj[propertyText].address != "undefined") {
						submenuObj[propertyText].text = submenuObj[propertyText].address;
						submenuObj[propertyText].value = getFn(submenuObj[propertyText].address);
					}
				}
			}
		}
		translateMenu(menuObj, nodes);
		if (typeof callback == "function") callback(menuObj);
	});
}

function focusTH() {
	if (active) {
		webMI.gfx.setStroke("focus_frame", focusStrokeColor);
	}
}

function blurTH() {
	if (active) {
		backTH();
		webMI.gfx.setStroke("focus_frame", "none");
	}
}

function applyTH() {
	webMI.callExtension("SYSTEM.LIBRARY.ATVISE.QUICKDYNAMICS.Open Context Menu", {
		"id":"addresspicker_clickarea",
		menuObj: function(callback) {
			createMenuFromAdress(base, callback);
		},
		"outputNode":null,
		"x":0,
		"y":30,
		minWidth: myWidth,
		onEvent: "immediately",
		active: function() {
			return (active);
		},
		"itemsCount": itemsCount,
		"style": contextMenuStyle
	});
}

function getDisplayParameters() {
	var communicationID = new Date().getTime().toString();
	webMI.trigger.connect(communicationID, function(e) {
		if (baseNode) {
			updateNodeValue(e.value);
		} else {
			updateDisplayValue(e.value);
		}
	});

	var passObj = {
		"trigger" : communicationID
	};
	return passObj;
}

function applyTH2() {
	if (active) {
		backTH();
		var tmp = null;
		if (useSVGKeyboard) {
			var keyboardParam = getDisplayParameters();
			webMI.display.openWindow({
				display: keyboard,
				extern: false,
				height: 300,
				menubar: false,
				modal: true,
				movable: true,
				resizable: false,
				scrollbars: false,
				status: false,
				title: "T{Keyboard}",
				toolbar: false,
				width: 700,
				query: keyboardParam
			});
		} else {
			switchToInputMode();
		}
	}
}

function backTH() {
	webMI.callExtension("SYSTEM.LIBRARY.ATVISE.QUICKDYNAMICS.Open Context Menu", {
		id: "",
		onEvent: "immediately"
	});
}

function arrowTH(dir) {
}

function keyHandler(keyTH, param2) {
	if (keyTH == "focus") {
		focusTH();
	} else if (keyTH == "blur") {
		blurTH();
	} else if (keyTH == "apply") {
		applyTH2();
	} else if (keyTH == "space") {
		applyTH();
	} else if (keyTH == "back") {
		backTH();
	} else if (keyTH == "arrow") {
		arrowTH(param2);
	} else if (keyTH == "isActive") {
		return active && param2(document.getElementById("addresspicker_clickarea").parentNode);
	}
}

function stopPropagation(event) {
	/*
	 * If the ALT key is pressed together with one or more other keys on
	 * Firefox (only Windows), there will be no keyup event when the ALT
	 * key gets released. Since the ALT key is being used for paning in
	 * atvise visualization, we have to make sure that key listeners in the
	 * global document do not get triggered if someone is currently entering
	 * something in the inputFO (like "someone@example.com").
	 **/
	if (event.altKey) {
		if (event.stopPropagation) 
			event.stopPropagation();
		else 
			event.cancelBubble = true;
	}
}

function touchstartHandler(e) {
	if (e.target !== inputFO && inputActive) {
		blurHandler();
	}
}

function blurHandler() {
	switchToOutputMode();
	tabHandler.setAcceptKeys(true);

	if (storedEvent["keyCode"] != null) {
		if (storedEvent["shiftKey"] && storedEvent["keyCode"] == "9") 
			tabHandler.prevTab();
		else if (storedEvent["keyCode"] == "9") 
			tabHandler.nextTab();
	}

	if (storedEvent["keyCode"] != "27") {
		//workaround: setTimeout for Chrome crash error (clicking out from the input field or clicking enter while holding a button pressed).
		setTimeout(function() {
			var value = inputFO.value;
			if (value !== undefined) {
				if (baseNode) {
					updateNodeValue(value);
				} else {
					updateDisplayValue(value);
				}
			}
		}, 0);
	}

	storedEvent["keyCode"] = null;
}

function switchToInputMode() {
	tabHandler.setAcceptKeys(false);
	inputFO.value = curValue;
	webMI.gfx.setVisible("input_clickarea", false);

	var inputElement = document.getElementById("input_element");
	foreignObject = webMI.gfx.addForeignObject({ x: 0, y: 0, width: 160, height: 30, id: "input_fo", childNodes: [inputFO] }, inputElement);
	foreignObject.style.outline = "black 2px solid";
	foreignObject.style.outlineOffset = "-2px";
	foreignObject.style.width = foreignObject.style.width.replace("px", "") - 30 + "px";
	inputFO.focus();
	inputActive = true;
}

function switchToOutputMode() {
	if (inputActive) {
		inputActive = false;
		webMI.gfx.setVisible("input_clickarea", true);

		if (foreignObject) {
			webMI.gfx.removeForeignObject(foreignObject);
			foreignObject = undefined;
		}
	}
}

/**
 * EVENT SECTION
 */

webMI.addEvent("addresspicker_input_clickarea", "click", function(e) {
	var id = "addresspicker_input_clickarea";
	var value = true;
	return (function(value) {
		if (active) {
			tabHandler.setCurrentIndex(keyHandler);
			var tmp = null;
			if (useSVGKeyboard) {
				var keyboardParam = getDisplayParameters();
				webMI.display.openWindow({
					display: keyboard,
					extern: false,
					height: 300,
					menubar: false,
					modal: true,
					movable: true,
					resizable: false,
					scrollbars: false,
					status: false,
					title: "T{Keyboard}",
					toolbar: false,
					width: 700,
					query: keyboardParam
				});
			} else {
				switchToInputMode();
			}
		}
	})(value);
});


webMI.addEvent(inputFO, "keyup", stopPropagation);
	
webMI.addEvent(inputFO, "keydown", function(e) {
	var keyCode = e.keyCode;
	if (/MSIE/.test(navigator.userAgent)) {
		storedEvent["keyCode"] = e.keyCode;
		storedEvent["shiftKey"] = e.shiftKey;
	}
	if (keyCode == "13" || keyCode == "9") {
		inputFO.blur();
		if (keyCode == "13")
			tabHandler.setAcceptKeysPrevent(true);
	} else if (keyCode == "27") {
		storedEvent["keyCode"] = "27";
		tabHandler.setAcceptKeysPrevent(true);
		inputFO.blur();
	}
	
	stopPropagation(e);
});


if (hasBrowseNodes) {
	webMI.addEvent("addresspicker_clickarea", ["click", "touchstart"], function(e) {
		webMI.callExtension("SYSTEM.LIBRARY.ATVISE.QUICKDYNAMICS.Open Context Menu", {
			"id": "addresspicker_clickarea",
			menuObj: function(callback) {
				createMenuFromAdress(base, callback);
			},
			"outputNode":null,
			"x":0,
			"y":30,
			minWidth: myWidth,
			onEvent: "immediately",
			active: function() {
				return (active);
			},
			"itemsCount": itemsCount,
			"style": contextMenuStyle
		});
	});

	webMI.addEvent("addresspicker_clickarea", "mousedown", function(e) {
		var id = "addresspicker_clickarea";
		var value = true;
		return function(value) {
			if (active) {
				tabHandler.setCurrentIndex(keyHandler);
				webMI.gfx.setStroke("button_stroke", strokeFillPressed);
				webMI.gfx.setStroke("focus_frame", strokeFillPressed);
				webMI.gfx.setFill("button_bg", "url(#linear_2)");
			}
		} (value);
	});

	webMI.addEvent("addresspicker_clickarea", ["mouseup", "mouseout"], function(e) {
		var id = "addresspicker_clickarea";
		var value = true;
		return function(value) {
			if (active) {
				webMI.gfx.setStroke("button_stroke", "none");
				webMI.gfx.setStroke("focus_frame", "none");
				webMI.gfx.setFill("button_bg", "none");
			}
		} (value);
	});

	webMI.addEvent("addresspicker_clickarea", "dragstart", function(e) {
		if (e.preventDefault) {
			e.preventDefault();
		}
	});
}

/**
 * TRIGGER SECTION
 */

webMI.trigger.connect("setValue", function(e) {
		if (baseNode) {
			updateNodeValue(e.value);
		} else {
			updateDisplayValue(e.value);
		}
}, "");]]></code>
</script>
