<?xml version="1.0" encoding="UTF-8"?>
<script>
	<metadata>
		<priority>0</priority>
	</metadata>
	<code><![CDATA[/**
 * Code for the button_switch_language object display
 * --------------------------------------------------
 * This control switches the different languages that are defined in the system.
 */


/**
 * DECLARATION SECTION
 */

var strokeNormal = "none";
var strokePressed = webMI.query["strokePressed"];
var display = webMI.query["display"];
var active = true;
var x = 45;
var y = 0;
var symbolScaling = parseInt(webMI.query["symbolScaling"], 10);
var context_menu_style = webMI.query["contextMenuStyle"];
var context_menu_font_family = webMI.query["context_menu_font_family"];
var context_menu_font_color = webMI.query["context_menu_font_color"];
var context_menu_font_size = webMI.query["context_menu_font_size"];
var context_menu_fill_color = webMI.query["context_menu_fill_color"];
var context_menu_hover_color = webMI.query["context_menu_hover_color"];
var context_menu_text_alignment = webMI.query["context_menu_text_alignment"];
var context_menu_items_count = webMI.query["context_menu_items_count"];
var isOldStyle = typeof webMI.query["symbolScaling"] == "undefined";

/**
 * RUNTIME SECTION
 */

if (!isOldStyle) {

	var contextMenuStyle = {};
	contextMenuStyle.maxRows = 10;
	contextMenuStyle.width = 140;
	contextMenuStyle.stroke = "#d7d7d7";
	contextMenuStyle.strokeWidth = 1;
	contextMenuStyle.closeTime = 0;
	contextMenuStyle.zIndex = 100;
	contextMenuStyle.showType = "right";

	if (context_menu_style) {
		var queryContextMenuStyle = JSON.parse(context_menu_style);
		Object.assign(contextMenuStyle,queryContextMenuStyle);
	}
	if (context_menu_font_family) {
		contextMenuStyle["fontFamily"] = context_menu_font_family;
	}
	if (context_menu_font_family) {
		contextMenuStyle["fontFill"] = context_menu_font_family;
	}
	if (context_menu_font_size) {
		contextMenuStyle["fontSize"] = parseInt(context_menu_font_size, 10);
	}
	if (context_menu_fill_color) {
		contextMenuStyle["fill"] = context_menu_fill_color;
	}
	if (context_menu_hover_color) {
		contextMenuStyle["hoverFill"] = context_menu_hover_color;
	}
	if (context_menu_text_alignment) {
		contextMenuStyle["showType"] = context_menu_text_alignment;
	}

	if (contextMenuStyle.x) x = contextMenuStyle.x;
	if (contextMenuStyle.y) y = contextMenuStyle.y;

	webMI.addOnload(function() {
		/* set and scale icon position */
		var FRAME = {};
		FRAME.element = document.getElementById("id_0");
		FRAME.height = parseInt(FRAME.element.getAttribute("height"));
		FRAME.width = parseInt(FRAME.element.getAttribute("width"));

		var SYMBOL = {};
		SYMBOL.element = document.getElementById("button_clickarea").parentNode;
		SYMBOL.height = parseInt(SYMBOL.element.getAttribute("height"));
		SYMBOL.width = parseInt(SYMBOL.element.getAttribute("width"));

		if (symbolScaling != 0 && symbolScaling != 100) {
			var scale = {};
			scale.x = FRAME.width / SYMBOL.width;
			scale.y = FRAME.height / SYMBOL.height;
			scale.value = symbolScaling / 100;
		
			var offset = {};
			offset.x = 20 * (scale.x - scale.value) / 2;
			offset.y = 20 * (scale.y - scale.value) / 2;
		
			var icon = document.getElementById("button_symbol");
			icon.setAttribute("viewBox", "0,0,20,20");
			icon.setAttribute("x", 4.694 * scale.x + offset.x);
			icon.setAttribute("y", 4.694 * scale.y + offset.y);
			icon.setAttribute("width", 20 * scale.value);
			icon.setAttribute("height", 20 * scale.value);
		}
	});

}

var menuObj = {};
menuObj["languagemenu"] = "languagemenu";
var contextMenuParameters = {
	"id": "button_clickarea",
	menuObj: menuObj,
	"outputNode": null,
	"x": x,
	"y": y,
	onEvent: "click"
};

if (contextMenuStyle && contextMenuStyle.width) {
	contextMenuParameters.minWidth = contextMenuStyle.width;
}

if (context_menu_items_count) {
	contextMenuStyle["itemsCount"] = context_menu_items_count;
}
contextMenuParameters.style = contextMenuStyle;

webMI.callExtension("SYSTEM.LIBRARY.ATVISE.QUICKDYNAMICS.Open Context Menu", contextMenuParameters);

/**
 * FUNCTION SECTION
 */

function release() {
	if (active) {
		webMI.gfx.setFill("button_stroke", "url(#linear_1)");
		if (isOldStyle) {
			webMI.gfx.setStroke("button_stroke", strokeNormal);
			webMI.gfx.setStrokeWidth("button_stroke", "1");
		}
		webMI.gfx.setVisible("button_symbol", true);
		webMI.gfx.setVisible("button_symbol_pressed", false);
	}
}

/**
 * EVENT SECTION
 */

webMI.addEvent("button_clickarea", "mousedown", function(e) {
	var id = "button_clickarea";
	var value = true;
	return function(value) {
		if (active) {
			webMI.gfx.setFill("button_stroke", "url(#linear_2)");
			if (isOldStyle) {
				webMI.gfx.setStroke("button_stroke", strokePressed);
				webMI.gfx.setStrokeWidth("button_stroke", "1");
			}
			webMI.gfx.setVisible("button_symbol", false);
			webMI.gfx.setVisible("button_symbol_pressed", true);
		}
	} (value);
});

webMI.addEvent("button_clickarea", "mouseup", function(e) {
	var id = "button_clickarea";
	var value = true;
	return function(value) {
		release();
	} (value);
});

webMI.addEvent("button_clickarea", "mouseout", function(e) {
	var id = "button_clickarea";
	var value = true;
	return function(value) {
		release();
	} (value);
});

webMI.addEvent("button_clickarea", "dragstart", function(e) {
	if (e.preventDefault) {
		e.preventDefault();
	}
});]]></code>
</script>