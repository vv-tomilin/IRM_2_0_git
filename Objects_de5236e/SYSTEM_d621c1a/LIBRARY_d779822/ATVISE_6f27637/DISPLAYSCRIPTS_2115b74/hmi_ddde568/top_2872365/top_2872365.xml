<?xml version="1.0" encoding="UTF-8"?>
<script>
  <metadata>
    <priority>0</priority>
  </metadata>
  <code><![CDATA[/**
 * Code for the top object display
 * -------------------------------
 * This control is used as the top frame by default (You can find the reference to it on the "Default" display).
 * It's a collection of the most important controls (display main menu, alarm handling, login and language buttons...).
 */


/**
 * DECLARATION SECTION
 */

var redundancy_warning_dialog = webMI.query["redundancy_warning_dialog"];
var tabHandler = webMI.callExtension("SYSTEM.LIBRARY.ATVISE.QUICKDYNAMICS.Tab Handler");
var reduinfoInitialized = false;
var isTop800 = typeof webMI.gfx.getX("title") == "undefined";
var logoClickarea = isTop800 ? "logo_clickarea" : "atvise_logo";

/**
 * RUNTIME SECTION
 */

if (!isTop800) {
	webMI.addOnload(function() {
		updateTime();
		var updateDateTime = setInterval( function() { updateTime(); },60000);
	});
}

/**
 * FUNCTION SECTION
 */

function updateTime() {
	var time = new Date();
	webMI.gfx.setText("date_label", webMI.sprintf("%02d",time.getDate()) + "." + webMI.sprintf("%02d",time.getMonth()+1) + "." + time.getFullYear());
	webMI.gfx.setText("time_label", webMI.sprintf("%02d",time.getHours()) + ":" + webMI.sprintf("%02d",time.getMinutes()));
}

function getStatusTranslation(text) {
	var statustext;
	switch(text) {
		case "Active":
			statustext = "T{Active}";
			break;
		case "Passive":
			statustext = "T{Passive}";
			break;
		case "SOP":
			statustext = "T{SOP}";
			break;
		case "SNOP":
			statustext = "T{SNOP}";
			break;
		default:
			statustext = text;
	}

	return statustext;
}

/**
 * EVENT SECTION
 */

webMI.addEvent(logoClickarea, "click", function(e) {
	var value = true;
	return function(value) {
		var names = tabHandler.getParentIFrameNames();
		for (var i=0;i<names.length;i++){
			var NN;
			webMI.trigger.fire("com.atvise.getDefaultDisplay_"+(NN=names[i]),function(display,url){
				if (url != undefined)
					webMI.display.openUrl(url, webMI.query,NN);
				else if (display != undefined)
					webMI.display.openDisplay(display, webMI.query,NN);
			});
		}
	} (value);
});

webMI.addEvent(webMI.data, "clientvariableschange", function(e) {
	webMI.gfx.setText("username_label", (e.username) ? e.username : "");
});

webMI.addOnload(function() {
	webMI.addEvent(webMI.data, "serverstatechange", function() {
		if (reduinfoInitialized)
			return;
	
		reduinfoInitialized = true;
		webMI.callExtension("SYSTEM.LIBRARY.ATVISE.QUICKDYNAMICS.Redundancy PopUp", {"display": redundancy_warning_dialog});
		webMI.gfx.setVisible("redu_info", null);
		webMI.data.subscribe("AGENT.REDUNDANCY.role", function(e) {
			webMI.gfx.setText("redu_role", e.value.charAt(0));
		});
	
		webMI.data.subscribe("AGENT.REDUNDANCY.status", function(e) {
			e.value = getStatusTranslation(e.value);
			webMI.gfx.setText("redu_status", e.value);
		});
	});
});]]></code>
</script>
