<?xml version="1.0" encoding="UTF-8"?>
<script>
  <metadata>
    <priority>0</priority>
  </metadata>
  <code><![CDATA[/**
 * Code for the button object display
 * ----------------------------------
 * This control is a simple button which just fires the trigger "clicked".
 * This trigger can be used to add a Simple Dynamic to this button which reacts on the trigger "clicked" and fires a new trigger.
 * This new trigger can then be used by other elements.
 */


/**
 * DECLARATION SECTION
 */
 
var strokeNormal = "none";
var strokePressed = webMI.query["strokePressed"];
var extraBorderColor = webMI.query["extraBorderColor"];
var focusStrokeColor = webMI.query["focusStrokeColor"];
var fillColor = webMI.query["fillColor"];
var fillColorInactive = webMI.query["fillColorInactive"];
var display = webMI.query["display"];
var consistencyGroup = webMI.query["consistencyGroup"];
var consistencyFunction = webMI.query["consistencyFunction"];
var tabIndex = (webMI.query["tabIndex"] == undefined) ? "" : webMI.query["tabIndex"];
var tooltip = (webMI.query["tooltip"] == undefined) ? "" : webMI.query["tooltip"];
var right = (webMI.query["right"] == undefined) ? "" : webMI.query["right"];
var activeValue = (webMI.query["activeValue"] == undefined) ? "" : webMI.query["activeValue"];
var activeNode = (webMI.query["activeNode"] == undefined) ? "" : webMI.query["activeNode"];
var symbolScaling = parseInt(webMI.query["symbolScaling"],10);
var symbolId = document.getElementById("button_symbol").id;
var visibilityLabel = webMI.query["visibilityLabel"] !== "hidden";
var visibilitySymbol = webMI.query["visibilitySymbol"] != "hidden";
var active = false;
if (consistencyGroup)
	var consistencyHandler = webMI.callExtension("SYSTEM.LIBRARY.ATVISE.QUICKDYNAMICS.Consistency Handler");
var tabHandler = webMI.callExtension("SYSTEM.LIBRARY.ATVISE.QUICKDYNAMICS.Tab Handler");
if (typeof webMI.gfx.getX("button_label_2") != "undefined") {
	var label = webMI.query["label"];
	var label2 = webMI.query["label2"];
	var fontSize = webMI.query["fontSize"];
	var fontSize2 = webMI.query["fontSize2"];
	var fontWeight = webMI.query["fontWeight"];
	var fontWeight2 = webMI.query["fontWeight2"];
}
var isActivationNodeSet = activeNode != "" && String(activeValue) != "";

/**
 * RUNTIME SECTION
 */

var rightsHandlingProperties = {
	right: right,
	checkBaseNodeWriteRight: false,
	isActivationNodeSet: isActivationNodeSet,
	notifierConfiguration: {},
	setActiveTrigger: true,
	handleStatus: false
};

if (typeof rightsHandling === "function") rightsHandling(rightsHandlingProperties);

if (typeof webMI.gfx.getX("button_label_2") != "undefined") {
	/* calculation of visibility and positions due scaling && bindings */
	webMI.addOnload(function () {
		var FRAME = {};
		FRAME.element = document.getElementById("outer_frame");
		FRAME.height = parseInt(FRAME.element.getAttribute("height"));
		FRAME.width = parseInt(FRAME.element.getAttribute("width"));

		var BUTTON = {};
		BUTTON.element = document.getElementById("button_clickarea").parentNode;
		BUTTON.height = parseInt(BUTTON.element.getAttribute("height"));
		BUTTON.width = parseInt(BUTTON.element.getAttribute("width"));

		/* set text position */
		if (visibilityLabel) {
			var onlyLabel1 = (typeof label2 === "undefined" || label2 === "") && typeof label !== "undefined" && label !== "";
			var onlyLabel2 = (typeof label === "undefined" || label === "") && typeof label2 !== "undefined" && label2 !== "";
			var bothLabels = typeof label !== "undefined" && label !== "" && typeof label2 !== "undefined" && label2 !== "";

			var LABEL_1 = document.getElementById("button_label_1");
			var LABEL_2 = document.getElementById("button_label_2");

			var font1 = parseInt(fontSize);
			var font2 = parseInt(fontSize2);
			var space = Math.ceil((FRAME.height - font1 - font2) / 3);

			LABEL_1.setAttribute("y", space + font1 - 1);
			if (fontWeight == "bold") LABEL_1.setAttribute("font-weight", "bold");
			LABEL_2.setAttribute("y", FRAME.height - space - 1);
			if (fontWeight2 == "bold") LABEL_2.setAttribute("font-weight", "bold");
		}
		if (visibilityLabel && !visibilitySymbol) {
			if (onlyLabel1)	{
				webMI.gfx.setVisible("button_label_1", false);
				webMI.gfx.setVisible("button_label_2", false);
			}
			if (onlyLabel2) {
				webMI.gfx.setVisible("button_label", false);
				webMI.gfx.setVisible("button_label_1", false);
			}
			if (bothLabels) {
				webMI.gfx.setVisible("button_label", false);
				if (BUTTON.element.getAttribute("visibility") != "hidden") {
					webMI.gfx.setVisible("button_label_1", true);
					webMI.gfx.setVisible("button_label_2", true);
				}
			}
			webMI.gfx.setVisible("button_symbol", false);
			webMI.gfx.setVisible("button_symbol_top", false);
			webMI.gfx.setVisible("button_symbol_bottom", false);
		}
		if (!visibilityLabel && visibilitySymbol) {
			webMI.gfx.setVisible("button_label", false);
			webMI.gfx.setVisible("button_label_1", false);
			webMI.gfx.setVisible("button_label_2", false);
			webMI.gfx.setVisible("button_symbol_top", false);
			webMI.gfx.setVisible("button_symbol_bottom", false);
		}
		if (!visibilityLabel && !visibilitySymbol) {
			webMI.gfx.setVisible("button_label", false);
			webMI.gfx.setVisible("button_label_1", false);
			webMI.gfx.setVisible("button_label_2", false);
			webMI.gfx.setVisible("button_symbol", false);
			webMI.gfx.setVisible("button_symbol_top", false);
			webMI.gfx.setVisible("button_symbol_bottom", false);
		}
		if (visibilityLabel && visibilitySymbol) {
			if (onlyLabel1)	{
				webMI.gfx.setVisible("button_label", false);
				if (BUTTON.element.getAttribute("visibility") != "hidden") webMI.gfx.setVisible("button_label_1", true);
				webMI.gfx.setVisible("button_label_2", false);
				webMI.gfx.setVisible("button_symbol", false);
				webMI.gfx.setVisible("button_symbol_top", false);
			} else if (onlyLabel2) {
				webMI.gfx.setVisible("button_label", false);
				webMI.gfx.setVisible("button_label_1", false);
				if (BUTTON.element.getAttribute("visibility") != "hidden") webMI.gfx.setVisible("button_label_2", true);
				webMI.gfx.setVisible("button_symbol", false);
				webMI.gfx.setVisible("button_symbol_bottom", false);		
			} else if (bothLabels) {
				webMI.gfx.setVisible("button_label", false);
				if (BUTTON.element.getAttribute("visibility") != "hidden") {
					webMI.gfx.setVisible("button_label_1", true);
					webMI.gfx.setVisible("button_label_2", true);
				}
				webMI.gfx.setVisible("button_symbol_top", false);
				webMI.gfx.setVisible("button_symbol_bottom", false);		
			} else {
				webMI.gfx.setVisible("button_symbol_top", false);
				webMI.gfx.setVisible("button_symbol_bottom", false);
			}
		}

		/* set and scale icon position */
		if (symbolScaling != 0 && symbolScaling != 100) {
			var scale = {};
			scale.x = FRAME.width / BUTTON.width;
			scale.y = FRAME.height / BUTTON.height;
			scale.value = symbolScaling / 100;

			var offset = {};
			offset.x = 20 * (scale.x - scale.value) / 2;
			offset.y = 20 * (scale.y - scale.value) / 2;

			var icon = document.getElementById("button_symbol");
			icon.setAttribute("viewBox", "0,0,20,20");
			icon.setAttribute("x", 30 * scale.x + offset.x);
			icon.setAttribute("y", 5 * scale.y + offset.y);
			icon.setAttribute("width", 20 * scale.value);
			icon.setAttribute("height", 20 * scale.value);

			icon = document.getElementById("button_symbol_top");
			icon.setAttribute("viewBox", "0,0,20,20");
			icon.setAttribute("x", 56.5 * scale.x + offset.x);
			icon.setAttribute("y", 5 * scale.y + offset.y);
			icon.setAttribute("width", 20 * scale.value);
			icon.setAttribute("height", 20 * scale.value);

			icon = document.getElementById("button_symbol_bottom");
			icon.setAttribute("viewBox", "0,0,20,20");
			icon.setAttribute("x", 56.5 * scale.x + offset.x);
			icon.setAttribute("y", 26.3 * scale.y + offset.y);
			icon.setAttribute("width", 20 * scale.value);
			icon.setAttribute("height", 20 * scale.value);
		}
	});

}

if (typeof extraBorderColor != "undefined" && extraBorderColor != "none" && extraBorderColor != "") {
	webMI.gfx.setStroke("button_stroke", extraBorderColor);
}

webMI.addOnload(function() {
	var doc = document.getElementById("button_clickarea").ownerDocument;
	tabHandler.register(tabIndex, keyHandler, doc);
});

if (tooltip != "") {
	webMI.callExtension("SYSTEM.LIBRARY.ATVISE.QUICKDYNAMICS.Tooltip", {
		"auto": "true",
		"id": "button_clickarea",
		"text": tooltip
	});
}

/**
 * FUNCTION SECTION
 */

function setActiveLayout() {
	webMI.gfx.setFill("button_bg", fillColor);
	webMI.gfx.setVisible("button_stroke", null);
}

function setInactiveLayout() {
	webMI.gfx.setFill("button_bg", fillColorInactive);
	webMI.gfx.setVisible("button_stroke", false);
}

function release() {
	if (active) {
		webMI.gfx.setFill("button_stroke", "url(#linear_1)");	
		if (typeof extraBorderColor == "undefined" || extraBorderColor == "none" || extraBorderColor == "") {
			webMI.gfx.setStroke("button_stroke", strokeNormal);
		} else {
			webMI.gfx.setStroke("button_stroke", extraBorderColor);
			webMI.gfx.setStrokeWidth("button_stroke", 1);
		}
	}
}

function focusTH() {
	if (active) {
		webMI.gfx.setStroke("button_stroke", focusStrokeColor);
		if (typeof extraBorderColor != "undefined" && extraBorderColor != "none" && extraBorderColor != "") {
			webMI.gfx.setStrokeWidth("button_stroke", 2);
		}
	}
}

function applyTH() {
	if (active) {
		webMI.trigger.fire("clicked", true, "");
	}
	if (consistencyGroup)
		consistencyFunction == "write" ? consistencyHandler.write(consistencyGroup) : consistencyHandler.read(consistencyGroup);
}

function backTH() {
}

function arrowTH(dir) {
}

function keyHandler(keyTH, param2) {
	if (keyTH == "focus") {
		focusTH();
	} else if (keyTH == "blur") {
		release();
	} else if (keyTH == "apply") {
		webMI.gfx.setFill("button_stroke", "url(#linear_2)");
		applyTH();
	} else if (keyTH == "releaseClick") {
		webMI.gfx.setFill("button_stroke", "url(#linear_1)");
	} else if (keyTH == "back") {
		backTH();
	} else if (keyTH == "arrow") {
		arrowTH(param2);
	} else if (keyTH == "isActive") {
		return active && param2(document.getElementById("button_clickarea").parentNode);
	}
}

/**
 * EVENT SECTION
 */

webMI.addEvent("button_clickarea", "mousedown", function(e) {
	var id = "button_clickarea";
	var value = true;
	return function(value) {
		if (active) {
			webMI.gfx.setFill("button_stroke", "url(#linear_2)");
			webMI.gfx.setStroke("button_stroke", strokePressed);
		}
	}(value);
});

webMI.addEvent("button_clickarea", "mouseup", function(e) {
	var id = "button_clickarea";
	var value = true;
	return function(value) {
		release();
	}(value);
});

webMI.addEvent("button_clickarea", "mouseout", function(e) {
	var id = "button_clickarea";
	var value = true;
	return function(value) {
		release();
	}(value);
});

webMI.addEvent("button_clickarea", "click", function(e) {
	if (active) {
		tabHandler.setCurrentIndex(keyHandler, function() {
			webMI.trigger.fire("clicked", true, "")
		});
	}
	if (consistencyGroup)
		consistencyFunction == "write" ? consistencyHandler.write(consistencyGroup) : consistencyHandler.read(consistencyGroup);
});

webMI.addEvent("button_clickarea", "dragstart", function(e) {
	if (e.preventDefault) {
		e.preventDefault();
	}
});

/**
 * TRIGGER SECTION
 */

webMI.trigger.connect("com.atvise.setButtonSymbolColor", function(e){
	if (symbolId.replace(e.value.buttonId, "") != symbolId) {
		setChildrenColors(document.getElementById("button_symbol").childNodes);
		// Search children recursively
		function setChildrenColors(children) {
			if (children && children.length > 0) 
				for (var i = 0; i < children.length; i++) {
					if (children[i].attributes) {
						for (var j = 0; j < children[i].attributes.length; j++) {
							if (children[i].attributes[j].name == "fill" && children[i].attributes[j].value.toUpperCase() == e.value.currentColor.toUpperCase()) {
								children[i].attributes[j].value =  e.value.newColor;
							}
							if (children[i].attributes[j].name == "stroke" && children[i].attributes[j].value.toUpperCase() == e.value.currentColor.toUpperCase()) {
								children[i].attributes[j].value =  e.value.newColor;
							}
						}
						setChildrenColors(children[i].childNodes);
					}
				}
			}
		
	}
});]]></code>
</script>
