<?xml version="1.0" encoding="UTF-8"?>
<script>
  <metadata>
    <priority>0</priority>
  </metadata>
  <code><![CDATA[

/**
 * Code for the base value tile object display
 * ----------------------------------------
 * This script supports the functions of the value dashboard tile.
 */


/**
 * DECLARATION SECTION
 */
var BACKGROUND_ID = "background";
var BLINKING_FRAME_ID = "blinking_frame";
var CLICKAREA_ID = "clickarea_display";
var MAIN_LABEL_ID = "main_label";
var SUB_LABEL_ID = "sub_label";
var TITLEAREA_ID = "clickarea_title";
var UNIT_LABEL_ID = "unit_label";
var VALUE_LABEL_ID = "value_label";
var VALUE_UNIT_LABEL_ID = "value_unit_label";

/**
 * BASE SETUP
 */
var BLINKING_FRAME_COLOR_ACTIVE = "#ffffff";
var BLINKING_FRAME_COLOR_INACTIVE = webMI.query["backgroundColor"];
webMI.gfx.setStroke(BLINKING_FRAME_ID, BLINKING_FRAME_COLOR_INACTIVE);


/**
 * RUNTIME SECTION
 * Runtime code has to be executed after onload to take care all other resources are ready
 */

// -------------------------------------------------------------------------
// INIT & PARAM
// -------------------------------------------------------------------------

var queryParams = webMI.query;
var base = queryParams["base"];
// Output
var unit = queryParams["unit"] || "";
var numberMode = queryParams["outputMode"] === "number";
var postDecimalFactor = Math.pow(10, queryParams["postDecimals"]);
var oneLine = queryParams["oneLine"] == "true" ? true : false;
// Behavior
var enableClick = queryParams["enableClick"] == "true" ? true : false;
var enableClickContent = queryParams["enableClickContent"] == "true" ? true : false;
var display = queryParams["display"];
var linkedElementID = queryParams["linkedElementID"];
// Notification
var alarmAddress = queryParams["alarm"];
var statusEnabled = queryParams["statusEnabled"];
var statusTrigger = queryParams["statusTrigger"];
// Appearance
var backgroundColor = queryParams["backgroundColor"];
var colorInactive = queryParams["colorInactive"];
var alarmIndication = queryParams["alarmIndication"];
var statusIndication = queryParams["statusIndication"];
// Options
var tooltip = queryParams["tooltip"];
// Rights
var right = queryParams["right"] || "";
var activeNode = queryParams["activeNode"] || "";
var activeValue = queryParams["activeValue"] || "";
var isActivationNodeSet = activeNode != "" && String(activeValue) != "";


// -------------------------------------------------------------------------
// SCRIPTING
// -------------------------------------------------------------------------

var rightsHandlingProperties = {
	right: right,
	checkBaseNodeWriteRight: false,
	isActivationNodeSet: isActivationNodeSet,
	notifierConfiguration: {"id":"clickarea_title", "node_1": webMI.query["base"], "right_1": "read", "node_2": webMI.query["alarm"], "right_2": "readEvent"},
	setActiveTrigger: true,
	handleStatus: false
};

if (typeof rightsHandling === "function") rightsHandling(rightsHandlingProperties);

// Click to open Display
if (display && enableClick) {
	webMI.addEvent(TITLEAREA_ID, ["click", "touchend"], function (e) {
		if (active) {
			webMI.display.openDisplay(display);
		}
	});
	if (enableClickContent) {
		webMI.addEvent(CLICKAREA_ID, ["click", "touchend"], function (e) {
			if (active) {
				webMI.display.openDisplay(display);
			}
		});
	}

	/* link to a customer object */
	if (linkedElementID) {
		var element = window.document.getElementById(linkedElementID);
		webMI.addEvent(element, ["click", "touchend"], function (e) {
			if (active) {
				webMI.display.openDisplay(display);
			}
		});
	}
}


if (tooltip) {
	webMI.callExtension("SYSTEM.LIBRARY.ATVISE.QUICKDYNAMICS.Tooltip", {
		"auto": "true",
		"id": TITLEAREA_ID,
		"text": tooltip
	});
}


if (alarmAddress) {
	initAlarm(alarmAddress);
}

// -------------------------------------------------------------------------
// Functions
// -------------------------------------------------------------------------

/**
 * Activate display
 */
function setActiveLayout() {
	webMI.gfx.setVisible(MAIN_LABEL_ID, false);
	webMI.gfx.setVisible(SUB_LABEL_ID, false);
	if (oneLine) {
		webMI.gfx.setVisible(VALUE_UNIT_LABEL_ID, null);
	} else {
		webMI.gfx.setVisible(VALUE_LABEL_ID, null);
		webMI.gfx.setVisible(UNIT_LABEL_ID, null);
	}
	webMI.gfx.setStroke(BLINKING_FRAME_ID, null);
	webMI.gfx.setFill(BACKGROUND_ID, backgroundColor);
	webMI.gfx.setFill(BLINKING_FRAME_ID, BLINKING_FRAME_COLOR_ACTIVE);
	setIndicator();
}

/**
 * Deactivate display
 */
function setInactiveLayout() {
	webMI.gfx.setText(SUB_LABEL_ID, "T{Tile inactive}");

	webMI.gfx.setVisible(MAIN_LABEL_ID, null);
	webMI.gfx.setVisible(SUB_LABEL_ID, null);

	webMI.gfx.setVisible(VALUE_LABEL_ID, false);
	webMI.gfx.setVisible(VALUE_UNIT_LABEL_ID, false);
	webMI.gfx.setVisible(UNIT_LABEL_ID, false);

	webMI.gfx.setFill(BACKGROUND_ID, colorInactive);
	webMI.gfx.setFill(BLINKING_FRAME_ID, colorInactive);
	webMI.gfx.setStroke(BLINKING_FRAME_ID, BLINKING_FRAME_COLOR_INACTIVE);
}

// -----------------------------------------------------------------------------------
// TRIGGER & CONNECT
// -----------------------------------------------------------------------------------

/**
 * subscribe base
 */
webMI.data.subscribe(base, function (node) {
	var value = node.value;

	if (numberMode) {
		var precision = postDecimalFactor;
		value = Math.round(parseFloat(value) * precision) / precision;
	}

	webMI.gfx.setText(VALUE_LABEL_ID, typeof value != "undefined" ? value : "");
	webMI.gfx.setText(VALUE_UNIT_LABEL_ID, (typeof value != "undefined" ? value : "") + " " + (unit ? unit : ""));
	webMI.gfx.setText(UNIT_LABEL_ID, unit ? unit : "");
	if (typeof handleStatus === "function")
		handleStatus(node.status);

});

]]></code>
</script>
