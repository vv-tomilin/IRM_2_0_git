<?xml version="1.0" encoding="UTF-8"?>
<script>
	<metadata>
		<priority>0</priority>
	</metadata>
	<code><![CDATA[/**
 * Code for the chart progress resource tile object display
 * ----------------------------------------
 * This script serves as an interface that connects the with highcharts for progress charts
 */


/**
 * DECLARATION SECTION
 */
var BORDER_ID = "border";
var HIGHCHARTS_CONTAINER_ID = "dashboard_highcharts_container";
var MAIN_LABEL_ID = "main_label";
var SUB_LABEL_ID = "sub_label";
var statusEnabled = webMI.query["statusEnabled"];
var statusTrigger = webMI.query["statusTrigger"];
var statusIndication = webMI.query["statusIndication"];


/**
 * Trigger setup
 */
var OPEN_DISPLAY_TRIGGER = "com.atvise.dashboard.openDisplay";
var SET_ACTIVE_TRIGGER = "com.atvise.dashboard.setActive";
var SET_BLINKING_FRAME_STROKE_TRIGGER = "com.atvise.dashboard.setBlinkingFrameStroke";
var SET_INACTIVE_TRIGGER = "com.atvise.dashboard.setInactive";
var SHOW_HIDE_BLINKING_FRAME_TRIGGER = "com.atvise.dashboard.showHideBlinkingFrame";


/**
 * BASE SETUP
 */
var BLINKING_FRAME_COLOR_INACTIVE = "#000000";


/**
 * RUNTIME SECTION
 * Runtime code has to be executed after onload to take care all other resources are ready
 */
webMI.addOnload(function () {
	var queryParams = webMI.query;
	var chartDiv = document.getElementById(HIGHCHARTS_CONTAINER_ID);

	var options = {};
	var categoryName = "dummy";
	var barObj = {};
	var backgroundObj = {};

	// Query parameters
	var base = queryParams["base"];
	var unit = queryParams["unit"] || "";
	var nodeMin = queryParams["nodeMin"];
	var nodeMax = queryParams["nodeMax"];
	var min = nodeMin || queryParams["min"];
	var max = nodeMax || queryParams["max"];
	var postDecimalFactor = Math.pow(10, queryParams["postDecimals"]);
	var right = queryParams["right"] || "";
	var activeNode = queryParams["activeNode"] || "";
	var activeValue = queryParams["activeValue"] || "";
	var alarmIndication = queryParams["alarmIndication"];
	var statusIndication = queryParams["statusIndication"];
	var colorInactive = queryParams["colorInactive"];
	var statusEnabled = queryParams["statusEnabled"];
	var statusTrigger = queryParams["statusTrigger"];
	var alarmAddress = queryParams["alarm"];
	var textColor = queryParams["textColor"];
	var barColor = queryParams["barColor"];
	var barBackgroundColor = queryParams["barBackgroundColor"];
	var barBorderColor = queryParams["barBorderColor"];
	var barBorderWidth = queryParams["barBorderWidth"];

	var active = false;
	var hasRight = false;
	var nodeIsActive = false;
	var minMaxDefined;

	var statusLabels = {};
	statusLabels.Good = "";
	statusLabels.Bad = "BAD";
	statusLabels.Uncertain = "UNCERTAIN";
	statusLabels.Unknown = "UNKNOWN";

	var trendConfig;


	function round(value) {
		return Math.round(value * postDecimalFactor) / postDecimalFactor;
	}

	function sortAsc(prev, next) {
		return prev.y - next.y;
	}

	function sortDesc (prev, next) {
		return next.y - prev.y;
	}

	function formatLabels () {
		var label = "";

		if (this.point) {
			var statusLabel = getStatusLabel(this.point.status);
			label = round(this.y) + " " + unit;

			if (statusLabel !== statusLabels.Good) {
				label += " (" + statusLabel + ")";
			}
		} else {
			label = round(this.value) + " " + unit;
		}

		return label;
	};

	// Activate and deactivate display
	function deActivate() {
		if (right != "") {
			if ((String(activeValue) != "") && (activeNode != "")) {
				active = (nodeIsActive && hasRight);
			} else {
				active = hasRight;
			}
		} else {
			if ((String(activeValue) != "") && (activeNode != "")) {
				active = nodeIsActive;
			} else {
				active = true;
			}
		}

		if (active) {
			webMI.trigger.fire(SET_ACTIVE_TRIGGER, "", "");
			customSetIndicator();
		} else {
			webMI.trigger.fire(SET_INACTIVE_TRIGGER, "", "");
		}
	}

	function getStatusLabel (status) {
		var label = "";

		if (isGood(status)) {
			label = statusLabels.Good;
		} else if (isBad(status)) {
			label = statusLabels.Bad;
		} else if (isUncertain(status)) {
			label = statusLabels.Uncertain;
		} else {
			label = statusLabels.Unknown;
		}


		return label;
	}

	function createChart() {
		min = round(parseFloat(min, 10));
		max = round(parseFloat(max, 10));

		// Add 1% of maximum value because right border will not be displayed
		trendConfig.yAxis.max = max + max * 0.01;
		trendConfig.yAxis.min = min;

		trendConfig.plotOptions.series.threshold = min;

		barObj.color = barColor;
		barObj.borderWidth = barBorderWidth;
		barObj.borderColor = barBorderColor;
		barObj.data = [];

		backgroundObj.grouping = false;
		backgroundObj.borderWidth = barBorderWidth;
		backgroundObj.borderColor = barBorderColor;
		backgroundObj.color = barBackgroundColor;
		backgroundObj.dataLabels = {};
		backgroundObj.dataLabels.enabled = false;
		backgroundObj.data = [{}];
		backgroundObj.data[0].y = max
		backgroundObj.data[0].status = 0

		trendConfig.series.push(backgroundObj, barObj);
		trendConfig.yAxis.tickPositioner =  function() {
			return [min, max];
		}

		webMI.trendFactory.createTrend(chartDiv, options, function (trendInstance) {
			var chart = trendInstance.chart;

			// Remove "prefix" SYSTEM.SECURITY.RIGHTS
			if (right.search(/SYSTEM\.SECURITY\.RIGHTS\./) != -1) {
				right = right.substring(23,right.length);
			}

			// Right handling
			if (right != "") {
				webMI.addEvent(webMI.data, "clientvariableschange", function(e) {
					hasRight = false;
					if (("username" in e) && (e.username != "")) {
							hasRight = webMI.hasRight(right);
					}
					deActivate();
				});
			}

			// Check active node and value
			if ((activeNode != "") && (String(activeValue) != "")) {
				webMI.data.subscribe(activeNode, function(e) {
					var nodeActiveValue = e.value;
					if (typeof nodeActiveValue == "boolean") {
						nodeIsActive = (String(nodeActiveValue) == activeValue);
					} else if (typeof nodeActiveValue == "number") {
						try {
							var temp = parseFloat(activeValue);
							nodeIsActive = (nodeActiveValue == temp);
						} catch(e) {
							nodeIsActive = false;
						}
					} else {
						nodeIsActive = (nodeActiveValue == activeValue);
					}

					deActivate();
				});
			} else {
				deActivate();
			}

			// Open display trigger
			webMI.trigger.connect(OPEN_DISPLAY_TRIGGER, function (triggerObj) {
				if (active) {
					webMI.display.openDisplay(triggerObj.value);
				}
			}, "");

			if (alarmAddress) {
				initAlarm(alarmAddress);
			}

			deActivate();
			chartDiv.style.visiblity = "visible";

			webMI.data.subscribe(base, function(node) {
				var seriesObj = {};
				seriesObj.y = node.value;
				seriesObj.status = node.status;

				chart.series[1].update({
					data: [seriesObj]
				}, true);

				handleStatus(node.status);
			});
		});
	}

	webMI.gfx.setVisible(MAIN_LABEL_ID, false);
	webMI.gfx.setVisible(SUB_LABEL_ID, false);
	webMI.gfx.setVisible(BORDER_ID, false);

	options.trendName = chartDiv.id.split("_dashboard_highcharts_container")[0];
	options.trendGroup = "";
	options.trendConfig = {};

	trendConfig = options.trendConfig;

	trendConfig.chart = {};
	trendConfig.title = {};
	trendConfig.xAxis = {};
	trendConfig.xAxis.labels = {};
	trendConfig.yAxis = {};
	trendConfig.yAxis.labels = {};
	trendConfig.tooltip = {};
	trendConfig.plotOptions = {};
	trendConfig.plotOptions.bar = {};
	trendConfig.plotOptions.series = {};
	trendConfig.plotOptions.series.states = {};
	trendConfig.plotOptions.series.states.hover = {};
	trendConfig.plotOptions.bar.dataLabels = {};
	trendConfig.legend = {};
	trendConfig.series = [];
	trendConfig.credits = {};
	trendConfig.exporting = {};

	trendConfig.chart.type = "bar"
	trendConfig.chart.zoomType = "";
	trendConfig.title.text = "";
	trendConfig.chart.panning = false;


	trendConfig.xAxis.type = "category";
	trendConfig.xAxis.title = "";
	trendConfig.xAxis.labels.enabled = false;
	trendConfig.xAxis.lineWidth = 0;
	trendConfig.xAxis.gridLineWidth = 0;
	trendConfig.xAxis.minorGridLineWidth = 0;
	trendConfig.xAxis.majorGridLineWidth = 0;
	trendConfig.xAxis.lineColor = "transparent";
	trendConfig.xAxis.tickLength = 0;
	trendConfig.xAxis.minorTickLength = 0;
	trendConfig.xAxis.majorTickLength = 0;
	trendConfig.xAxis.categories = [categoryName];

	trendConfig.yAxis.title = "";
	trendConfig.yAxis.lineWidth = 0;
	trendConfig.yAxis.gridLineWidth = 0;
	trendConfig.yAxis.minorGridLineWidth = 0;
	trendConfig.yAxis.majorGridLineWidth = 0;
	trendConfig.yAxis.lineColor = "transparent";
	trendConfig.yAxis.tickLength = 0;
	trendConfig.yAxis.minorTickLength = 0;
	trendConfig.yAxis.majorTickLength = 0;
	trendConfig.yAxis.labels.formatter = formatLabels

	trendConfig.plotOptions.bar.dataLabels.enabled = true;
	trendConfig.plotOptions.bar.dataLabels.align = "right";
	trendConfig.plotOptions.bar.dataLabels.formatter = formatLabels;
	trendConfig.plotOptions.bar.dataLabels.color = textColor;
	trendConfig.plotOptions.bar.animation = false;

	trendConfig.tooltip.enabled = true;

	trendConfig.legend.enabled = false;
	trendConfig.credits.enabled = false;
	trendConfig.exporting.enabled = false;
	trendConfig.plotOptions.series.states.hover.enabled = false;
	trendConfig.plotOptions.series.enableMouseTracking = false;


	options.trendConfig.atviseOptions = {
		configNode: "",
		configName: "",
		mode: "",
		source: "opcUA",
		enableCursor1: false,
		enableCursor2: false,
		disableDownSampling: true
	};

	if (base && min && max) {
		if (nodeMin || nodeMax) {
			webMI.data.read([nodeMin, nodeMax], function (nodes) {
				if (typeof nodes[0].value === "number") {
					min = nodes[0].value;
				}

				if (typeof nodes[1].value === "number") {
					max = nodes[1].value;
				}

				createChart();
			});
		} else {
			createChart();
		}
	} else {
		webMI.trigger.fire(SET_INACTIVE_TRIGGER, "", "");
	}
});

/**
 * FUNCTIONS
 */

// Set indicator
function customSetIndicator() {
	if (currentIndicator != "" || !active)
		return;

	if (activeIndicators["trigger"]) {
		currentIndicator = "trigger";
	} else if (activeIndicators["status"]) {
		currentIndicator = "status";
	} else if (activeIndicators["alarm"]) {
		currentIndicator = "alarm";
	} else {
		currentIndicator = "";
		return;
	}

	if (active) {
		webMI.trigger.fire(SET_BLINKING_FRAME_STROKE_TRIGGER, activeIndicators[currentIndicator].color, "");
		webMI.trigger.fire(SHOW_HIDE_BLINKING_FRAME_TRIGGER, null, "");
	}

	var interval = activeIndicators[currentIndicator].interval;
	setTimeout(function() {
		if (active) {
			webMI.trigger.fire(SHOW_HIDE_BLINKING_FRAME_TRIGGER, false, "");
		}
		setTimeout(function() {
			currentIndicator = "";
			customSetIndicator();
		}, interval);
	}, interval);
}]]></code>
</script>
