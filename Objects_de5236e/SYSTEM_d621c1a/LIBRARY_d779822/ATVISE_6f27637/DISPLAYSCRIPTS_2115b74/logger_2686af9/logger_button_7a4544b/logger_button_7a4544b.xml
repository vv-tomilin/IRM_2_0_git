<?xml version="1.0" encoding="UTF-8"?>
<script>
  <metadata>
    <priority>0</priority>
  </metadata>
  <code><![CDATA[/**
 * Code for the logger button object display
 * -----------------------------------------------
 * This button watches log informations an opens the logger dialog.
 */


/**
 * DECLARATION SECTION
 */
var active = false;
var activeNode = (webMI.query["activeNode"] == undefined) ? "" : webMI.query["activeNode"];
var activeValue = (webMI.query["activeValue"] == undefined) ? "" : webMI.query["activeValue"];
var activeSet = activeNode != "" && String(activeValue) != "";
var define = {
	"hour": 1 * 60 * 60 * 1000,
	"day": 24 * 60 * 60 * 1000,
	"week": 7 * 60 * 60 * 1000,
};
var display = webMI.query["display"] ? webMI.query["display"] : "SYSTEM.LIBRARY.ATVISE.OBJECTDISPLAYS.Advanced.logger.logger_dialog";
var displaySmall = webMI.query["displaySmall"] ? webMI.query["displaySmall"] : "SYSTEM.LIBRARY.ATVISE.OBJECTDISPLAYS.Advanced.logger.logger_dialog_small";
var extraBorderColor = webMI.query["extraBorderColor"];
var fillColor = webMI.query["fillColor"];
var fillColorInactive = webMI.query["fillColorInactive"];
var focusStrokeColor = webMI.query["focusStrokeColor"];
var right = (webMI.query["right"] == undefined) ? "" : webMI.query["right"];
var strokeNormal = "none";
var strokePressed = webMI.query["strokePressed"];
var tabHandler = webMI.callExtension("SYSTEM.LIBRARY.ATVISE.QUICKDYNAMICS.Tab Handler");
var tabIndex = (webMI.query["tabIndex"] == undefined) ? "" : webMI.query["tabIndex"];
var targetFrame = webMI.query["frame"];
var tooltip = (webMI.query["tooltip"] == undefined) ? "" : webMI.query["tooltip"];

var errorActive = false;
var errorIndication = webMI.query["errorIndication"];
var errorInterval = webMI.query["errorInterval"];
var errorGroup = webMI.query["errorGroup"];
var errorSubgroup = webMI.query["errorSubgroup"];
var errorLabel = webMI.query["errorLabel"];
var errorOffset = (typeof(webMI.query["errorOffset"]) === "undefined" || webMI.query["errorOffset"] == "") ? define.hour : webMI.query["errorOffset"] * 1000;
var errorSmall = webMI.query["errorSmall"] == "true";

display = webMI.getClientInfo() ? (webMI.getClientInfo().isDesktop ? display : (displaySmall ? displaySmall : display)) : display;
display = errorSmall ? displaySmall : display;


/**
 * RUNTIME SECTION
 */
var rightsHandlingProperties = {
	right: right,
	checkBaseNodeWriteRight: false,
	isActivationNodeSet: activeSet,
	notifierConfiguration: {},
	setActiveTrigger: false,
	handleStatus: false
};

if (typeof rightsHandling === "function")
	rightsHandling(rightsHandlingProperties);

if (typeof extraBorderColor != "undefined" && extraBorderColor != "none" && extraBorderColor != "") {
	webMI.gfx.setStroke("button_stroke", extraBorderColor);
}

webMI.addOnload(function () {
	var doc = document.getElementById("button_clickarea").ownerDocument;
	tabHandler.register(tabIndex, keyHandler, doc);
});

if (tooltip != "") {
	webMI.callExtension("SYSTEM.LIBRARY.ATVISE.QUICKDYNAMICS.Tooltip", {
		"auto": "true",
		"id": "button_clickarea",
		"text": tooltip
	});
}


/* get node values */
webMI.data.call("LoggerBrowseLog", {
	group: errorGroup,
	subgroup: errorSubgroup
}, function (result) {
	var nodes = [];

	for (var key in result) {
		nodes.push("v:" + key);
	}

	if (nodes.length < 1) {
	    if(errorGroup != "" && errorGroup != "atvise")
		  console.warn("Logger: Log nodes for " + errorGroup + "" + (errorSubgroup ? "." + errorSubgroup + " " : " ") + "have not yet been initialized.");
		return;
	}

	var date_to = (new Date()).getTime();
	var date_from = date_to - errorOffset;

	var subscribeFilter = {};
	subscribeFilter.address = nodes;
	subscribeFilter.init = ["v:false"];

	var queryFilter = {};
	queryFilter.address = nodes;
	queryFilter.init = ["v:false"];
	queryFilter.timestamp = ["n:>=" + date_from + "<" + date_to];

    function readCurrentLog() {
        webMI.data.queryFilter(
            queryFilter,
            function (h) {

                var lastLog = {};
                for (var key in h.result) {
                    var logObject;
                    try {
                        var obj = h.result[key];
                        logObject = JSON.parse(obj.value);
                        var events = logObject.event;

                        if (logObject.reference) {
                            if (lastLog[logObject.reference]) {
                                if (lastLog[logObject.reference].length < events.length)
                                    lastLog[logObject.reference] = events;
                            } else {
                                lastLog[logObject.reference] = events;
                            }
                        }
                    } catch (ex) {
                        if(typeof(obj.value) != "undefined" && obj.value != "")
                            console.error("Logger: Could not parse log object (" + obj.value + ")!");
                    }
                }

                var isActiveLog = false;
                for (var key in lastLog) {
                    var events = lastLog[key]
                    var event = events[events.length - 1];
                    if (event.status == "new") {
                        isActiveLog = true;
                        continue;
                    }
                }
                loggerFrameActive(isActiveLog);
            }
        );
    }

    function watchCurrentLog() {
        /* subscribe updates */
        var subscriptionId = webMI.data.subscribeFilter(
            subscribeFilter,
            function (obj) {
                try {
                    var logObject = JSON.parse(obj.value);

                    var validLabel = errorLabel == logObject.label || errorLabel == "";

                    if (validLabel && logObject.event.length == 1) {
                        loggerFrameActive();
                    }
                } catch (exception) {
                    if(typeof(obj.value) != "undefined" && obj.value != "")
                        console.error("Logger: Could not parse log object (" + obj.value + ")!");
                }
            });
        return subscriptionId;
    }

    function watchUpdates() {
        var watchId = webMI.data.subscribe(
            "AGENT.OBJECTS.ATVISE.Logger",
            function(obj) {
                if(obj.value) {
                    try {
                        var logObject = JSON.parse(obj.value);

                        var validGroup = errorGroup == logObject.group || errorGroup == "";
                        var validSubgroup = errorSubgroup == logObject.subgroup || errorSubgroup == "";
                        var validLabel = errorLabel == logObject.label || errorLabel == "";

                        if(validGroup && validSubgroup && validLabel) {
                            readCurrentLog();
                        }
                    } catch (exception) {
                        if(typeof(obj.value) != "undefined" && obj.value != "")
                            console.error("Logger: Could not parse log object (" + obj.value + ")!");
                    }
                }
            }
        );
    }

    readCurrentLog();
    var subscriptionId = watchCurrentLog();
    var watchId = watchUpdates();


    /* unsubscribe at unload */
    webMI.addOnunload(function () {
        webMI.data.unsubscribe(watchId);
        webMI.data.unsubscribeFilter(subscriptionId);
    });

});


/**
 * FUNCTION SECTION
 */

/**
 * active/deactivate svg notification frame (blinking frame)
 * @param active
 */
function loggerFrameActive(active) {
	if (active !== false) {
		errorActive = true;
	} else {
		errorActive = false;
	}
	errorFrameActivation();
}

/**
 * animate svg notification frame (blinking frame)
 */
function errorFrameActivation() {
	if (errorActive) {
		webMI.gfx.setVisible("blinking_frame", true);
		webMI.gfx.setStroke("blinking_frame", errorIndication);

		var interval = errorInterval;
		if (errorInterval > 0) {
			setTimeout(function () {
				webMI.gfx.setVisible("blinking_frame", false);
				setTimeout(function () {
					errorFrameActivation();
				}, interval);
			}, interval);
		}
	} else {
		webMI.gfx.setVisible("blinking_frame", false);
	}
}


function setActiveLayout() {
	webMI.gfx.setFill("button_bg", fillColor);
	webMI.gfx.setVisible("button_stroke", null);
}


function setInactiveLayout() {
	webMI.gfx.setFill("button_bg", fillColorInactive);
	webMI.gfx.setVisible("button_stroke", false);
}


function release(stayFocued) {
	if (active) {
		webMI.gfx.setFill("button_stroke", "url(#linear_1)");
		if (typeof extraBorderColor == "undefined" || extraBorderColor == "none" || extraBorderColor == "") {
			if (stayFocued == false) webMI.gfx.setStroke("button_stroke", strokeNormal);
		} else {
			webMI.gfx.setStroke("button_stroke", extraBorderColor);
			webMI.gfx.setStrokeWidth("button_stroke", 1);
		}
	}
}


function focusTH() {
	if (active) {
		webMI.gfx.setStroke("button_stroke", focusStrokeColor);
		if (typeof extraBorderColor != "undefined" && extraBorderColor != "none" && extraBorderColor != "") {
			webMI.gfx.setStrokeWidth("button_stroke", 2);
		}
	}
}


function applyTH() {
	if (active && display != "") {
		openDataDialog();
	}
}

/**
 * open error log display
 */
function openDataDialog() {
	var query = webMI.query;
	query["errorSmall"] = display == displaySmall;
	query["errorGroup"] = "";
	query["errorSubgroup"] = "";
	query["errorLabel"] = "";

	var w = display == displaySmall ? 800 : 1280;
	var h = display == displaySmall ? 425 + 20 : 680 + 20;

	var openedWindow = webMI.display.openWindow({
		display: display,
		extern: false,
		menubar: false,
		modal: true,
		movable: true,
		resizable: false,
		scrollbars: false,
		status: false,
		title: "T{Log}",
		toolbar: false,
		width: w,
		height: h,
		query: query
	});

	var doc = openedWindow.getContentDocument();
	webMI.addEvent(doc, "keydown", function (e) {
		if (e.keyCode == 27)
			openedWindow.close();
	});

	loggerFrameActive(false);
}


function backTH() {
}


function arrowTH(dir) {
}


function keyHandler(keyTH, param2) {
	if (keyTH == "focus") {
		focusTH();
	} else if (keyTH == "blur") {
		release(false);
	} else if (keyTH == "apply") {
		webMI.gfx.setFill("button_stroke", "url(#linear_2)");
		applyTH();
	} else if (keyTH == "releaseClick") {
		webMI.gfx.setFill("button_stroke", "url(#linear_1)");
	} else if (keyTH == "back") {
		backTH();
	} else if (keyTH == "arrow") {
		arrowTH(param2);
	} else if (keyTH == "isActive") {
		return active && param2(document.getElementById("button_clickarea").parentNode);
	}
}

/**
 * Event SECTION
 */
webMI.addEvent("button_clickarea", "click", function (e) {
	var id = "button_clickarea";
	var value = true;
	return function (value) {
		if (active && display != "") {
			tabHandler.setCurrentIndex(keyHandler);
			openDataDialog();
		}
	}(value);
});

webMI.addEvent("button_clickarea", "mousedown", function (e) {
	var id = "button_clickarea";
	var value = true;
	return function (value) {
		if (active) {
			webMI.gfx.setFill("button_stroke", "url(#linear_2)");
			webMI.gfx.setStroke("button_stroke", strokePressed);
		}
	}(value);
});

webMI.addEvent("button_clickarea", "mouseup", function (e) {
	var id = "button_clickarea";
	var value = true;
	return function (value) {
		release(true);
	}(value);
});

webMI.addEvent("button_clickarea", "mouseout", function (e) {
	var id = "button_clickarea";
	var value = true;
	return function (value) {
		release(false);
	}(value);
});

webMI.addEvent("button_clickarea", "dragstart", function (e) {
	if (e.preventDefault) {
		e.preventDefault();
	}
});]]></code>
</script>
