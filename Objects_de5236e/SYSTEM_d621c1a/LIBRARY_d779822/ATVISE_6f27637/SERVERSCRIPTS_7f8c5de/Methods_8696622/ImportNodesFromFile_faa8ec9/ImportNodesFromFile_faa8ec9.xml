<?xml version="1.0" encoding="UTF-8"?>
<script>
  <parameter name="address" type="string" trigger="false" relative="false" value=""/>
  <parameter name="file" type="string" trigger="false" relative="false" value=""/>
  <code><![CDATA[/** atvise server wrapper for UA method "AGENT.OPCUA.METHODS.importNodes"
This script is a standard atvise resource and must not be modified.
\example
\code
var result = call("Methods.ImportNodesFromFile", {
	address: "",
	file: "C:/myfiles/mynodes.xml"
});
if (result.error)
	console.log(result.errorstring);
else
	console.log(result.result);
\endcode

\b Input:
\param address {string} If empty then the import is absolute, otherwise the import is relative to the specified node.
\param file {string} The name of the file to import from. The file must contain a nodeset in XML format.

\b Output:
\return {Object} A result object is returned with the following properties:
- Object.error {number},{optional} Returns the error code of the call in case of an error. If no error occurred, it is undefined.
- Object.errorstring {string},{optional} Returns the error string of the call in case of an error. If no error occurred, it is undefined.
- Object.result {object},{optional} Returns the result of the call if no error occurred. It has the following properties:
	- result.success {boolean} If true then all nodes were successfully imported. false if an error occurred.
	- result.version_ok {boolean} If true then the version in the XML matched the atvise version, otherwise false.
*/

var result = {};
var methodCall = new UaNode("AGENT.OPCUA.METHODS.importNodes");

if (!new FileSystem().isFile(file)) {
	result.error = UaNode.BADINVALIDARGUMENT;
	result.errorstring = methodCall.statusToString(result.error) + ", file:BadInvalidArgument";
	return result;
}

var stream = new InputFileStream(file, "utf8");
var xmlNodeSet = stream.read(0);
stream.close();

var callResult = methodCall.call({
	object: "AGENT.OPCUA.METHODS",
	input: [
		{type: UaNode.NODEID, value: address},
		{type: UaNode.XMLELEMENT, value: xmlNodeSet}
	]
});

if (callResult.error) {
	result.error = callResult.error;
	result.errorstring = methodCall.statusToString(result.error);
	if (callResult.argumentError) {
		var parameterNames = ["address", "xmlnodeset"];
		for (var i = 0; i < callResult.argumentError.length; ++i)
			if (callResult.argumentError[i])
				result.errorstring += ", " + parameterNames[i] + ":" + methodCall.statusToString(callResult.argumentError[i]);
	}
}
else {
	result.result = {};
	if (callResult.result.length > 0)
		result.result["success"] = callResult.result[0];
	if (callResult.result.length > 1)
		result.result["version_ok"] = callResult.result[1];
}

return result;]]></code>
</script>
