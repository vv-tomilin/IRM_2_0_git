<?xml version="1.0" encoding="UTF-8"?>
<script>
  <parameter name="ua" type="uainput" trigger="false" relative="false" value=""/>
  <code><![CDATA[/* Parse all displays and collect displays that reference this display
Input (members of ua):
	-node:uanodeid{mandatory} Specifies the nodeid of the display to search for
Output (return value)	:
	tablecolumnheaders:[string] Array of column titles
	tablecolumntypes:[uanodeid] Array of typedefinitions of column types
	tabledata:[[string]] Array of string array that represents the rows of the result
If no displays reference the target empty arrays are returned.
*/

function toNodes(result) { var x = []; for (var i=0; i<result.length; ++i) x.push(result[i].node); return x;}
function toNodes2(result, x) { for (var i=0; i<result.length; ++i) x.push(result[i].node); }

var serverTypes = toNodes((new UaNode("ObjectTypes.ATVISE.Server")).browse({reference:UaNode.HASSUBTYPE, recursive:true}));
var servers = toNodes((new UaNode(UaNode.OBJECTSFOLDER)).browse({typedefinition:serverTypes}));
servers.push(new UaNode("ObjectTypes.PROJECT"));

var displays = [];
for (var i = 0; i < servers.length; ++i)
	toNodes2(servers[i].browse({typedefinition:"VariableTypes.ATVISE.Display", recursive:true}), displays);

var from = [];
var to = [];

for (var i = 0; i < displays.length; ++i){
	var d = call("SYSTEM.LIBRARY.ATVISE.SERVERSCRIPTS.CrossRef.Lib.DisplayReferences", {"ua":{node:displays[i], recursive:false}});
	for (var j = 0; j < d.to.length; ++j){
		from.push(d.from[j]);
		to.push(d.to[j]);
	}
}

var strings2 = [];
var strings1 = [];
var stringsReturned = {};

var nodesToReturn = [];
var nodesReturned = {};
var node = new UaNode(ua.node);
if (node.equal(node.typedefinition, "VariableTypes.ATVISE.Display")) {
	nodesToReturn.push(node);
}
toNodes2(node.browse({typedefinition:"VariableTypes.ATVISE.Display", recursive:true}), nodesToReturn);
for (var i = 0; i < nodesToReturn.length; ++i){
	nodesReturned[nodesToReturn[i].nodeaddr] = true;
}
while (nodesToReturn.length) {
	var toDisplay = nodesToReturn.shift();
	for (var j = 0; j < to.length; ++j){
		if (to[j].equal(toDisplay)){
			if (!stringsReturned[to[j].nodeaddr+from[j].nodeaddr])
			{
				stringsReturned[to[j].nodeaddr+from[j].nodeaddr] = true;
				strings1.push(to[j].nodeaddr);
				strings2.push(from[j].nodeaddr);
				if (!nodesReturned[from[j].nodeaddr]){
					nodesToReturn.unshift(from[j]);
					nodesReturned[from[j].nodeaddr] = true;
				}
			}
		}
	}
}

return {
	tablecolumnheaders:["Display", "Referenced in display"],
	tablecolumntypes:[new UaNode("VariableTypes.ATVISE.Display"), new UaNode("VariableTypes.ATVISE.Display")],
	tabledata:[strings1, strings2]
};]]></code>
</script>
