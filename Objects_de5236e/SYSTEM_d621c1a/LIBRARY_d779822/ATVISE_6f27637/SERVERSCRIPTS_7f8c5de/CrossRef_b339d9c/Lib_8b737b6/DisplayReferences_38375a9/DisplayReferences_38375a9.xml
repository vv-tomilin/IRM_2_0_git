<?xml version="1.0" encoding="UTF-8"?>
<script>
  <parameter name="ua" type="uainput" trigger="false" relative="false" value=""/>
  <code><![CDATA[/* Parse a display and collect references to other displays
Input (members of ua):
	-node:uanodeid{mandatory} Specifies the nodeid of the display to parse
	-recursive:bool{optional, default=false} If true collect all descendant otherwise only next child
Output (return value)	:
	from:[uanodeid] Array of parents
	to:[uanodeid] Array of children
If no other displays are referenced empty arrays are returned.
*/
var recursive = ua.recursive;
var nodeid = ua.node;
//console.log("Display References: ", nodeid, " recursive:", recursive);
var display = new UaNode(nodeid);
var xlink = "http://www.w3.org/1999/xlink";
var from = [];
var to = [];
var parsedDisplays = {};
var displaysToParse = [display];
parsedDisplays[display.nodeid] = true;
if (!display.exists()) throw new Error("Display:"+display.nodeid+" does not exist.");
while(displaysToParse.length) {
	if ((display = displaysToParse.shift()).exists()) {
		try {
			var doc = new XMLDoc(display.value);
		} catch(e) {
			console.log("error", display.nodeaddr + ": " + e);
			throw e;
		}
		if (doc.root) {
			for (var xmlNode = doc.root.first("svg"); xmlNode; xmlNode = xmlNode.next("svg")) {
				var child = new UaNode((unescape(xmlNode.attribute("href", xlink))).split('?',1).shift());
				if (child.exists()) {
					if (recursive && !parsedDisplays[child.nodeid]) {
						parsedDisplays[child.nodeid] = true;
						displaysToParse.unshift(child);
					}
					from.push(display);
					to.push(child);
				}
			}
		}
	}
}
//for (var i = 0; i < from.length; ++i) console.log(from[i].nodeid, " -> ", to[i].nodeid);
return {"from":from, "to":to};]]></code>
</script>
