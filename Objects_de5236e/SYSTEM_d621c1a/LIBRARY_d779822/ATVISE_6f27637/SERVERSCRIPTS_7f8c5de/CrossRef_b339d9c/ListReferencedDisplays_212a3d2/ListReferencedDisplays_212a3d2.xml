<?xml version="1.0" encoding="UTF-8"?>
<script>
  <parameter name="ua" type="uainput" trigger="false" relative="false" value=""/>
  <code><![CDATA[/* Parse a display or displays and collect references to other displays
Input (members of ua):
	-node:uanodeid{mandatory} Specifies the nodeid of the display or the folder to parse
Output (return value)	:
	tablecolumnheaders:[string] Array of column titles
	tablecolumntypes:[uanodeid] Array of typedefinitions of column types
	tabledata:[[string]] Array of string array that represents the rows of the result
If no other displays are referenced empty arrays are returned.
*/
function toNodes2(result, x) { for (var i=0; i<result.length; ++i) x.push(result[i].node); }

var node = new UaNode(ua.node);
var startNodes = [];
if (node.equal(node.typedefinition, "VariableTypes.ATVISE.Display")) {
	startNodes.push(node);
}
toNodes2(node.browse({typedefinition:"VariableTypes.ATVISE.Display", recursive:true}), startNodes);

var from = [];
var to = [];
for (var i = 0; i < startNodes.length; ++i){
	var d = call("SYSTEM.LIBRARY.ATVISE.SERVERSCRIPTS.CrossRef.Lib.DisplayReferences", {"ua":{node:startNodes[i], recursive:false}});
	for (var j = 0; j < d.to.length; ++j){
		from.push(d.from[j]);
		to.push(d.to[j]);
	}
}

var strings1 = [];
var strings2 = [];
for (var i = 0; i < to.length; ++i){
	strings1.push(from[i].nodeaddr);
	strings2.push(to[i].nodeaddr);
}
return {
	tablecolumnheaders:["Display", "Contains display"],
	tablecolumntypes:[new UaNode("VariableTypes.ATVISE.Display"), new UaNode("VariableTypes.ATVISE.Display")],
	tabledata:[strings1, strings2]
};]]></code>
</script>
